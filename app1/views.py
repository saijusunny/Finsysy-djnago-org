
from curses.ascii import HT
from http.client import HTTPResponse
from multiprocessing import context
import os
from django.conf import settings
from django.core.mail import send_mail
from django.shortcuts import render, redirect,HttpResponse
from datetime import datetime, date, timedelta
from .models import advancepayment, paydowncreditcard, salesrecpts, timeact, timeactsale, Cheqs, suplrcredit, addac, \
    bills, invoice, expences, payment, credit, delayedcharge, estimate, service, noninventory, bundle, employee, \
    payslip, inventory, customer, supplier, company, accounts, ProductModel, ItemModel, accountype, \
    expenseaccount, incomeaccount, accounts1, recon1, recordpay, addtax1, bankstatement, customize

from django.contrib.auth.models import auth, User
from django.contrib import messages
from django.db.models import Sum, Q
from django.db.models.functions import Coalesce
import json
from django.http.response import JsonResponse
from django.contrib.auth.decorators import login_required
import itertools
import requests
# from .pdf import html2pdf
from num2words import num2words
import random


from django.db.models import F
from django.db.models import Count
from . models import *

def index(request):
    return render(request, 'app1/index.html')


def something(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/something.html', {'cmp1': cmp1})


def go(request):
    return render(request, 'app1/login.html')


def create(request):
    try:
        if request.method == 'POST':
            firstname = request.POST['first_name']
            lastname = request.POST['last_name']
            email = request.POST['email']
            username = request.POST['username']
            password = request.POST['password']
            conformpassword = request.POST['conformpassword']
            if password == conformpassword:
                if User.objects.filter(username=username).exists():
                    messages.info(
                        request, 'This username already exists. Sign up again')
                    return render(request, 'app1/login.html')
                # elif User.objects.filter(email=email).exists():
                #     messages.info(
                #         request, 'This email already exists. Please enter valid Email')
                #     return render(request, 'app1/login.html')
                else:
                    user = User.objects.create_user(first_name=firstname, last_name=lastname, email=email,
                                                    username=username, password=password)
                    user.save()
                    return render(request, 'app1/company.html', {'member': user})
            else:
                return redirect('')
        else:
            return redirect('')
    except:
        return redirect('')


def Signup_emailval(request):
    email = request.GET.get('email', None)
 
    data = {
        'is_taken': User.objects.filter(email=email).exists()
    }
    if data['is_taken']:
        data['error_message'] = 'Email already exists.'
    return JsonResponse(data)


def register(request, id):
    try:
        if request.method == 'POST':
            cname = request.POST.get('cname')
            caddress = request.POST.get('caddress')
            city = request.POST.get('city')
            state = request.POST.get('state')
            pincode = request.POST.get('pincode')
            cemail = request.POST.get('cemail')
            phone = request.POST.get('phone')
            try:
                img1 = request.FILES['img1']
            except:
                img1 = 'default'
            bname = request.POST.get('bname')
            industry = request.POST.get('industry')
            ctype = request.POST.get('ctype')
            abt = request.POST.get('abt')
            paid = request.POST.get('paid')
            new_id = User.objects.get(id=id)
            companys = company(id=new_id, cname=cname, caddress=caddress, city=city, state=state, pincode=pincode,
                               cemail=cemail,
                               phone=phone, bname=bname, industry=industry, ctype=ctype, abt=abt, paid=paid)
            if img1 != 'default':
                companys.cimg = img1
            companys.save()
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            comp = company.objects.get(id=new_id)
            accountsecond = [
                ['Account Receivable(Debtors)', 'Account Receivable(Debtors)',
                 'Account Receivable(Debtors)'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred CGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred GST Input Credit'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred IGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred Krishi Kalyan Cess Input Credit'],
                ['Current Assets', 'Prepaid Expenses', 'Prepaid Expenses'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred Service Tax Input Credit'],
                ['Current Assets', 'Deferred Service Tax Input Credit', 'Deferred SGST'],
                ['Current Assets', 'Deferred Service Tax Input Credit',
                    'Deferred VAT Input Credit'],
                ['Current Assets', 'Service Tax Refund', 'GST Refund'],
                ['Current Assets', 'Inventory', 'Inventory Asset'],
                ['Current Assets', 'Service Tax Refund',
                    'Krishi Kalyan Cess Refund'],
                ['Current Assets', 'Prepaid Expenses', 'Prepaid Insurance'],
                ['Current Assets', 'Service Tax Refund', 'Service Tax Refund'],
                ['Current Assets', 'Other Current Assets', 'TDS Receivable'],
                ['Current Assets', 'Other Current Assets', 'Uncategorised Asset'],
                ['Current Assets', 'Undeposited Fund', 'Undeposited Fund'],
                ['Fixed Assets', 'Accumulated Depreciation',
                    'Accumulated Depreciation'],
                ['Fixed Assets', 'Buildings', 'Buildings and Improvements'],
                ['Fixed Assets', 'Furniture and fixtures', 'Furniture and Equipment'], [
                    'Fixed Assets', 'Land', 'Land'],
                ['Fixed Assets', 'Leasehold Improvements', 'Leasehold Improvements'],
                ['Fixed Assets', 'Vehicles', 'Vehicles'],
                ['Accounts Payable(Creditors)', 'Accounts Payable(Creditors)',
                 'Accounts Payable(Creditors)'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'CGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'CST Payable'],
                ['Current Liabilities', 'Tax Suspense', 'CST Suspense'],
                ['Current Liabilities', 'Sales And Service Tax Payable', 'GST Payable'],
                ['Current Liabilities', 'Tax Suspense', 'GST Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'IGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input CGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input CGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input IGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input IGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Krishi Kalyan Cess'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Krishi Kalyan Cess RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Service Tax'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Input Service Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input SGST'],
                ['Current Liabilities', 'Sales asnd Service Tax Payable',
                    'Input SGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 14%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 4%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Input VAT 5%'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Krishi Kalyan Cess Payable'],
                ['Current Liabilities', 'Tax Suspense',
                    'Krishi Kalyan Cess Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output CGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output CGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output CST 2%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output IGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output IGST Tax RCM'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Output Krishi Kaylan Cess'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output Krishi Kalyan Cess RCM'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Output Service Tax'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output Service Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output SGST'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Output SGST Tax RCM'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 14%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 4%'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'Output VAT 5%'],
                ['Current Liabilties', 'Sales and Service Tax Payable',
                    'Service Tax Payable'],
                ['Current Liabilities', 'Tax Suspense', 'Service Tax Suspense'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'SGST Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable',
                    'Swachh Barath Cess Payable'],
                ['Current Liabilities', 'Tax Suspense',
                    'Swachh Barath Cess Suspense'],
                ['Current Liabilities', 'Current Liabilities', 'TDS Payable'],
                ['Current Liabilities', 'Sales and Service Tax Payable', 'VAT Payable'],
                ['Current Liabilities', 'Tax Suspense', 'VAT Suspense'],
                ['Equity', 'Opening Balance Equity', 'Opening Balance Equity'],
                ['Equity', 'Retained Earnings', 'Retained Earnings'],
                ['Income', 'Service/Fee Income', 'Billable Expense Income'],
                ['Income', 'Service/Fee Income', 'Consulting Income'],
                ['Income', 'Sales of Product Income', 'Product Sales'], [
                    'Income', 'Sales of Product Income', 'Sales'],
                ['Income', 'Sales of Product Income', 'Sales-Hardware'],
                ['Income', 'Sales of Product Income', 'Sales-Software'],
                ['Income', 'Sales of Product Income',
                    'Sales-Support and Maintanance'],
                ['Income', 'Discount/Refund Given', 'Sales Discounts'],
                ['Income', 'Sales of Product Income', 'Sales of Product Income'],
                ['Income', 'Service/Fee Income', 'Services'],
                ['Income', 'Unapplied Cash Payment Income',
                    'Unapplied Cash Payment Income'],
                ['Income', 'Service/Fee Income', 'Uncategorised Income'],
                ['Cost of Goods Sold', 'Suppliers and Materials-COS', 'Cost of Sales'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Equipment Rental for Jobs'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Freight and Shipping Cost'],
                ['Cost of Goods Sold', 'Suppliers and Materials-COS',
                    'Inventory Shrinkage'],
                ['Cost of Goods Sold', 'Cost of Goods Sold', 'Merchant Account Fees'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Purchases-Hardware for Resale'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Purchases-Software for Resale'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Subcontracted Services'],
                ['Cost of Goods Sold', 'Cost of Goods Sold',
                    'Tools and Craft Suppliers'],
                ['Expenses', 'Advertising/Promotional', 'Advertising/Promotional'],
                ['Expenses', 'Bank Charges', 'Bank Charges'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Business Licenses and Permitts'],
                ['Expenses', 'Charitable Contributions', 'Charitable Contributions'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Computer and Internet Expense'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Continuing Education'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Depreciation Expense'],
                ['Expenses', 'Dues and Subscriptions', 'Dues and Subscriptions'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Housekeeping Charges'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses'],
                ['Expenses', 'Office/General Administrative Expenses',
                 'Insurance Expenses-General Liability Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses-Health Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                 'Insurance Expenses-Life and Disability Insurance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Insurance Expenses-Professional Liability'],
                ['Expenses', 'Interest Paid', 'Interest Expenses'],
                ['Expenses', 'Meals and Entertainment', 'Meals and Entertainment'],
                ['Expenses', 'Office/General Administrative Expenses', 'Office Supplies'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Postage and Delivery'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Printing and Reproduction'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Professional Fees'],
                ['Expenses', 'Suppliers and Materials', 'Purchases'],
                ['Expenses', 'Office/General Administrative Expenses', 'Rent Expense'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Repair and Maintanance'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Small Tools and Equipments'],
                ['Expenses', 'Tax Expense', 'Swachh Barath Cess Expense'],
                ['Expense', 'Office/General Administrative Expenses', 'Taxes-Property'],
                ['Expenses', 'Office/General Administrative Expenses',
                    'Telephone Expense'],
                ['Expenses', 'Office/General Administrative Expenses', 'Travel Expense'],
                ['Expenses', 'Other Miscellaneous Service Cost',
                    'Uncategorised Expense'],
                ['Expenses', 'Utilities', 'Utilities'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Finance Charge Income'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Insurance Proceeds Received'],
                ['Other Income', 'Interest Earned', 'Interest Income'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Proceeds From Sale of Assets'],
                ['Other Income', 'Other Miscellaneous Income',
                    'Shipping and Delivery Income'],
                ['Other Expenses', 'Other Expenses', 'Ask My Accountant'],
                ['Other Expenses', 'Other Expenses', 'CGST Write-Off'],
                ['Other Expense', 'Other Expense', 'GST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'IGST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Miscellaneous Expense'],
                ['Other Expenses', 'Other Expenses', 'Political Contributions'],
                ['Other Expenses', 'Other Expenses',
                    'Reconciliation Discrepancies'],
                ['Other Expenses', 'Other Expenses', 'SGST Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Tax Write-Off'],
                ['Other Expenses', 'Other Expenses', 'Vehicle Expenses']]

            accounype = [['Deferred CGST'], ['Deferred GST Input Credit'], ['Deferred IGST'],
                         ['Deferred Krishi Kalyan Cess Input Credit'],
                         ['Deferred Service Tax Input Credit'], [
                             'Deferred SGST'], ['Deferred VAT Input Credit'],
                         ['GST Refund'],
                         ['Inventory Asset'], ['Paid Insurance'], [
                             'Service Tax Refund'], ['TDS Receivable'],
                         ['Uncategorised Asset'],
                         ['Accumulated Depreciation'], ['Buildings and Improvements'], [
                             'Furniture and Equipments'],
                         ['Land'],
                         ['Leasehold Improvements'], ['Vehicles'], [
                             'CGST Payable'], ['CST Payable'], ['CST Suspense'],
                         ['GST Payable'],
                         ['GST Suspense'], ['IGST Payable'], ['Input CGST'], [
                             'Input CGST Tax RCM'], ['Input IGST'],
                         ['Input IGST Tax RCM'],
                         ['Input Krishi Kalyan Cess'], [
                             'Input Krishi Kalyan Cess RCM'], ['Input Service Tax'],
                         ['Input Service Tax RCM'],
                         ['Input SGST'], ['Input SGST Tax RCM'], [
                             'Input VAT 14 %'], ['Input VAT 4%'], ['Input VAT 5%'],
                         ['Krishi Kalyan Cess Payable'], [
                             'Krishi Kalyan Cess Suspense'], ['Output CGST'],
                         ['Output CGST Tax RCM'],
                         ['Output CST 2%'], ['Output IGST'], [
                             'Output IGST Tax RCM'], ['Output Krishi Kalyan Cess'],
                         ['Output Krishi Kalyan Cess RCM'], [
                             'Output Service Tax'], ['Output Service Tax RCM'],
                         ['Output SGST'],
                         ['Output SGST Tax RCM'], ['Output VAT 14%'], [
                             'Output VAT 4%'], ['Output VAT 5%'],
                         ['Service Tax Payable'],
                         ['Service Tax Suspense'], ['SGST Payable'], [
                             'SGST Suspense'], ['Swachh Barath Cess Payable'],
                         ['Swachh Barath Cess Suspense'], ['TDS Payable'], ['VAT Payable'], ['VAT Suspense']]
            for i in range(len(accountsecond)):
                for j in range(1):
                    accounts1model = accounts1(cid=comp, acctype=accountsecond[i][0],
                                               detype=accountsecond[i][1], name=accountsecond[i][2], description='',
                                               gst='', deftaxcode='', balance=0.0,
                                               asof=tod)
                    accounts1model.save()
            for i in range(len(accounype)):
                for j in range(1):
                    accoutype = accountype(
                        cid=comp, accountname=accounype[i][0])
                    accoutype.save()
            newstyl = customize(name='Default', template='classic', pcolour='#87CEFA', scolour='#87CEFA', fonts='serif', selected='selected', cid=cmp1)
            newstyl.save()
            return redirect('regcomp')
        else:
            return redirect('regcomp')
    except:
        return redirect('regcomp')


def login(request):
    try:
        if request.method == 'POST':
            try:
                username = request.POST['username']
                password = request.POST['password']
                user = auth.authenticate(username=username, password=password)
                cmp1 = company.objects.get(id=user.id)
                request.session["uid"] = user.id
                if user is not None:
                    auth.login(request, user)
                    return redirect('/app1/godash')
                else:
                    messages.info(request, 'Invalid username or password')
                    return redirect('regcomp')
            except:
                messages.info(request, 'Invalid username or password')
                return render(request, 'app1/login.html')
        else:
            messages.info(request, 'Invalid username or password')
            return render(request, 'app1/login.html')
    except:
        messages.info(request, 'Invalid username or password')
        return render(request, 'app1/login.html')

@login_required(login_url='regcomp')
def godash(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
    except:
        return redirect('/')

    try:

        cmp1 = company.objects.get(id=request.session['uid'])
        request.session["invcol"] = " "
        request.session["noninvcol"] = " "
        request.session["buncol"] = " "

        label_1 = []
        data_1 = []
        label_2=[]
        data_2=[]
        label_3 = []
        data_3 = []
        exp = 0.0
        inc = 0.0
        up=0.0
        p=0.0
        s=0.0
        balance=accounts1.objects.order_by('balance')
        for bal in balance:
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Expenses'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Other Expenses'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Cost of Goods Sold'):
                    label_1.append(bal.name)
                    data_1.append(bal.balance)
                    exp+=bal.balance

                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Income'):
                    label_2.append(bal.name)
                    data_2.append(bal.balance)
                    inc+=bal.balance
                if (bal.cid==cmp1 and bal.balance!=0 and bal.acctype=='Other Income'):
                    label_2.append(bal.name)
                    data_2.append(bal.balance)
                    inc+=bal.balance

        balance1 = accounts.objects.order_by('balance')
        for bal in balance1:
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Expenses'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Other Expenses'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Cost of Goods Sold'):
                label_1.append(bal.name)
                data_1.append(bal.balance)
                exp+= bal.balance

            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Income'):
                label_2.append(bal.name)
                data_2.append(bal.balance)
                inc += bal.balance
            if (bal.cid == cmp1 and bal.balance != 0 and bal.acctype == 'Other Income'):
                label_2.append(bal.name)
                data_2.append(bal.balance)
                inc += bal.balance



        invoice1 = invoice.objects.order_by('baldue')
        for inv in invoice1:
            if (inv.cid == cmp1 and inv.baldue != 0):
                up += float(inv.baldue)

        invoice2 = invoice.objects.order_by('grandtotal')
        for inv in invoice2:

            if(inv.cid == cmp1 and inv.baldue != 0):
                label_3.append(inv.invoicedate)
                data_3.append(inv.grandtotal)
                s+=float(inv.grandtotal)

        payment1 = payment.objects.order_by('amtreceived')
        for pay in payment1:
            if (pay.cid == cmp1 and pay.amtreceived != 0):
                p += float(pay.amtreceived)


        context = {'cmp1': cmp1,'label_1':label_1,'data_1':data_1,'label_2':label_2,'data_2':data_2,'label_3':label_3,'data_3':data_3,'balance':balance,'balance1':balance1,'exp':exp,'inc':inc,'invoice1':invoice1,'invoice2':invoice2,'up':up,'p':p,'s':s}
        return render(request, 'app1/dashbord.html', context)
    except:
        return redirect('/')



def logout(request):
    request.session["uid"] = ""
    auth.logout(request)
    return redirect('/')


@login_required(login_url='regcomp')
def userprofile(request, id):
    try:
        user1 = User.objects.get(id=id)
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/userprofile.html', {'users': user1, 'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def edituserprofile(request):
    try:
        user1 = User.objects.get(id=request.session["uid"])
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'users': user1, 'cmp1': cmp1}
        return render(request, 'app1/edituserprofile.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def updateuserprofile(request):
    try:
        user = User.objects.get(id=request.session["uid"])
        comp = company.objects.get(id=user.id)

        user.first_name = request.POST["first_name"]
        user.last_name = request.POST["last_name"]
        user.email = request.POST["email"]
        p1 = request.POST["newpassword"]
        p2 = request.POST["newpassword1"]

        comp.cname = request.POST["cname"]
        comp.caddress = request.POST["caddress"]
        comp.city = request.POST["city"]
        comp.state = request.POST["state"]
        comp.pincode = request.POST["pincode"]
        comp.cemail = request.POST["cemail"]
        comp.phone = request.POST["phone"]
        comp.bname = request.POST["bname"]
        comp.industry = request.POST["industry"]
        comp.ctype = request.POST["ctype"]
        try:
            img1 = request.FILES["img1"]
            comp.cimg = img1
        except:
            img2 = request.POST["img2"]
            comp.cimg = img2

        comp.save()
        user.save()

        if p1 == p2:
            if p1 != "":
                user.set_password(p1)
                user.save()
                logout(request)
                return redirect('/app1/go')
        elif p1 == "":
            return redirect('/app1/godash')

        return redirect('/app1/godash')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goonlinebank(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/onlinebank.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def goofflinebank(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/offlinebank.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gobankrecon(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/bankrecon.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gosalesrecords(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        emp = salesrecpts.objects.filter(cid=cmp1).all()
        sds = timeactsale.objects.filter(cid=cmp1).all()
        inv = invoice.objects.filter(cid=cmp1).all()
        est1 = estimate.objects.filter(cid=cmp1).all()
        crd1 = credit.objects.filter(cid=cmp1).all()
        pay1 = payment.objects.filter(cid=cmp1).all()
        delayed1 = delayedcharge.objects.all()
        context = {'sale': emp, 'tisa': sds, 'invosales': inv, 'crd': crd1, 'pay': pay1, 'est': est1,
                   'delayed': delayed1,
                   'cmp1': cmp1}
        return render(request, 'app1/salesrecords.html', context)
    except:
        return redirect('godash')




@login_required(login_url='regcomp')
def gocustomers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.filter(cid=cmp1).all()

        for i in custo:
            custname = i.firstname +" "+i.lastname
            
            statment = cust_statment.objects.filter(customer=custname,cid=cmp1)
            debit=0
            credit=0
            total1 = 0
            
            for j in statment :
                if j.Amount:
                    debit+=j.Amount
                if j.Payments:
                    credit+=j.Payments

            total1=debit-credit
            print(total1)
            i.receivables = total1
            i.save()


        context = {'customers': custo, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('godash')








@login_required(login_url='regcomp')
def gopands(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        l_count = 0
        o_count = 0
        invcol1 = request.session["invcol"]
        noninvcol1 = request.session["noninvcol"]
        buncol1 = request.session["buncol"]
        invcol = invcol1
        noninvcol = noninvcol1
        buncol = buncol1
        for i in inv:
            if int(i.initialqty) == 0:
                o_count += 1
            elif int(i.initialqty) < int(i.stockalrt):
                l_count += 1
        context = {'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser, 'suppliers': suppliers,
                   'l_count': l_count, 'o_count': o_count, 'invcol': invcol, 'noninvcol': noninvcol, 'buncol': buncol}
        return render(request,'app1/pands.html',context)
    except:
        return redirect('gopands')

@login_required(login_url='regcomp')
def goexpences(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tyi = timeact.objects.filter(cid=cmp1).all()
        ch = Cheqs.objects.filter(cid=cmp1).all()
        exp = advancepayment.objects.filter(cid=cmp1).all()
        bill = bills.objects.filter(cid=cmp1).all()
        supl = suplrcredit.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        exp1 = expences.objects.filter(cid=cmp1).all()
        pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
        context = {'ti': tyi, 'che': ch, 'advancepayment': exp, 'suplrcredit': supl, 'bills': bill, 'exp': exp1,
                   'pdcc': pdc, 'cmp1': cmp1, 'suppliers': suppliers}
        return render(request, 'app1/expences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gosupplies(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1).all()
        context = {'suppliers': suppliers, 'cmp1': cmp1}
        return render(request, 'app1/supplies.html', context)
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def goaddsuppliers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'accoun': acounts}
        return render(request, 'app1/addsuppliers.html', context)
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def customers(request):
    
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                toda = date.today()
                tod = toda.strftime("%Y-%m-%d")
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1,

                                    #  opening_balance = request.POST['openbalance'],

                                     
                                     
                                     
                                     )

                customer1.save()
                try:
                    temp=request.POST['openbalance']
                
                    if temp != "":
                        customer1.opening_balance = request.POST['openbalance'] 
                        customer1.opening_balance_due = request.POST['openbalance'] 
                        customer1.date= tod
                        customer1.save()
                except:
                    pass
                
                    
                   

                

                if customer1.opening_balance != "":

                    add_cust_stat=cust_statment(

                    customer = customer1.firstname +" "+ customer1.lastname,

                    cid  = cmp1,

                    

                    Date = tod,

                    Transactions="Customer Opening Balance",

                    Amount= customer1.opening_balance,

                )


                add_cust_stat.save()

                    







                return redirect('/app1/customers')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    


@login_required(login_url='regcomp')
def viewcust(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.get(id=id, cid=cmp1)
        context = {'customer': custo, 'cmp1': cmp1}
        return render(request, 'app1/viewcust.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def editcustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.get(customerid=id, cid=cmp1)
        context = {'customer': custo, 'cmp1': cmp1}
        return render(request, 'app1/editcustomer.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def updatecustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custom = customer.objects.get(customerid=id, cid=cmp1)
        custom.title = request.POST['title']
        custom.firstname = request.POST['firstname']
        custom.lastname = request.POST['lastname']
        custom.company = request.POST['company']
        custom.location = request.POST['location']
        custom.gsttype = request.POST['gsttype']
        custom.gstin = request.POST['gstin']
        custom.panno = request.POST['panno']
        custom.email = request.POST['email']
        custom.website = request.POST['website']
        custom.mobile = request.POST['mobile']
        custom.street = request.POST['street']
        custom.city = request.POST['city']
        custom.state = request.POST['state']
        custom.pincode = request.POST['pincode']
        custom.country = request.POST['country']
        custom.shipstreet = request.POST['shipstreet']
        custom.shipcity = request.POST['shipcity']
        custom.shipstate = request.POST['shipstate']
        custom.shippincode = request.POST['shippincode']
        custom.shipcountry = request.POST['shipcountry']
        custom.opening_balance = request.POST['openbalance']

        custom.save()
        return redirect('gocustomers')
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def deletecustomer(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        custom = customer.objects.get(customerid=id, cid=cmp1)
        custom.delete()
        return redirect('gocustomers')
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def gostandard(request):
    return render(request, 'app1/standard.html')


@login_required(login_url='regcomp')
def goreports(request):
    return render(request, 'app1/customreport.html')


@login_required(login_url='regcomp')
def gomanagementreports(request):
    return render(request, 'app1/managementreports.html')


@login_required(login_url='regcomp')
def gotaxes(request):
    return render(request, 'app1/viewtax.html')


@login_required(login_url='regcomp')
def returntaxes(request):
    return render(request, 'app1/returntaxes.html')


@login_required(login_url='regcomp')
def addtax(request):
    return render(request, 'app1/addtax.html')


@login_required(login_url='regcomp')
def taxrate(request):
    return render(request, 'app1/taxrate.html')


@login_required(login_url='regcomp')
def grouptaxes(request):
    return render(request, 'app1/grouptax.html')


@login_required(login_url='regcomp')
def customtaxes(request):
    return render(request, 'app1/customtax.html')


@login_required(login_url='regcomp')
def edittaxes(request):
    return render(request, 'app1/edittaxes.html')


@login_required(login_url='regcomp')
def editsettings(request):
    return render(request, 'app1/editsettings.html')


@login_required(login_url='regcomp')
def taxadd1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tax2 = addtax1(
            taxname=request.POST['taxnam'], description=request.POST['descrip1'], cid=cmp1)
        tax2.save()
        return redirect('gotax')
    except:
        return redirect('gotax')


@login_required(login_url='regcomp')
def gotax(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tax = addtax1.objects.filter(cid=cmp1).all()
        context = {'addtax1': tax, 'cmp1': cmp1}
        return render(request, 'app1/viewtax.html', context)
    except:
        return redirect('gotax')


@login_required(login_url='regcomp')
def paymenthistory(request):
    return render(request, 'app1/paymenthistory.html')


@login_required(login_url='regcomp')
def gocoa(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        acounts = accounts.objects.filter(cid=cmp1)
        account1s = accounts1.objects.filter(cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        return render(request, 'app1/coa.html',
                      {'Product': prodobj, 'tod': tod, 'Items': itemobj, 'acount': acounts, 'cmp1': cmp1,
                       'account1s': account1s})
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def createaccount(request):

    cmp1 = company.objects.get(id=request.session["uid"])
    acctype = request.POST.get('acctype')
        
    name = request.POST.get('name')
    description = request.POST.get('description')                           
    
    balance = request.POST.get('balance')
    if balance=="":
            balance=0.0
    asof = request.POST.get('asof')
    dbbalance=request.POST.get('dbbalance')
    if dbbalance=="":
            dbbalance=0.0
       
        
    account = accounts1(acctype=acctype, name=name, description=description,
                                    balance=balance, asof=asof, cid=cmp1,dbbalance=dbbalance)
    account.save()
                
    return redirect('gocoa')


@login_required(login_url='regcomp')
def coaedit(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        account = accounts.objects.get(accountsid=accountsid)
        context = {'acount': account, 'Product': prodobj,
                   'Items': itemobj, 'cmp1': cmp1}
        return render(request, 'app1/coaedit.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def accupdate(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            gst = request.POST.get('gst')
            if gst == None:
                acc = accounts.objects.get(accountsid=accountsid, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = ''
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
            else:
                acc = accounts.objects.get(accountsid=accountsid, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = request.POST['gst']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
        else:
            return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def deleteaccount(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        account.delete()
        return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def coa1edit(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        account1s = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        context = {'account1s': account1s, 'Product': prodobj,
                   'Items': itemobj, 'cmp1': cmp1}
        return render(request, 'app1/coa1edit.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def acc1update(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            gst = request.POST.get('gst')
            if gst == None:
                print('hello1')
                acc = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = ''
                acc.balance = request.POST['balance']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
            else:
                acc = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
                acc.description = request.POST['description']
                acc.gst = request.POST['gst']
                acc.balance = request.POST['balance']
                acc.deftaxcode = request.POST['deftaxcode']
                acc.save()
                return redirect('gocoa')
        else:
            return redirect('gocoa')
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def gomyacc(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        adf = addac.objects.filter(cid=cmp1)
        context = {'addac': adf}
        return render(request, 'app1/myacc.html', context)
    except:
        return redirect('godash')





@login_required(login_url='regcomp')
def goprintinvoice(request):
    return render(request, 'app1/printinvoice.html')


@login_required(login_url='regcomp')
def goaddcust(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcust.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goselectpands(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/selectpands.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goemployee(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        emp = employee.objects.filter(cid=cmp1).all()
        context = {'employee': emp, 'cmp1': cmp1}
        return render(request, 'app1/employee.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gopayslip(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.filter(cid=cmp1).all()
        context = {'payslip': pay, 'cmp1': cmp1}
        return render(request, 'app1/showpayslip.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def goaddemp(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/addemp.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def employees(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        # if employee.objects.filter(aadhaarnumber=request.POST['aadhaarnumber']).exists() or employee.objects.filter(
        #         employeenumber=request.POST['employeenumber']).exists():
        #     emp = employee.objects.filter(cid=cmp1).all()
        #     context = {'employee': emp, 'cmp1': cmp1}
        #     return redirect('goemployee')
        # if employee.objects.filter(gmail=request.POST['gmail']).exists():
        #     emp = employee.objects.filter(cid=cmp1).all()
        #     context = {'employee': emp, 'cmp1': cmp1}
        #     messages.info(
        #                 request, 'This email already exists. Please enter valid Email')
        #     return redirect('goemployee')
        if request.method == 'POST':
                emp11=employee()
                emp11.name=request.POST['name']
                emp11.joiningdate=request.POST['joiningdate']
                emp11.employeenumber=request.POST['employeenumber']
                emp11.designation=request.POST['designation']
                emp11.department=request.POST['department']
                emp11.branch=request.POST['branch']
                emp11.location=request.POST['location']
                emp11.gender=request.POST['gender']
                emp11.age=request.POST['age']
                emp11.mobile=request.POST['mobile']
                emp11.gmail=request.POST['gmail']
                emp11.address=request.POST['address']

                emp11.providebankdetails=request.POST['providebankdetails']
                emp11.bankaccountnumber=request.POST['bankaccountnumber']
                emp11.ifsccode=request.POST['ifsccode']

                emp11.hrareceived=request.POST['hrareceived']
                emp11.totalrentpaid=request.POST['totalrentpaid']
                emp11.livein=request.POST['livein']

                emp11.applicabletaxregime=request.POST['applicabletaxregime']
                emp11.pannumber=request.POST['pannumber']
                emp11.aadhaarnumber=request.POST['aadhaarnumber']
                emp11.universalaccountnumber=request.POST['universalaccountnumber']
                emp11.pfaccountnumber=request.POST['pfaccountnumber']
                emp11.epsaccountnumber=request.POST['epsaccountnumber']
                emp11.praccountnumber=request.POST['praccountnumber']
                emp11.esinumber=request.POST['esinumber']
                emp11.esidispensaryname=request.POST['esidispensaryname']
                emp11.basic=request.POST['basic']
                emp11.da=request.POST['da']
                emp11.othincome1=request.POST['othrincome1']
                emp11.othincome2=request.POST['othrincome2']
                emp11.othincome3=request.POST['othrincome3']
                emp11.othincome4=request.POST['othrincome4']
                emp11.othincome5=request.POST['othrincome5']
                emp11.othamount1=request.POST['othramount1']
                emp11.othamount2=request.POST['othramount2']
                emp11.othamount3=request.POST['othramount3']
                emp11.othamount4=request.POST['othramount4']
                emp11.othamount5=request.POST['othramount5']
                emp11.provifund=request.POST['provifund']
                emp11.proftax=request.POST['proftax']
                emp11.esi=request.POST['esi']
                emp11.deduc1=request.POST['deduc1']
                emp11.deduc2=request.POST['deduc2']
                emp11.deduc3=request.POST['deduc3']
                emp11.deduc4=request.POST['deduc4']
                emp11.deducamt1=request.POST['deducamt1']
                emp11.deducamt2=request.POST['deducamt2']
                emp11.deducamt3=request.POST['deducamt3']
                emp11.deducamt4=request.POST['deducamt4']
                emp11.cid=cmp1
                emp11.save()
                emp = employee.objects.filter(cid=cmp1).all()
                context = {'employee': emp, 'cmp1': cmp1}
                return redirect('goemployee')
    except:
        return redirect('goemployee')

@login_required(login_url='regcomp')
def Employee_gmailval(request):
    gmail = request.GET.get('gmail', None)
    print("amal")
    data = {
        'is_taken': employee.objects.filter(gmail=gmail).exists()
    }
    if data['is_taken']:
        data['error_message'] = 'Email already exists.'
    return JsonResponse(data)


@login_required(login_url='regcomp')
def empedit(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empl = employee.objects.get(employeeid=employeeid, cid=cmp1)
        context = {'employee': empl, 'cmp1': cmp1}
        return render(request, 'app1/editemp.html', context)
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def updateemp(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        emplo = employee.objects.get(employeeid=employeeid, cid=cmp1)
        emplo.name = request.POST['name']
        emplo.joiningdate = request.POST['joiningdate']
        emplo.employeenumber = request.POST['employeenumber']
        emplo.designation = request.POST['designation']
        emplo.department = request.POST['department']
        emplo.branch = request.POST['branch']
        emplo.location = request.POST['location']
        emplo.gender = request.POST['gender']
        emplo.age = request.POST['age']
        emplo.mobile = request.POST['mobile']
        emplo.gmail = request.POST['gmail']
        emplo.address = request.POST['address']

        emplo.providebankdetails = request.POST['providebankdetails']
        emplo.bankaccountnumber = request.POST['bankaccountnumber']
        emplo.ifsccode = request.POST['ifsccode']

        emplo.hrareceived = request.POST['hrareceived']
        emplo.totalrentpaid = request.POST['totalrentpaid']
        emplo.livein = request.POST['livein']

        emplo.applicabletaxregime = request.POST['applicabletaxregime']
        emplo.pannumber = request.POST['pannumber']
        emplo.aadhaarnumber = request.POST['aadhaarnumber']
        emplo.universalaccountnumber = request.POST['universalaccountnumber']
        emplo.pfaccountnumber = request.POST['pfaccountnumber']
        emplo.epsaccountnumber = request.POST['epsaccountnumber']
        emplo.praccountnumber = request.POST['praccountnumber']
        emplo.esinumber = request.POST['esinumber']
        emplo.esidispensaryname = request.POST['esidispensaryname']

        emplo.basic = request.POST['basic']
        emplo.da = request.POST['da']

        emplo.othincome1 = request.POST['othrincome1']
        emplo.othincome2 = request.POST['othrincome2']
        emplo.othincome3 = request.POST['othrincome3']
        emplo.othincome4 = request.POST['othrincome4']
        emplo.othincome5 = request.POST['othrincome5']
        emplo.othamount1 = request.POST['othramount1']
        emplo.othamount2 = request.POST['othramount2']
        emplo.othamount3 = request.POST['othramount3']
        emplo.othamount4 = request.POST['othramount4']
        emplo.othamount5 = request.POST['othramount5']
        emplo.provifund = request.POST['provifund']
        emplo.proftax = request.POST['proftax']
        emplo.esi = request.POST['esi']
        emplo.deduc1 = request.POST['deduc1']
        emplo.deduc2 = request.POST['deduc2']
        emplo.deduc3 = request.POST['deduc3']
        emplo.deduc4 = request.POST['deduc4']
        emplo.deducamt1 = request.POST['deducamt1']
        emplo.deducamt2 = request.POST['deducamt2']
        emplo.deducamt3 = request.POST['deducamt3']
        emplo.deducamt4 = request.POST['deducamt4']

        emplo.save()
        return redirect('goemployee')
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def deleteemp(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empl = employee.objects.get(employeeid=employeeid, cid=cmp1)
        empl.delete()
        return redirect('goemployee')
    except:
        return redirect('goemployee')


@login_required(login_url='regcomp')
def payslipcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empp = employee.objects.filter(cid=cmp1).all()
        context = {'employees': empp, 'cmp1': cmp1}
        pay = payslip(empname=request.POST['empname'], employeenumber=request.POST['employeenumber'],
                      desig=request.POST['desig'], fper=request.POST['fper'],
                      tper=request.POST['tper'], paydate=request.POST['paydate'], basic=request.POST['basic'],
                      da=request.POST['da'],
                      ear1=request.POST['ear1'], earr1=request.POST['earr1'], ear2=request.POST['ear2'],
                      earr2=request.POST['earr2'], ear3=request.POST['ear3'], earr3=request.POST['earr3'],
                      ear4=request.POST['ear4'], earr4=request.POST['earr4'], ear5=request.POST['ear5'],
                      earr5=request.POST['earr5'], ear6=request.POST['ear6'], earr6=request.POST['earr6'],
                      ear7=request.POST['ear7'], earr7=request.POST['earr7'], provi=request.POST['provi'],
                      prof=request.POST['prof'], esi=request.POST['esi'], ded1=request.POST['ded1'],
                      dedu1=request.POST['dedu1'], ded2=request.POST['ded2'], dedu2=request.POST['dedu2'],
                      ded3=request.POST['ded3'], dedu3=request.POST['dedu3'], ded4=request.POST['ded4'],
                      dedu4=request.POST['dedu4'], ded5=request.POST['ded5'], dedu5=request.POST['dedu5'],
                      ded6=request.POST['ded6'], dedu6=request.POST['dedu6'],
                      gros=request.POST['gros'], tded=request.POST['tded'], netsal=request.POST['netsal'], cid=cmp1)
        pay.save()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def viewpayslip(request, employeeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        empp = employee.objects.get(employeeid=employeeid, cid=cmp1)
        context = {'employees': empp, 'cmp1': cmp1}
        return render(request, 'app1/payslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def deletepay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        pay.delete()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def viewpay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pays = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        no = pays.employeenumber
        emp = employee.objects.get(employeenumber=no, cid=cmp1)
        context = {'payslip': pays, 'employee': emp, 'cmp1': cmp1}
        return render(request, 'app1/printpayslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def payedit(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pay = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        context = {'payslip': pay, 'cmp1': cmp1}
        return render(request, 'app1/editpayslip.html', context)
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def updatepay(request, payslipid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        payid = payslip.objects.get(payslipid=payslipid, cid=cmp1)
        payid.empname = request.POST['empname']
        payid.employeenumber = request.POST['employeenumber']
        payid.desig = request.POST['desig']
        payid.fper = request.POST['fper']
        payid.tper = request.POST['tper']
        payid.paydate = request.POST['paydate']
        payid.basic = request.POST['basic']
        payid.da = request.POST['da']
        payid.ear1 = request.POST['ear1']
        payid.earr1 = request.POST['earr1']
        payid.ear2 = request.POST['ear2']
        payid.earr2 = request.POST['earr2']
        payid.ear3 = request.POST['ear3']
        payid.earr3 = request.POST['earr3']
        payid.ear4 = request.POST['ear4']
        payid.earr4 = request.POST['earr4']
        payid.ear5 = request.POST['ear5']
        payid.earr5 = request.POST['earr5']
        payid.ear6 = request.POST['ear6']
        payid.earr6 = request.POST['earr6']
        payid.ear7 = request.POST['ear7']
        payid.earr7 = request.POST['earr7']
        payid.provi = request.POST['provi']
        payid.prof = request.POST['prof']
        payid.esi = request.POST['esi']
        payid.ded1 = request.POST['ded1']
        payid.dedu1 = request.POST['dedu1']
        payid.ded2 = request.POST['ded2']
        payid.dedu2 = request.POST['dedu2']
        payid.ded3 = request.POST['ded3']
        payid.dedu3 = request.POST['dedu3']
        payid.ded4 = request.POST['ded4']
        payid.dedu4 = request.POST['dedu4']
        payid.ded5 = request.POST['ded5']
        payid.dedu5 = request.POST['dedu5']
        payid.ded6 = request.POST['ded6']
        payid.dedu6 = request.POST['dedu6']
        payid.gros = request.POST['gros']
        payid.tded = request.POST['tded']
        payid.netsal = request.POST['netsal']
        payid.save()
        return redirect('gopayslip')
    except:
        return redirect('gopayslip')


@login_required(login_url='regcomp')
def goinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'suppliers': suppliers, 'accoun': acounts}
        return render(request, 'app1/inv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gononinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        acount = accounts1.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'suppliers': suppliers,
                   'accoun': acounts, 'acount': acount}
        return render(request, 'app1/noninv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def goser(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'accoun': acounts}
        return render(request, 'app1/ser.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gobun(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'inv': inv, 'noninv': noninv}
        return render(request, 'app1/bun.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def goselpan(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/selectpands.html', context)
    except:
        return redirect('gopands')


def regcomp(request):
    return render(request, 'app1/login.html')


@login_required(login_url='regcomp')
def cust(request):
    try:
        customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                             lastname=request.POST['lastname'], company=request.POST['company'],
                             location=request.POST['location'], gsttype=request.POST['gsttype'],
                             gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                             website=request.POST['website'], mobile=request.POST['mobile'],
                             street=request.POST['street'],
                             city=request.POST['city'], state=request.POST['state'], pincode=request.POST['pincode'],
                             country=request.POST['country']

                             
                             
                             )
        customer1.save()
        custo = customer.objects.filter(cid=cmp1).all()
        context = {'customer': custo}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('gocustomers')


@login_required(login_url='regcomp')
def suppliercreate(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session["uid"])
            firstname = request.POST.get('firstname')
            lastname = request.POST.get('lastname')
            if supplier.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f'Supplier {firstname} {lastname} already exists. Please provide a different name.')
                return redirect('gosupplies')
            else:
                sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                               lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                               mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                               website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                               terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                               accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                               gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                               effectivedate=request.POST.get('effectivedate'),
                               defaultexpenceaccount=request.POST.get(
                                   'defaultexpenceaccount'),
                               street=request.POST.get('street'),
                               city=request.POST.get('city'), state=request.POST.get('state'),
                               pincode=request.POST.get('pincode'),
                               country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
                sup.save()
                suppliers = supplier.objects.filter(cid=cmp1).all()
                context = {'suppliers': suppliers, 'cmp1': cmp1}
                balan = float(request.POST.get('openingbalance'))
                defaultexpenceaccount = request.POST.get(
                    'defaultexpenceaccount')
                account = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                if balan != 0:
                    account.balance = account.balance + balan
                    account.save()
                    if accounts1.objects.get(name='Ask My Accountant', cid=cmp1):
                        account1 = accounts1.objects.get(
                            name='Ask My Accountant', cid=cmp1)
                        account1.balance = account1.balance + balan
                        account1.save()
                else:
                    pass
                firstname = request.POST.get('firstname')
                lastname = request.POST.get('lastname')
                toda = date.today()
                tod = toda.strftime("%Y-%m-%d")
                bill2 = bills(payee=firstname + ' ' + lastname, paymdate=tod,
                              grandtotal=request.POST['openingbalance'], payornot='openbalance', cid=cmp1)
                bill2.save()
                return redirect('gosupplies')
        else:
            return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def supedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        sup = supplier.objects.get(supplierid=id, cid=cmp1)
        context = {'supplier': sup, 'cmp1': cmp1}
        return render(request, 'app1/editsup.html', context)
    except:
        return redirect('/app1/gosupplies')


@login_required(login_url='regcomp')
def updatesup(request, id):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            supplie = supplier.objects.get(supplierid=id, cid=cmp1)
            supplie.title = request.POST['title']
            supplie.firstname = request.POST['firstname']
            supplie.lastname = request.POST['lastname']
            supplie.company = request.POST['company']
            supplie.mobile = request.POST['mobile']
            supplie.email = request.POST['email']
            supplie.website = request.POST['website']
            supplie.billingrate = request.POST['billingrate']
            supplie.terms = request.POST['terms']
            supplie.openingbalance = request.POST['openingbalance']
            supplie.accountno = request.POST['accountno']
            supplie.gsttype = request.POST['gsttype']
            supplie.gstin = request.POST['gstin']
            supplie.taxregistrationno = request.POST['taxregistrationno']
            supplie.effectivedate = request.POST['effectivedate']
            supplie.defaultexpenceaccount = request.POST['defaultexpenceaccount']
            supplie.tds = request.POST['tds']
            supplie.street = request.POST['street']
            supplie.city = request.POST['city']
            supplie.state = request.POST['state']
            supplie.pincode = request.POST['pincode']
            supplie.country = request.POST['country']
            supplie.notes = request.POST['notes']
            supplie.save()
            return redirect('gosupplies')
        else:
            return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def deletesup(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sup = supplier.objects.get(supplierid=id, cid=cmp1)
        sup.delete()
        return redirect('gosupplies')
    except:
        return redirect('gosupplies')


@login_required(login_url='regcomp')
def addtimeactivity(request):
    return render(request, 'app1/timeactivity.html')


@login_required(login_url='regcomp')
def addbill(request):
    return render(request, 'app1/bill.html')


@login_required(login_url='regcomp')
def addexpense(request):
    return render(request, 'app1/addexpences.html')


@login_required(login_url='regcomp')
def addcheque(request):
    return render(request, 'app1/cheque.html')


@login_required(login_url='regcomp')
def addsuppliercredit(request):
    return render(request, 'app1/suppliercredit.html')


@login_required(login_url='regcomp')
def addadvancepayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        advancepayment1 = advancepayment.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        context = {'advancepayment': advancepayment, 'cmp1': cmp1, 'customers': customers, 'suppliers': suppliers,
                   'tod': tod}
        return render(request, 'app1/advancepayment.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def advpay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            adv = advancepayment(payee=request.POST['payee'], account=request.POST['account'],
                                 address=request.POST['address'], amount=request.POST['amount'],
                                 paymentdate=request.POST['paymentdate'], refno=request.POST['refno'],
                                 memo=request.POST['memo'], cid=cmp1)
            adv.save()
            adv = advancepayment.objects.filter(cid=cmp1).all()
            context = {'advancepayment': adv}
            return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deleteadvpay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        adv.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def advpayedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        context = {'advancepayment': adv, 'cmp1': cmp1}
        return render(request, 'app1/editadvpay.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updateadvpay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        adv = advancepayment.objects.get(advancepaymentid=id, cid=cmp1)
        adv.payee = request.POST['payee']
        adv.account = request.POST['account']
        adv.address = request.POST['address']
        adv.amount = request.POST['amount']
        adv.paymentdate = request.POST['paymentdate']
        adv.refno = request.POST['refno']
        adv.memo = request.POST['memo']
        adv.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def addpdcc(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()

        pdcc1 = paydowncreditcard.objects.filter(cid=cmp1).all()
        context = {'pcdd1': pdcc1, 'cmp1': cmp1,
                   'customers': customers, 'suppliers': suppliers}
        return render(request, 'app1/pdcc.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdcc(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if paydowncreditcard.objects.filter(
                discription=request.POST['discription']).exists() and paydowncreditcard.objects.filter(cid=cmp1.cid):
            pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
            context = {'paydowncreditcard': pdc, 'cmp1': cmp1}
            return render(request, 'app1/dashbord.html', context)
        else:

            pdc = paydowncreditcard(ccno=request.POST['ccno'], payee=request.POST['payee'],
                                    amount=request.POST['amount'],
                                    dateofpayment=request.POST['dateofpayment'],
                                    discription=request.POST['discription'],
                                    cid=cmp1)
            pdc.save()
            pdc = paydowncreditcard.objects.filter(cid=cmp1).all()
            context = {'paydowncreditcard': pdc, 'cmp1': cmp1}
            return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdccdelete(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        pdcc.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def pdccedit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        context = {'paydowncreditcard': pdcc, 'cmp1': cmp1}
        return render(request, 'app1/editpdcc.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatepdcc(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        pdcc = paydowncreditcard.objects.get(paycreditcardid=id, cid=cmp1)
        pdcc.ccno = request.POST['ccno']
        pdcc.payee = request.POST['payee']
        pdcc.amount = request.POST['amount']
        pdcc.discription = request.POST['discription']
        pdcc.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def addsalesrecipts(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'tod': tod, 'accoun': acounts}
        return render(request, 'app1/salesrecipt.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def salesrecipts(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        salee = salesrecpts(saleno='1000',
                            saledate=request.POST['saledate'],
                            salename=request.POST['salename'],
                            saleaddress=request.POST['saleaddress'],
                            saleemail=request.POST['saleemail'],
                            salepay=request.POST['salepay'],
                            salerefno=request.POST['salerefno'],
                            saledeposit=request.POST['saledeposit'],
                            salepro=request.POST['salepro'],
                            salesplace=request.POST['salesplace'],
                            salehsn=request.POST['salehsn'],
                            saledescription=request.POST['saledescription'],
                            saleqty=request.POST['saleqty'],
                            saleprice=request.POST['saleprice'],
                            saaletotal=request.POST['saaletotal'],
                            salesubtotal=request.POST['salesubtotal'],
                            tax=request.POST['tax'],
                            saletaxamount=request.POST['saletaxamount'],
                            salegrandtotal=request.POST['salegrandtotal'],
                            category2=request.POST['category2'],
                            categoryhsn2=request.POST['categoryhsn2'],
                            descrptin2=request.POST['descrptin2'],
                            catqty2=request.POST['catqty2'],
                            catprice2=request.POST['catprice2'],
                            cattotal2=request.POST['cattotal2'],
                            tax1=request.POST['tax1'],

                            category3=request.POST['category3'],
                            categoryhsn3=request.POST['categoryhsn3'],
                            descrptin3=request.POST['descrptin3'],
                            catqty3=request.POST['catqty3'],
                            catprice3=request.POST['catprice3'],
                            cattotal3=request.POST['cattotal3'],
                            tax2=request.POST['tax2'],
                            category4=request.POST['category4'],
                            categoryhsn4=request.POST['categoryhsn4'],
                            descrptin4=request.POST['descrptin4'],
                            catqty4=request.POST['catqty4'],
                            catprice4=request.POST['catprice4'],
                            cattotal4=request.POST['cattotal4'],
                            tax3=request.POST['tax3'],
                            cid=cmp1)
        salee.save()
        salee.saleno = int(salee.saleno) + salee.salesrecptsid
        salee.save()
        placosupply = request.POST['salesplace']
        salegrandtotal = float(request.POST['salegrandtotal'])
        saledeposit = request.POST['saledeposit']
        try:
            if salegrandtotal != 0:
                accoun = accounts1.objects.get(name=saledeposit, cid=cmp1)
                accoun.balance = accoun.balance + salegrandtotal
                accoun.save()
        except:
            pass
        try:
            if salegrandtotal != 0:
                accoun = accounts.objects.get(name=saledeposit, cid=cmp1)
                accoun.balance = accoun.balance + salegrandtotal
                accoun.save()
        except:
            pass
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        qty = [float(request.POST['saleqty']), float(request.POST['catqty2']),
               float(request.POST['catqty3']),
               float(request.POST['catqty4'])]
        totals = [float(request.POST['saaletotal']), float(request.POST['cattotal2']),
                  float(request.POST['cattotal3']),
                  float(request.POST['cattotal4'])]
        product = [request.POST['salepro'], request.POST['category2'], request.POST['category3'],
                   request.POST['category4']]
        for (p, q, t, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cxq = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance + tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance + tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']), float(request.POST['taxamount13']), float(request.POST['taxamount14']), float(request.POST['taxamount21']), float(request.POST['taxamount22']), float(request.POST['taxamount23']), float(request.POST['taxamount24']), float(
            request.POST['taxamount31']), float(request.POST['taxamount32']), float(request.POST['taxamount33']), float(request.POST['taxamount34']), float(request.POST['taxamount41']), float(request.POST['taxamount42']), float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bqty = [float(request.POST['qty11']), float(request.POST['qty12']), float(request.POST['qty13']), float(request.POST['qty14']), float(request.POST['qty21']), float(request.POST['qty22']), float(request.POST['qty23']), float(request.POST['qty24']), float(
            request.POST['qty31']), float(request.POST['qty32']), float(request.POST['qty33']), float(request.POST['qty34']), float(request.POST['qty41']), float(request.POST['qty42']), float(request.POST['qty43']), float(request.POST['qty44'])]
        btotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']), float(request.POST['total14']), float(request.POST['total21']), float(request.POST['total22']), float(request.POST['total23']), float(request.POST['total24']), float(
            request.POST['total31']), float(request.POST['total32']), float(request.POST['total33']), float(request.POST['total34']), float(request.POST['total41']), float(request.POST['total42']), float(request.POST['total43']), float(request.POST['total44'])]
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'], request.POST['product14'], request.POST['product21'], request.POST['product22'], request.POST['product23'], request.POST['product24'],
                    request.POST['product31'], request.POST['product32'], request.POST['product33'], request.POST['product34'], request.POST['product41'], request.POST['product42'], request.POST['product43'], request.POST['product44']]
        for (p, q, t, tx) in zip(bproduct, bqty, btotals, btaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cxq = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - cxq
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.incomeacnt, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance + cxq
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance + tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance + tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=noninvent.income, cid=cmp1)
                        accoun.balance = accoun.balance + t
                        accoun.save()
                    else:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = salesrecpts.objects.get(salesrecptsid=id, cid=cmp1)
        sl.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editsale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        custo = salesrecpts.objects.get(salesrecptsid=id)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'sale': custo, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser, 'accoun': acounts}
        return render(request, 'app1/editsale.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def showsales(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        acounts = accounts.objects.filter(cid=cmp1)
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsales.html', context)
        elif styles.template == 'modern':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesmodern.html', context)
        elif styles.template == 'fresh':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesfresh.html', context)
        elif styles.template == 'friendly':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'sale': custo, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showsalesfriendly.html', context)
        else:
            return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updatesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        salo = salesrecpts.objects.get(salesrecptsid=id, cid=cmp1)
        creqty = [salo.saleqty, salo.catqty2, salo.catqty3, salo.catqty4]
        qty = [request.POST['saleqty'], request.POST['catqty2'],
               request.POST['catqty3'], request.POST['catqty4']]
        taxes = [float(salo.tax) / 100, float(salo.tax1) / 100,
                 float(salo.tax2) / 100, float(salo.tax3) / 100]
        otaxamnt = [float(salo.saaletotal) * taxes[0], float(salo.cattotal2) * taxes[1],
                    float(salo.cattotal3) * taxes[2],
                    float(salo.cattotal4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        product = [request.POST['salepro'], request.POST['category2'], request.POST['category3'],
                   request.POST['category4']]
        otot = [float(salo.saaletotal), float(salo.cattotal2),
                float(salo.cattotal3), float(salo.cattotal4)]
        tot = [float(request.POST['saaletotal']), float(request.POST['cattotal2']), float(request.POST['cattotal3']),
               float(request.POST['cattotal4'])]
        saledeposit = request.POST['saledeposit']
        salegrandtotal = float(request.POST['salegrandtotal'])
        try:
            if accounts1.objects.get(name=saledeposit, cid=cmp1):
                acco = accounts1.objects.get(name=saledeposit, cid=cmp1)
                if saledeposit == salo.saledeposit:
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal - float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass
        try:
            if accounts.objects.get(name=saledeposit, cid=cmp1):
                acco = accounts.objects.get(name=saledeposit, cid=cmp1)
                if saledeposit == salo.saledeposit:
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal - float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=salo.saledeposit, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=salo.saledeposit, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(salo.salegrandtotal)
                            acco1.save()
                    except:
                        pass
                    if salegrandtotal > float(salo.salegrandtotal):
                        newgrand = salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif salegrandtotal < float(salo.salegrandtotal):
                        newgrand = float(salo.salegrandtotal) - salegrandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(salo.salegrandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
            else:
                pass
        except:
            pass
        placosupply = request.POST['salesplace']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) - (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) + (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        for (p, q, cq, tt, ot, tx, otx) in zip(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) - (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance + newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) + (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        elif accounts.objects.get(name=noninvent.income, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            accoun.balance = accoun.balance - newtot
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        salo.saledate = request.POST['saledate']
        salo.salename = request.POST['salename']
        salo.saleaddress = request.POST['saleaddress']
        salo.saleemail = request.POST['saleemail']
        salo.salepay = request.POST['salepay']
        salo.salerefno = request.POST['salerefno']
        salo.saledeposit = request.POST['saledeposit']
        salo.salepro = request.POST['salepro']
        salo.salesplace = request.POST['salesplace']
        salo.salehsn = request.POST['salehsn']
        salo.saleqty = request.POST['saleqty']
        salo.saleprice = request.POST['saleprice']
        salo.saaletotal = request.POST['saaletotal']
        salo.saletax = request.POST['tax']
        salo.category2 = request.POST['category2']
        salo.categoryhsn2 = request.POST['categoryhsn2']
        salo.descrptin2 = request.POST['descrptin2']
        salo.catqty2 = request.POST['catqty2']
        salo.catprice2 = request.POST['catprice2']
        salo.cattotal2 = request.POST['cattotal2']
        salo.tax1 = request.POST['tax1']
        salo.category3 = request.POST['category3']
        salo.categoryhsn3 = request.POST['categoryhsn3']
        salo.descrptin3 = request.POST['descrptin3']
        salo.catqty3 = request.POST['catqty3']
        salo.catprice3 = request.POST['catprice3']
        salo.cattotal3 = request.POST['cattotal3']
        salo.tax2 = request.POST['tax2']
        salo.category4 = request.POST['category4']
        salo.categoryhsn4 = request.POST['categoryhsn4']
        salo.descrptin4 = request.POST['descrptin4']
        salo.catqty4 = request.POST['catqty4']
        salo.catprice4 = request.POST['catprice4']
        salo.cattotal4 = request.POST['cattotal4']
        salo.tax3 = request.POST['tax3']
        salo.salesubtotal = request.POST['salesubtotal']
        salo.saletaxamount = request.POST['saletaxamount']
        salo.salegrandtotal = request.POST['salegrandtotal']
        salo.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def gotimeactivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/timeactivity.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def timectivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        timee = timeact(timdate=request.POST['timdate'],
                        timename=request.POST['timename'],
                        timecust=request.POST['timecust'],
                        timecheck=request.POST['timecheck'],
                        timebill=request.POST['timebill'],
                        timecheckk=request.POST['timecheckk'],
                        timestart=request.POST['timestart'],
                        timeend=request.POST['timeend'],
                        tyme=request.POST['tyme'],
                        timedes=request.POST['timedes'], cid=cmp1)

        timee.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletetime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = timeact.objects.get(timeactid=id, cid=cmp1)
        sl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def edittime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tym = timeact.objects.get(timeactid=id, cid=cmp1)
        tym.save()
        return render(request, 'app1/edittimeact.html', {'time': tym, 'cmp1': cmp1})
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updattime(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tymo = timeact.objects.get(timeactid=id, cid=cmp1)
        tymo.timdate = request.POST['timdate']
        tymo.timename = request.POST['timename']
        tymo.timecust = request.POST['timecust']
        tymo.timecheck = request.POST['timecheck']
        tymo.timebill = request.POST['timebill']
        tymo.timecheckk = request.POST['timecheckk']
        tymo.timestart = request.POST['timestart']
        tymo.timeend = request.POST['timeend']
        tymo.tyme = request.POST['tyme']
        tymo.timedes = request.POST['timedes']
        tymo.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def myacc(request, id):
    try:
        myact = timeact.objects.get(id=id)
        subject = 'welcome to GFG world'
        message = f'Hi {myact.firstname}, thank you for registering in geeksforgeeks.'
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [myact.email, ]
        send_mail(subject, message, email_from, recipient_list)
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gosaletimeactivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()
        context = {'cmp1': cmp1, 'customers': customers,
                   'suppliers': suppliers}
        return render(request, 'app1/salestimeactivity.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def saletimectivity(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        timsale = timeactsale(timdatesale=request.POST['timdatesale'],
                              timenamesale=request.POST['timenamesale'],
                              timecustsale=request.POST['timecustsale'],
                              timechecksale=request.POST['timechecksale'],
                              timebillsale=request.POST['timebillsale'],
                              timecheckksale=request.POST['timecheckksale'],
                              timestartsale=request.POST['timestartsale'],
                              timeendsale=request.POST['timeendsale'],
                              tymesale=request.POST['tymesale'],
                              timedessale=request.POST['timedessale'], cid=cmp1)
        timsale.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def edittimesale(request, id):
    try:
        cmp1 = company.objects.get(cid=request.session['uid'])
        tym = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        context = {'time': tym, 'cmp1': cmp1}
        return render(request, 'app1/edittimesale.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updattimesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        tymo = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        tymo.timdatesale = request.POST['timdatesale']
        tymo.timenamesale = request.POST['timenamesale']
        tymo.timecustsale = request.POST['timecustsale']
        tymo.timechecksale = request.POST['timechecksale']
        tymo.timebillsale = request.POST['timebillsale']
        tymo.timecheckksale = request.POST['timecheckksale']
        tymo.timestartsale = request.POST['timestartsale']
        tymo.timeendsale = request.POST['timeendsale']
        tymo.tymesale = request.POST['tymesale']
        tymo.timedessale = request.POST['timedessale']
        tymo.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletetimesale(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = timeactsale.objects.get(timeactsaleid=id, cid=cmp1)
        sl.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def gocheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        suppliers = supplier.objects.filter(cid=cmp1).all()

        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'customers': customers, 'suppliers': suppliers}

        return render(request, 'app1/cheque.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def cheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        chee = Cheqs(payee=request.POST['payee'],
                     bankacc=request.POST['bankacc'],
                     mailaddr=request.POST['mailaddr'],
                     paydate=request.POST['paydate'],
                     chequeno=request.POST['chequeno'],
                     category1=request.POST['category1'],
                     descrptin1=request.POST['descrptin1'],
                     catqty1=request.POST['catqty1'],
                     catprice1=request.POST['catprice1'],
                     cattotal1=request.POST['cattotal1'],

                     category2=request.POST['category2'],
                     descrptin2=request.POST['descrptin2'],
                     catqty2=request.POST['catqty2'],
                     catprice2=request.POST['catprice2'],
                     cattotal2=request.POST['cattotal2'],

                     category3=request.POST['category3'],
                     descrptin3=request.POST['descrptin3'],
                     catqty3=request.POST['catqty3'],
                     catprice3=request.POST['catprice3'],
                     cattotal3=request.POST['cattotal3'],

                     category4=request.POST['category4'],
                     descrptin4=request.POST['descrptin4'],
                     catqty4=request.POST['catqty4'],
                     catprice4=request.POST['catprice4'],
                     cattotal4=request.POST['cattotal4'],

                     product=request.POST['product'], hsn=request.POST['hsn'],
                     description=request.POST['description'],
                     qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                     product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                     description2=request.POST['description2'],
                     qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                     product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                     description3=request.POST['description3'],
                     qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                     product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                     description4=request.POST['description4'],
                     qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                     subtotal=request.POST['subtotal'],
                     tax=request.POST['tax'],
                     tax2=request.POST['tax2'], tax3=request.POST['tax3'], tax4=request.POST['tax4'],
                     taxamount=request.POST['taxamount'],
                     grandtotal=request.POST['grandtotal'], cid=cmp1)
        chee.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editcheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        tym = Cheqs.objects.get(chequeid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'che': tym, 'inv': inv, 'cmp1': cmp1,
                   'bun': bun, 'noninv': noninv, 'ser': ser}
        return render(request, 'app1/editcheque.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gogst(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        repay = recordpay.objects.filter(cid=cmp1)
        iigst = accounts1.objects.get(name='Input IGST', cid=cmp1)
        oigst = accounts1.objects.get(name='Output IGST', cid=cmp1)
        icgst = accounts1.objects.get(name='Input CGST', cid=cmp1)
        ocgst = accounts1.objects.get(name='Output CGST', cid=cmp1)
        isgst = accounts1.objects.get(name='Input SGST', cid=cmp1)
        osgst = accounts1.objects.get(name='Output SGST', cid=cmp1)
        outigst = round(oigst.balance, 2)
        cgst = round(0 - icgst.balance, 2)
        sgst = round(0 - isgst.balance, 2)
        igst = round(0 - iigst.balance, 2)
        cgstbalance = 0.0
        sgstbalance = 0.0
        igstbalance = 0.0
        try:
            if ocgst.balance != 0:
                if cgst > ocgst.balance:
                    cgst = round(cgst - ocgst.balance, 2)
                    cgstbalance = 0.0
                else:
                    cgstbalance = ocgst.balance - cgst
                    cgst = 0.0
        except:
            pass
        try:
            if osgst.balance != 0:
                if sgst > ocgst.balance:
                    sgst = round(sgst - ocgst.balance, 2)
                    sgstbalance = 0.0
                else:
                    sgstbalance = osgst.balance - sgst
                    sgst = 0.0
        except:
            pass
        try:
            if oigst.balance != 0:
                if cgst > 0.0:
                    if cgst > outigst:
                        cgst = round(cgst - outigst, 2)
                        cgst.save()
                        igstbalance = 0.0
                    elif cgst < outigst:
                        taxbal = round(outigst - cgst, 2)
                        cgst = float(0)
                        if sgst > 0.0:
                            if sgst > taxbal:
                                sgst = round(sgst - taxbal, 2)
                                igstbalance = 0.0
                            elif sgst < taxbal:
                                taxbal1 = round(taxbal - sgst, 2)
                                sgst = float(0)
                                if igst > 0:
                                    if igst > taxbal1:
                                        igst = round(igst - taxbal1, 2)
                                        igstbalance = 0.0
                                    else:
                                        igstbalance = round(taxbal1 - igst, 2)
                                        igst = float(0)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                elif sgst > 0.0:
                    if sgst > outigst:
                        sgst = round(sgst - outigst, 2)
                        igstbalance = 0.0
                    elif sgst < outigst:
                        taxbal = round(outigst - sgst, 2)
                        sgst = 0.0
                        if igst > 0:
                            if igst > taxbal:
                                igst = round(igst - taxbal, 2)
                                igstbalance = 0.0
                            else:
                                igstbalance = round(taxbal - igst, 2)
                                igst = 0.0
                elif cgst == 0.0 and sgst == 0.0:
                    if igst > outigst:
                        igst = round(igst - outigst)
                        igstbalance = 0.0
                    else:
                        igstbalance = round(outigst - igst, 2)
                        igst = 0.0
                else:
                    pass
        except:
            pass
        payable = cgstbalance + sgstbalance + igstbalance
        context = {'repay': repay, 'iigst': iigst, 'oigst': oigst, 'icgst': icgst, 'ocgst': ocgst, 'isgst': isgst,
                   'osgst': osgst, 'cgst': cgst, 'sgst': sgst, 'igst': igst, 'payable': payable}
        return render(request, 'app1/gst.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def govat(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/vat.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def goservicetax(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/servicetax.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def addtax(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/addtax.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def gotaxpaymentgst(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    return render(request, 'app1/taxpaymentgst.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def repay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        repay = recordpay(textname=request.POST['textnam'], paymentdate=request.POST['endingdate'],
                          recordamount=request.POST['amt'], recordmemo=request.POST['memo'], cid=cmp1)
        repay.save()
        return render(request, 'app1/dashboard.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def bankrecon1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        reco1 = recon1.objects.filter(cid=cmp1).all()
        reco = recon1(accounttype=request.POST['accounttype'], beginningbalance=request.POST['beginningbalance'],
                      endingbalance=request.POST['endingbalance'],
                      endingdate=request.POST['endingdate'], edat=request.POST['dat'],
                      serchar=request.POST['serchar'],
                      expacc=request.POST['expacc'],
                      idat1=request.POST['dat1'],
                      intear=request.POST['intear'],
                      incacc=request.POST['incacc'], cid=cmp1)
        reco.save()
        re1 = recon1.objects.last()

        context = {'reco1': reco1, 're1': re1, 'cmp1': cmp1}
        return render(request, 'app1/bankrecon1.html', context)
    except:
        return redirect('gobankrecon')


@login_required(login_url='regcomp')
def gobankrecon2(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/dashboard.html', {'cmp1': cmp1})
    except:
        return redirect('gobankrecon')


@login_required(login_url='regcomp')
def updatecheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        chek = Cheqs.objects.get(chequeid=id, cid=cmp1)
        chek.payee = request.POST['payee']
        chek.bankacc = request.POST['bankacc']
        chek.mailaddr = request.POST['mailaddr']
        chek.paydate = request.POST['paydate']
        chek.chequeno = request.POST['chequeno']

        chek.category1 = request.POST['category1']
        chek.descrptin1 = request.POST['descrptin1']
        chek.catqty1 = request.POST['catqty1']
        chek.catprice1 = request.POST['catprice1']
        chek.cattotal1 = request.POST['cattotal1']

        chek.category2 = request.POST['category2']
        chek.descrptin2 = request.POST['descrptin2']
        chek.catqty2 = request.POST['catqty2']
        chek.catprice2 = request.POST['catprice2']
        chek.cattotal2 = request.POST['cattotal2']

        chek.category3 = request.POST['category3']
        chek.descrptin3 = request.POST['descrptin3']
        chek.catqty3 = request.POST['catqty3']
        chek.catprice3 = request.POST['catprice3']
        chek.cattotal3 = request.POST['cattotal3']

        chek.category4 = request.POST['category4']
        chek.descrptin4 = request.POST['descrptin4']
        chek.catqty4 = request.POST['catqty4']
        chek.catprice4 = request.POST['catprice4']
        chek.cattotal4 = request.POST['cattotal4']

        chek.product = request.POST['product']
        chek.hsn = request.POST['hsn']
        chek.qty = request.POST['qty']
        chek.price = request.POST['price']
        chek.total = request.POST['total']
        chek.product2 = request.POST['product2']
        chek.hsn2 = request.POST['hsn2']
        chek.qty2 = request.POST['qty2']
        chek.price2 = request.POST['price2']
        chek.total2 = request.POST['total2']
        chek.product3 = request.POST['product3']
        chek.hsn3 = request.POST['hsn3']
        chek.qty3 = request.POST['qty3']
        chek.price3 = request.POST['price3']
        chek.total3 = request.POST['total3']
        chek.product4 = request.POST['product4']
        chek.hsn4 = request.POST['hsn4']
        chek.qty4 = request.POST['qty4']
        chek.price4 = request.POST['price4']
        chek.total4 = request.POST['total4']

        chek.subtotal = request.POST['subtotal']
        chek.tax = request.POST['tax']
        chek.tax2 = request.POST['tax2']
        chek.tax3 = request.POST['tax3']
        chek.tax4 = request.POST['tax4']
        chek.taxamount = request.POST['taxamount']
        chek.grandtotal = request.POST['grandtotal']
        chek.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletecheque(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = Cheqs.objects.get(chequeid=id, cid=cmp1)
        sl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def invindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv1 = invoice.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        # assigning key to a variable(not necessary)
        context = {'inv': inv1, 'cmp1': cmp1, 'customers': customers}
        return render(request, 'app1/addinvoics.html', context)
    except:
        return redirect('goinvoices')

@login_required(login_url='regcomp')
def invcreate2(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        inv2 = invoice(customername=request.POST['customername'], email=request.POST['email'],
                       invoiceno='1000',
                       invoicedate=request.POST['invoicedate'],
                       terms=request.POST['terms'], duedate=request.POST['duedate'], bname=request.POST['bname'],
                       placosupply=request.POST['placosupply'],

                       cid=cmp1,
                        subtotal=float(request.POST['subtotal']),
                       note = request.POST['Note'],
                       IGST = request.POST['IGST'],
                       CGST = request.POST['CGST'],
                       SGST = request.POST['SGST'],
                       TCS = request.POST['TCS'],
                       grandtotal=request.POST['grandtotal'],
                       amtrecvd=request.POST['amtrecvd'], 
                       baldue=request.POST['baldue'],


                       )
        if len(request.FILES) != 0:
            inv2.file=request.FILES['file'] 
        orderno = 'OR'+str(random.randint(1111111,9999999))
        while invoice.objects.filter(invoice_orderno=orderno ) is None:
            orderno = 'OR'+str(random.randint(1111111,9999999))
        inv2.invoice_orderno =orderno
        inv2.save()
        inv2.invoiceno = int(inv2.invoiceno) + inv2.invoiceid
        inv2.save()

        product = request.POST.getlist("product[]")
        hsn  = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        qty = request.POST.getlist("qty[]")
        price = request.POST.getlist("price[]")
        
        tax = request.POST.getlist("tax[]")
        total = request.POST.getlist("total[]")

        invoiceid=invoice.objects.get(invoiceid =inv2.invoiceid)

        if len(product)==len(hsn)==len(description)==len(qty)==len(price)==len(tax)==len(total) and product and hsn and description and qty and price and tax and total:
            mapped=zip(product,hsn,description,qty,price,tax,total)
            mapped=list(mapped)
            for ele in mapped:
                invoiceAdd,created = invoice_item.objects.get_or_create(product = ele[0],hsn=ele[1],description=ele[2],
                qty=ele[3],price=ele[4],tax=ele[5],total=ele[6],invoice=invoiceid,cid=cmp1)

                itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                if itemqty.stock != 0:
                    temp=0
                    temp = itemqty.stock 

                    temp = temp-int(ele[3])
                    itemqty.stock =temp
                    itemqty.save()



        return redirect('goinvoices')
    else:
        return redirect('goinvoices')






@login_required(login_url='regcomp')
def invcreate(request):
    if request.method=='POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        inv2 = invoice(customername=request.POST['customername'], email=request.POST['email'],
                       invoiceno='1000',
                       invoicedate=request.POST['invoicedate'],
                       terms=request.POST['terms'], duedate=request.POST['duedate'], bname=request.POST['bname'],
                       placosupply=request.POST['placosupply'],
                       product=request.POST['product'], hsn=request.POST['hsn'],
                       description=request.POST['description'],
                       qty=request.POST['qty'], price=request.POST['price'], total=float(
                           request.POST['total']),
                       tax=request.POST['tax'],
                       product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                       description2=request.POST['description2'],
                       qty2=request.POST['qty2'], price2=request.POST['price2'], total2=float(
                           request.POST['total2']),
                       tax2=request.POST['tax2'],
                       product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                       description3=request.POST['description3'],
                       qty3=request.POST['qty3'], price3=request.POST['price3'], total3=float(
                           request.POST['total3']),
                       tax3=request.POST['tax3'],
                       product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                       description4=request.POST['description4'],
                       qty4=request.POST['qty4'], price4=request.POST['price4'], total4=float(
                           request.POST['total4']),
                       subtotal=float(request.POST['subtotal']),
                       tax4=request.POST['tax4'], grandtotal=float(
                           request.POST['grandtotal']),
                       amtrecvd=request.POST['amtrecvd'], baldue=float(
                           request.POST['baldue']),
                    #    taxamount=float(request.POST['taxamount']),
                        cid=cmp1,

                       note = request.POST['Note'],
                       IGST = request.POST['IGST'],
                       CGST = request.POST['CGST'],
                       SGST = request.POST['SGST'],
                       TCS = request.POST['TCS'],


                       )
        if len(request.FILES) != 0:
            inv2.file=request.FILES['file'] 
        orderno = 'OR'+str(random.randint(1111111,9999999))
        while invoice.objects.filter(invoice_orderno=orderno ) is None:
            orderno = 'OR'+str(random.randint(1111111,9999999))
        inv2.invoice_orderno =orderno
        inv2.save()
        inv2.invoiceno = int(inv2.invoiceno) + inv2.invoiceid
        inv2.save()
        placosupply = request.POST['placosupply']
        grandtotal = float(request.POST['grandtotal'])
        accoun = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        try:
            if grandtotal != 0:
                accoun.balance = round(accoun.balance + grandtotal, 2)
                accoun.save()
        except:
            pass
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        totals = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
                  float(request.POST['total4'])]
        for (p, q, tl, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cos = float(invent.cost)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        buntaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                      float(request.POST['taxamount13']), float(
                          request.POST['taxamount14']),
                      float(request.POST['taxamount21']), float(
                          request.POST['taxamount22']),
                      float(request.POST['taxamount23']), float(
                          request.POST['taxamount24']),
                      float(request.POST['taxamount31']), float(
                          request.POST['taxamount32']),
                      float(request.POST['taxamount33']), float(
                          request.POST['taxamount34']),
                      float(request.POST['taxamount41']), float(
                          request.POST['taxamount42']),
                      float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bunproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                      request.POST['product14'], request.POST['product21'], request.POST['product22'],
                      request.POST['product23'], request.POST['product24'], request.POST['product31'],
                      request.POST['product32'], request.POST['product33'], request.POST['product34'],
                      request.POST['product41'], request.POST['product42'], request.POST['product43'],
                      request.POST['product44']]
        bunqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                  request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                  request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                  request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        buntotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                     float(request.POST['total14']), float(
                         request.POST['total21']), float(request.POST['total22']),
                     float(request.POST['total23']),
                     float(request.POST['total24']), float(
                         request.POST['total31']), float(request.POST['total32']),
                     float(request.POST['total33']),
                     float(request.POST['total34']), float(
                         request.POST['total41']), float(request.POST['total42']),
                     float(request.POST['total43']),
                     float(request.POST['total44'])]
        for (p, q, tl, tx) in zip(bunproduct, bunqty, buntotals, buntaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) - int(q)
                    invent.save()
                    cos = float(invent.cost)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance - (float(q) * cos)
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            cxq = float(invent.cost) * float(q)
                            acc.balance = acc.balance + cxq
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) - int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance + tl
                            acc.save()
                    except:
                        pass
                    try:
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            accocgst.balance = accocgst.balance + tax
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + tax
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            accoigst.balance = accoigst.balance + tx
                            accoigst.save()
                    except:
                        pass
            except:
                pass
        return redirect('goinvoices')
    else:
        return redirect('goinvoices')


@login_required(login_url='regcomp')
def viewinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/show.html', context)
        elif styles.template == 'modern':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showmodern.html', context)
        elif styles.template == 'fresh':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showfresh.html', context)
        elif styles.template == 'friendly':
            invto = invoice.objects.get(invoiceid=id, cid=cmp1)
            context = {'invoice': invto, 'cmp1': cmp1, 'styles': styles}
            return render(request, 'app1/showfriendly.html', context)
        else:
            return redirect('goinvoices')
    except:
        return redirect('goinvoices')








@login_required(login_url='regcomp')
def gobills(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.filter(cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        expence = expences.objects.filter(cid=cmp1)
        catlist = viewlist()
        toda = date.today()
        tod = toda.strftime("%d-%m-%y")
        context = {'suppliers': suppliers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'tod': tod,
                   'expence': expence, 'catlist': catlist}
        try:
            accoun = accounts.objects.filter(cid=cmp1)
            context['accoun'] = accoun
        except:
            pass
        return render(request, 'app1/bill.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def billcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bill2 = bills(payee=request.POST['payee'], paymacnt=request.POST['paymacnt'], paymdate=request.POST['paymdate'],
                      paymmethod=request.POST['paymmethod'], refno='1000', totamt=request.POST['totamt'],

                      category1=request.POST['category1'],
                      descrptin1=request.POST['descrptin1'],
                      catqty1=request.POST['catqty1'],
                      catprice1=request.POST['catprice1'],
                      cattotal1=request.POST['cattotal1'],

                      category2=request.POST['category2'],
                      descrptin2=request.POST['descrptin2'],
                      catqty2=request.POST['catqty2'],
                      catprice2=request.POST['catprice2'],
                      cattotal2=request.POST['cattotal2'],

                      category3=request.POST['category3'],
                      descrptin3=request.POST['descrptin3'],
                      catqty3=request.POST['catqty3'],
                      catprice3=request.POST['catprice3'],
                      cattotal3=request.POST['cattotal3'],

                      category4=request.POST['category4'],
                      descrptin4=request.POST['descrptin4'],
                      catqty4=request.POST['catqty4'],
                      catprice4=request.POST['catprice4'],
                      cattotal4=request.POST['cattotal4'],

                      product=request.POST['product'], hsn=request.POST['hsn'],
                      description=request.POST['description'],
                      qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                      product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                      description2=request.POST['description2'],
                      qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                      product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                      description3=request.POST['description3'],
                      qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                      product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                      description4=request.POST['description4'],
                      qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                      subtotal=request.POST['subtotal'],
                      tax=request.POST['tax'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                      tax4=request.POST['tax4'], taxamount=request.POST['taxamount'],
                      grandtotal=request.POST['grandtotal'], cid=cmp1)
        bill2.save()
        bill2.refno = int(bill2.refno) + bill2.billid
        bill2.save()
        grandtotal = float(request.POST['grandtotal'])
        acc = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc.balance = acc.balance - grandtotal
                acc.save()
            else:
                pass
        else:
            pass
        paymacnt = request.POST['paymacnt']
        try:
            if accounts1.objects.get(name=paymacnt, cid=cmp1):
                acc = accounts1.objects.get(name=paymacnt, cid=cmp1)
                acc.balance = acc.balance - grandtotal
                acc.save()
        except:
            pass
        try:
            if accounts.objects.get(name=paymacnt, cid=cmp1):
                acc = accounts.objects.get(name=paymacnt, cid=cmp1)
                acc.balance = acc.balance - grandtotal
                acc.save()
        except:
            pass
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def viewbills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bil = bills.objects.get(billid=id, cid=cmp1)
        context = {'bill': bil, 'cmp1': cmp1}
        return render(request, 'app1/viewbills.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editbills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bill3 = bills.objects.get(billid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        expence = expences.objects.filter(cid=cmp1)
        catlist = viewlist()
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'bills': bill3, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'expence': expence, 'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/editbill.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatebills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bil = bills.objects.get(billid=id, cid=cmp1)

        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(bil.grandtotal):
                newgrand = grandtotal - float(bil.grandtotal)
                accs.balance = accs.balance - newgrand
                accs.save()
            elif grandtotal < float(bil.grandtotal):
                newgrand = float(bil.grandtotal) - grandtotal
                accs.balance = accs.balance + newgrand
                accs.save()
            else:
                pass
        except:
            pass
        paymacnt = request.POST['paymacnt']
        grandtotal = float(request.POST['grandtotal'])
        try:
            if accounts1.objects.get(name=paymacnt, cid=cmp1):
                acco = accounts1.objects.get(name=paymacnt, cid=cmp1)
                if paymacnt == bil.paymacnt:
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal - float(bil.grandtotal)
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(bil.grandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass
        try:
            if accounts.objects.get(name=paymacnt, cid=cmp1):
                acco = accounts.objects.get(name=paymacnt, cid=cmp1)
                if paymacnt == bil.paymacnt:
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal - float(bil.grandtotal)
                        acco.balance = acco.balance - newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        pass
                else:
                    try:
                        if accounts.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=bil.paymacnt, cid=cmp1):
                            acco1 = accounts1.objects.get(
                                name=bil.paymacnt, cid=cmp1)
                            acco1.balance = acco1.balance - \
                                float(bil.grandtotal)
                            acco1.save()
                    except:
                        pass
                    if grandtotal > float(bil.grandtotal):
                        newgrand = grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    elif grandtotal < float(bil.grandtotal):
                        newgrand = float(bil.grandtotal) - grandtotal
                        acco.balance = acco.balance + newgrand
                        acco.save()
                    else:
                        newgrand = float(bil.grandtotal)
                        acco.balance = acco.balance + newgrand
                        acco.save()
        except:
            pass

        bil.paymacnt = request.POST['paymacnt']
        bil.paymdate = request.POST['paymdate']

        bil.paymmethod = request.POST['paymmethod']
        bil.totamt = request.POST['totamt']

        bil.category1 = request.POST['category1']
        bil.descrptin1 = request.POST['descrptin1']
        bil.catqty1 = request.POST['catqty1']
        bil.catprice1 = request.POST['catprice1']
        bil.cattotal1 = request.POST['cattotal1']

        bil.category2 = request.POST['category2']
        bil.descrptin2 = request.POST['descrptin2']
        bil.catqty2 = request.POST['catqty2']
        bil.catprice2 = request.POST['catprice2']
        bil.cattotal2 = request.POST['cattotal2']

        bil.category3 = request.POST['category3']
        bil.descrptin3 = request.POST['descrptin3']
        bil.catqty3 = request.POST['catqty3']
        bil.catprice3 = request.POST['catprice3']
        bil.cattotal3 = request.POST['cattotal3']

        bil.category4 = request.POST['category4']
        bil.descrptin4 = request.POST['descrptin4']
        bil.catqty4 = request.POST['catqty4']
        bil.catprice4 = request.POST['catprice4']
        bil.cattotal4 = request.POST['cattotal4']

        bil.product = request.POST['product']
        bil.hsn = request.POST['hsn']
        bil.description = request.POST['description']
        bil.qty = request.POST['qty']
        bil.price = request.POST['price']
        bil.total = request.POST['total']
        bil.product2 = request.POST['product2']
        bil.hsn2 = request.POST['hsn2']
        bil.description2 = request.POST['description2']
        bil.qty2 = request.POST['qty2']
        bil.price2 = request.POST['price2']
        bil.total2 = request.POST['total2']
        bil.product3 = request.POST['product3']
        bil.hsn3 = request.POST['hsn3']
        bil.description3 = request.POST['description3']
        bil.qty3 = request.POST['qty3']
        bil.price3 = request.POST['price3']
        bil.total3 = request.POST['total3']
        bil.product4 = request.POST['product4']
        bil.hsn4 = request.POST['hsn4']
        bil.description4 = request.POST['description4']
        bil.qty4 = request.POST['qty4']
        bil.price4 = request.POST['price4']
        bil.total4 = request.POST['total4']

        bil.subtotal = request.POST['subtotal']
        bil.tax = request.POST['tax']
        bil.tax2 = request.POST['tax2']
        bil.tax3 = request.POST['tax3']
        bil.tax4 = request.POST['tax4']
        bil.taxamount = request.POST['taxamount']
        bil.grandtotal = request.POST['grandtotal']
        bil.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletebills(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bill = bills.objects.get(billid=id, cid=cmp1)
        bill.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def gopay(request):
    return render(request, 'app1/payslip.html')


@login_required(login_url='regcomp')
def goacc(request):
    try:
        adg = addac.objects.filter(cid=cmp1)
        context = {'addac': adg}
        return render(request, 'app1/accsig.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def myac(request):
    try:
        if request.method == "POST":
            accn = addac(acname=request.POST['acname'], email=request.POST['email'], usertype=request.POST['usertype'],
                         dateadded=datetime.now(), username=request.POST['username'], password=request.POST['password'])
            accn.save()

            username = request.POST.get('username')
            password = request.POST.get('password')
            subject = 'Finsys'
            message = f' Username: {accn.username}, thanks for registering'
            message2 = f' Password: {accn.password}, thanks for registering'

            email_from = settings.EMAIL_HOST_USER
            recipient_list = [accn.email, ]

            send_mail(subject, message, email_from, recipient_list)
            send_mail(subject, message2, email_from, recipient_list)

            return render(
                request,
                'app1/dashbord.html',
                {
                    'title': 'send an email'
                }
            )
        else:
            return render(
                request,
                'app1/dashbord.html',
                {
                    'title': 'send an email'
                }
            )
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def editmyac(request, id):
    try:
        accn1 = addac.objects.get(id=id)
        context = {'addac': accn1}
        return render(request, 'app1/editaccsig.html', context)
    except:
        return redirect('gogodash')


@login_required(login_url='regcomp')
def updatemyac(request, id):
    try:
        acn = addac.objects.get(id=id)
        acn.acname = request.POST['acname']
        acn.email = request.POST['email']
        acn.usertype = request.POST['usertype']
        acn.dateadded = request.POST['dateadded']
        acn.username = request.POST['username']
        acn.password = request.POST['password']
        acn.save()
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def deletemyac(request, id):
    try:
        acn1 = addac.objects.get(id=id)
        acn1.delete()
        return render(request, 'app1/dashbord.html')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gosupcredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        suppliers = supplier.objects.all()
        supcredit = suplrcredit.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        catlist = viewlist()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        context = {'suppliers': suppliers, 'supcredit': supcredit, 'inv': inv, 'cmp1': cmp1, 'bun': bun,
                   'noninv': noninv, 'tod': tod,
                   'ser': ser, 'catlist': catlist}

        return render(request, 'app1/suppliercredit.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def suplcreditcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        p = request.POST['product']
        p2 = request.POST['product2']
        p3 = request.POST['product3']
        p4 = request.POST['product4']
        qty = [float(request.POST['qty']), float(request.POST['qty2']), float(request.POST['qty3']),
               float(request.POST['qty4'])]
        grandtotal = float(request.POST['grandtotal'])
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                acc.balance = round(acc.balance - grandtotal, 2)
                acc.save()
            else:
                pass
        else:
            pass
        tot = float(request.POST['total'])
        tot2 = float(request.POST['total2'])
        tot3 = float(request.POST['total3'])
        tot4 = float(request.POST['total4'])
        taxamnt1 = float(request.POST['taxamount1'])
        taxamnt2 = float(request.POST['taxamount2'])
        taxamnt3 = float(request.POST['taxamount3'])
        taxamnt4 = float(request.POST['taxamount4'])
        accou = accounts1.objects.get(name='Inventory Asset', cid=cmp1)
        payee = request.POST['supplier'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        try:
            if inventory.objects.get(name=p, cid=cmp1):
                inv1 = inventory.objects.get(name=p, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[0])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[0])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p2, cid=cmp1):
                inv1 = inventory.objects.get(name=p2, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[1])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[1])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p3, cid=cmp1):
                inv1 = inventory.objects.get(name=p3, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[2])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[2])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass
        try:
            if inventory.objects.get(name=p4, cid=cmp1):
                inv1 = inventory.objects.get(name=p4, cid=cmp1)
                cxq = float(inv1.cost) * float(qty[3])
                if accounts1.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts1.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                elif accounts.objects.get(name=inv1.invacnt, cid=cmp1):
                    accou = accounts.objects.get(name=inv1.invacnt, cid=cmp1)
                    accou.balance = accou.balance - cxq
                    accou.save()
                else:
                    pass
                inv1.initialqty = int(inv1.initialqty) - int(qty[3])
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["invcol"] = "red"
        except:
            pass

        try:
            if noninventory.objects.get(name=p, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[0])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p2, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p2, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[1])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot2
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot2
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p3, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p3, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[2])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot3
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot3
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass
        try:
            if noninventory.objects.get(name=p4, cid=cmp1):
                noninv1 = noninventory.objects.get(name=p4, cid=cmp1)
                noninv1.qty = int(noninv1.qty) - int(qty[3])
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot4
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance - tot4
                        acc.save()
                except:
                    pass
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["noninvcol"] = "red"
        except:
            pass

        try:
            if bundle.objects.get(name=p, cid=cmp1):
                bun1 = bundle.objects.get(name=p, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[0])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt1
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p2, cid=cmp1):
                bun1 = bundle.objects.get(name=p2, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[1])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt2 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt2
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p3, cid=cmp1):
                bun1 = bundle.objects.get(name=p3, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[2])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt3 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt3
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        try:
            if bundle.objects.get(name=p4, cid=cmp1):
                bun1 = bundle.objects.get(name=p4, cid=cmp1)
                bun1.qty = int(bun1.qty) - int(qty[3])
                bun1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt4 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = accocgst.balance + tax
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = accosgst.balance + tax
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = accoigst.balance + taxamnt4
                    accoigst.save()
                request.session["buncol"] = "red"
        except:
            pass
        sucr = suplrcredit(supplier=request.POST['supplier'], mailaddr=request.POST['mailaddr'],
                           paymdate=request.POST['paymdate'], refno='1000',
                           ccatego=request.POST['ccatego'], cdescrip=request.POST['cdescrip'],
                           cqty=request.POST['cqty'],
                           cprice=request.POST['cprice'],
                           ctotal=request.POST['ctotal'], ccatego2=request.POST['ccatego2'],
                           cdescrip2=request.POST['cdescrip2'], cqty2=request.POST['cqty2'],
                           cprice2=request.POST['cprice2'],
                           ctotal2=request.POST['ctotal2'], ccatego3=request.POST['ccatego3'],
                           cdescrip3=request.POST['cdescrip3'], cqty3=request.POST['cqty3'],
                           cprice3=request.POST['cprice3'],
                           ctotal3=request.POST['ctotal3'], ccatego4=request.POST['ccatego4'],
                           cdescrip4=request.POST['cdescrip4'], cqty4=request.POST['cqty4'],
                           cprice4=request.POST['cprice4'],
                           ctotal4=request.POST['ctotal4'],
                           product=request.POST['product'], hsn=request.POST['hsn'],
                           description=request.POST['description'],
                           qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                           product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                           description2=request.POST['description2'],
                           qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                           product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                           description3=request.POST['description3'],
                           qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                           product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                           description4=request.POST['description4'],
                           qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],
                           subtotal=request.POST['subtotal'], tax=request.POST['tax'], tax2=request.POST['tax2'],
                           tax3=request.POST['tax3'], tax4=request.POST['tax4'],
                           taxamount=request.POST['taxamount'], grandtotal=request.POST['grandtotal'],
                           creditamount=request.POST['creditamount'], cid=cmp1)
        sucr.save()
        sucr.refno = int(sucr.refno) + sucr.suppliercreditid
        sucr.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editsuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        supr = suplrcredit.objects.get(suppliercreditid=id)
        suppliers = supplier.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        catlist = viewlist()
        context = {'suplrcredit': supr, 'suppliers': suppliers, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'catlist': catlist}
        return render(request, 'app1/editsuppliercredit.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updatesuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        suprr = suplrcredit.objects.get(suppliercreditid=id, cid=cmp1)
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        creqty = [suprr.qty, suprr.qty2, suprr.qty3, suprr.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        otot = [float(suprr.total), float(suprr.total2),
                float(suprr.total3), float(suprr.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        taxes = [float(suprr.tax) / 100, float(suprr.tax2) / 100,
                 float(suprr.tax3) / 100, float(suprr.tax4) / 100]
        otaxamnt = [float(suprr.total) * taxes[0], float(suprr.total2) * taxes[1],
                    float(suprr.total3) * taxes[2],
                    float(suprr.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        grandtotal = float(request.POST['grandtotal'])
        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(suprr.grandtotal):
                newgrand = grandtotal - float(suprr.grandtotal)
                accs.balance = accs.balance - newgrand
                accs.save()
            elif grandtotal < float(suprr.grandtotal):
                newgrand = float(suprr.grandtotal) - grandtotal
                accs.balance = accs.balance + newgrand
                accs.save()
            else:
                pass
        except:
            pass
        payee = suprr.supplier.split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname)
                    placosupply = cust.state
            except:
                pass

        try:
            if inventory.objects.get(name=product[0], cid=cmp1):
                invent = inventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[0]) - int(creqty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[0]) - float(creqty[0]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[0]) - int(qty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[0]) - float(qty[0]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[0], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[0]) - int(creqty[0]))
                    noninvent.save()
                    newtot = tot[0] - otot[0]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[0]) - int(qty[0]))
                    noninvent.save()
                    newtot = otot[0] - tot[0]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[0], cid=cmp1):
                bundl = bundle.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    bundl.qty = int(bundl.qty) + (int(qty[0]) - int(creqty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    bundl.qty = int(bundl.qty) - (int(creqty[0]) - int(qty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[1], cid=cmp1):
                invent = inventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[1]) - int(creqty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[1]) - float(creqty[1]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[1]) - int(qty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[1]) - float(qty[1]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[1], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[1]) - int(creqty[1]))
                    noninvent.save()
                    newtot = tot[1] - otot[1]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[1]) - int(qty[1]))
                    noninvent.save()
                    newtot = otot[1] - tot[1]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[1], cid=cmp1):
                bundl = bundle.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    bundl.qty = int(bundl.qty) + (int(qty[1]) - int(creqty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    bundl.qty = int(bundl.qty) - (int(creqty[1]) - int(qty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[2], cid=cmp1):
                invent = inventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[2]) - int(creqty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[2]) - float(creqty[2]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[2]) - int(qty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[2]) - float(qty[2]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[2], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[2]) - int(creqty[2]))
                    noninvent.save()
                    newtot = tot[2] - otot[2]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[2]) - int(qty[2]))
                    noninvent.save()
                    newtot = otot[2] - tot[2]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[2], cid=cmp1):
                bundl = bundle.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    bundl.qty = int(bundl.qty) + (int(qty[2]) - int(creqty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    bundl.qty = int(bundl.qty) - (int(creqty[2]) - int(qty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[3], cid=cmp1):
                invent = inventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(qty[3]) - int(creqty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[3]) - float(creqty[3]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance - cxq
                        accnt.save()
                    else:
                        pass
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(creqty[3]) - int(qty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[3]) - float(qty[3]))
                    if accounts1.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts1.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    elif accounts.objects.get(name=invent.invacnt, cid=cmp1):
                        accnt = accounts.objects.get(
                            name=invent.invacnt, cid=cmp1)
                        accnt.balance = accnt.balance + cxq
                        accnt.save()
                    else:
                        pass
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[3], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(qty[3]) - int(creqty[3]))
                    noninvent.save()
                    newtot = tot[3] - otot[3]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance - newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[3]) - int(qty[3]))
                    noninvent.save()
                    newtot = otot[3] - tot[3]
                    try:
                        if accounts.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.expenseaccount, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.expenseaccount, cid=cmp1)
                            acc.balance = acc.balance + newtot
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[3], cid=cmp1):
                bundl = bundle.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    bundl.qty = int(bundl.qty) + (int(qty[3]) - int(creqty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    bundl.qty = int(bundl.qty) - (int(creqty[3]) - int(qty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()

                else:
                    pass
        except:
            pass
        suprr.mailaddr = request.POST['mailaddr']
        suprr.paymdate = request.POST['paymdate']
        suprr.ccatego = request.POST['ccatego']
        suprr.cdescrip = request.POST['cdescrip']
        suprr.cqty = request.POST['cqty']
        suprr.cprice = request.POST['cprice']
        suprr.ctotal = request.POST['ctotal']
        suprr.ccatego2 = request.POST['ccatego2']
        suprr.cdescrip2 = request.POST['cdescrip2']
        suprr.cqty2 = request.POST['cqty2']
        suprr.cprice2 = request.POST['cprice2']
        suprr.ctotal2 = request.POST['ctotal2']
        suprr.ccatego3 = request.POST['ccatego3']
        suprr.cdescrip3 = request.POST['cdescrip3']
        suprr.cqty3 = request.POST['cqty3']
        suprr.cprice3 = request.POST['cprice3']
        suprr.ctotal3 = request.POST['ctotal3']
        suprr.ccatego4 = request.POST['ccatego4']
        suprr.cdescrip4 = request.POST['cdescrip4']
        suprr.cqty4 = request.POST['cqty4']
        suprr.cprice4 = request.POST['cprice4']
        suprr.ctotal4 = request.POST['ctotal4']
        suprr.product = request.POST['product']
        suprr.hsn = request.POST['hsn']
        suprr.qty = request.POST['qty']
        suprr.price = request.POST['price']
        suprr.total = request.POST['total']
        suprr.product2 = request.POST['product2']
        suprr.hsn2 = request.POST['hsn2']
        suprr.qty2 = request.POST['qty2']
        suprr.price2 = request.POST['price2']
        suprr.total2 = request.POST['total2']
        suprr.product3 = request.POST['product3']
        suprr.hsn3 = request.POST['hsn3']
        suprr.qty3 = request.POST['qty3']
        suprr.price3 = request.POST['price3']
        suprr.total3 = request.POST['total3']
        suprr.product4 = request.POST['product4']
        suprr.hsn4 = request.POST['hsn4']
        suprr.qty4 = request.POST['qty4']
        suprr.price4 = request.POST['price4']
        suprr.total4 = request.POST['total4']
        suprr.subtotal = request.POST['subtotal']
        suprr.tax = request.POST['tax']
        suprr.tax2 = request.POST['tax2']
        suprr.tax3 = request.POST['tax3']
        suprr.tax4 = request.POST['tax4']
        suprr.taxamount = request.POST['taxamount']
        suprr.grandtotal = request.POST['grandtotal']
        suprr.creditamount = request.POST['creditamount']
        suprr.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deletesuplcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        supl = suplrcredit.objects.get(suppliercreditid=id, cid=cmp1)
        supl.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def creditindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y")
        todae = toda.strftime("%Y-%m-%d")
        preyear = int(tod) - 1
        crd1 = credit.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        invoi = invoice.objects.filter(cid=cmp1).all()
        context = {'crd': crd1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod, 'preyear': preyear, 'invoi': invoi, 'todae': todae}
        return render(request, 'app1/credit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def creditcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        grndtot = float(request.POST['grndtot'])
        accon = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grndtot != 0:
            accon.balance = accon.balance - grndtot
            accon.save()
        else:
            pass
        placosupply = request.POST['place']
        qty = [request.POST['qty'], request.POST['qty1'],
               request.POST['qty2'], request.POST['qty3']]
        totals = [float(request.POST['total']), float(request.POST['total1']), float(request.POST['total2']),
                  float(request.POST['total3'])]
        taxo = [float(request.POST['tax']) / 100, float(request.POST['tax1']) / 100,
                float(request.POST['tax2']) / 100,
                float(request.POST['tax3']) / 100]
        taxamnt = [totals[0] * taxo[0], totals[1] * taxo[1],
                   totals[2] * taxo[2], totals[3] * taxo[3]]
        product = [request.POST['product'], request.POST['product1'], request.POST['product2'],
                   request.POST['product3']]
        for (p, q, t, tx) in zip(product, qty, totals, taxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) + int(q)
                    invent.save()
                    newcost = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) + int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
        buntaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                      float(request.POST['taxamount13']), float(
                          request.POST['taxamount14']),
                      float(request.POST['taxamount21']), float(
                          request.POST['taxamount22']),
                      float(request.POST['taxamount23']), float(
                          request.POST['taxamount24']),
                      float(request.POST['taxamount31']), float(
                          request.POST['taxamount32']),
                      float(request.POST['taxamount33']), float(
                          request.POST['taxamount34']),
                      float(request.POST['taxamount41']), float(
                          request.POST['taxamount42']),
                      float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        bunproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                      request.POST['product14'], request.POST['product21'], request.POST['product22'],
                      request.POST['product23'], request.POST['product24'], request.POST['product31'],
                      request.POST['product32'], request.POST['product33'], request.POST['product34'],
                      request.POST['product41'], request.POST['product42'], request.POST['product43'],
                      request.POST['product44']]
        bunqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                  request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                  request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                  request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        buntotals = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                     float(request.POST['total14']), float(
                         request.POST['total21']), float(request.POST['total22']),
                     float(request.POST['total23']),
                     float(request.POST['total24']), float(
                         request.POST['total31']), float(request.POST['total32']),
                     float(request.POST['total33']),
                     float(request.POST['total34']), float(
                         request.POST['total41']), float(request.POST['total42']),
                     float(request.POST['total43']),
                     float(request.POST['total44'])]
        for (p, q, t, tx) in zip(bunproduct, bunqty, buntotals, buntaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    invent.initialqty = int(invent.initialqty) + int(q)
                    invent.save()
                    newcost = float(invent.cost) * float(q)
                    invenacnt = invent.invacnt
                    if accounts1.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    elif accounts.objects.get(name=invenacnt, cid=cmp1):
                        accoun = accounts.objects.get(name=invenacnt, cid=cmp1)
                        accoun.balance = accoun.balance + newcost
                        accoun.save()
                    else:
                        pass
                    try:
                        if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=invent.incomeacnt, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts1.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                        accoun = accounts.objects.get(
                            name=invent.expacnt, cid=cmp1)
                        accoun.balance = accoun.balance - newcost
                        accoun.save()
                    else:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    noninvent.qty = int(noninvent.qty) + int(q)
                    noninvent.save()
                    try:
                        if accounts.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    try:
                        if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                            acc = accounts1.objects.get(
                                name=noninvent.income, cid=cmp1)
                            acc.balance = acc.balance - t
                            acc.save()
                    except:
                        pass
                    if placosupply == cmp1.state:
                        tax = tx / 2
                        accocgst = accounts1.objects.get(
                            name='Output CGST', cid=cmp1)
                        accocgst.balance = accocgst.balance - tax
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Output SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - tax
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Output IGST', cid=cmp1)
                        accoigst.balance = accoigst.balance - tx
                        accoigst.save()
            except:
                pass
        crd2 = credit(customer=request.POST['customer'], mail=request.POST['mail'], biladdr=request.POST['biladdr'],
                      creditdate=request.POST['creditdate'], place=request.POST['place'],
                      creditno='1000',
                      invnum=request.POST['invnum'], invperiod=request.POST['invperiod'], subtot=request.POST['subtot'],
                      tax=request.POST['tax'], taxamnt=request.POST['taxamnt'], grndtot=request.POST['grndtot'],
                      product=request.POST['product'], descrip=request.POST['descrip'], qty=request.POST['qty'],
                      price=request.POST['price'], total=request.POST['total'], product1=request.POST['product1'],
                      descrip1=request.POST['descrip1'], qty1=request.POST['qty1'], price1=request.POST['price1'],
                      total1=request.POST['total1'], tax1=request.POST['tax1'], product2=request.POST['product2'],
                      descrip2=request.POST['descrip2'],
                      qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                      tax2=request.POST['tax2'],
                      product3=request.POST['product3'], descrip3=request.POST['descrip3'], qty3=request.POST['qty3'],
                      price3=request.POST['price3'], total3=request.POST['total3'], tax3=request.POST['tax3'], cid=cmp1)
        crd2.save()
        crd2.creditno = int(crd2.creditno) + crd2.creditnoteid
        crd2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def paymentindex(request):
    try:
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        acounts = accounts.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers,
                   'tod': tod, 'accoun': acounts}
        return render(request, 'app1/payment.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def paymentcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        pay2 = payment(customer=request.POST['customer'], email=request.POST['email'],
                       findinvoice=request.POST['findinvoice'], paymdate=request.POST['paymdate'],
                       pmethod=request.POST['pmethod'], refno='1000', depto=request.POST['depto'],
                       amtreceived=request.POST['amtreceived'],
                       descrip=request.POST['descrip'], duedate=request.POST['duedate'], orgamt=request.POST['orgamt'],
                       openbal=request.POST['openbal'], payment=request.POST['payment'],
                       amtapply=request.POST['amtapply'],
                       amtcredit=request.POST['amtcredit'], descrip1=request.POST['descrip1'],
                       duedate1=request.POST['duedate1'], orgamt1=request.POST['orgamt1'],
                       openbal1=request.POST['openbal1'], payment1=request.POST['payment1'],
                       descrip2=request.POST['descrip2'],
                       duedate2=request.POST['duedate2'], orgamt2=request.POST['orgamt2'],
                       openbal2=request.POST['openbal2'],
                       payment2=request.POST['payment2'], descrip3=request.POST['descrip3'],
                       duedate3=request.POST['duedate3'],
                       orgamt3=request.POST['orgamt3'], openbal3=request.POST['openbal3'],
                       payment3=request.POST['payment3'], descrip4=request.POST['descrip4'],
                       duedate4=request.POST['duedate4'],
                       orgamt4=request.POST['orgamt4'], openbal4=request.POST['openbal4'],
                       payment4=request.POST['payment4'], descrip5=request.POST['descrip5'],
                       duedate5=request.POST['duedate5'],
                       orgamt5=request.POST['orgamt5'], openbal5=request.POST['openbal5'],
                       payment5=request.POST['payment5'], descrip6=request.POST['descrip6'],
                       duedate6=request.POST['duedate6'],
                       orgamt6=request.POST['orgamt6'], openbal6=request.POST['openbal6'],
                       payment6=request.POST['payment6'], descrip7=request.POST['descrip7'],
                       duedate7=request.POST['duedate7'],
                       orgamt7=request.POST['orgamt7'], openbal7=request.POST['openbal7'],
                       payment7=request.POST['payment7'], descrip8=request.POST['descrip8'],
                       duedate8=request.POST['duedate8'],
                       orgamt8=request.POST['orgamt8'], openbal8=request.POST['openbal8'],
                       payment8=request.POST['payment8'], descrip9=request.POST['descrip9'],
                       duedate9=request.POST['duedate9'],
                       orgamt9=request.POST['orgamt9'], openbal9=request.POST['openbal9'],
                       payment9=request.POST['payment9'], cid=cmp1)
        pay2.save()
        pay2.refno = int(pay2.refno) + pay2.paymentid
        pay2.save()
        amtreceived = float(request.POST['amtreceived'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        accont.balance = accont.balance - amtreceived
        accont.save()
        deposito = request.POST['depto']
        try:
            if accounts1.objects.get(name=deposito, cid=cmp1):
                print(deposito)
                acconut = accounts1.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        try:
            if accounts.objects.get(name=deposito, cid=cmp1):
                acconut = accounts.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        description = [request.POST['descrip'].split()[0], request.POST['descrip1'].split()[0],
                       request.POST['descrip2'].split(
        )[0], request.POST['descrip3'].split()[0],
            request.POST['descrip4'].split(
        )[0], request.POST['descrip5'].split()[0],
            request.POST['descrip6'].split(
        )[0], request.POST['descrip7'].split()[0],
            request.POST['descrip8'].split()[0], request.POST['descrip9'].split()[0]]
        payments = [request.POST['payment'], request.POST['payment1'], request.POST['payment2'],
                    request.POST['payment3'],
                    request.POST['payment4'], request.POST['payment5'], request.POST['payment6'],
                    request.POST['payment7'],
                    request.POST['payment8'], request.POST['payment9']]
        openbalance = [request.POST['openbal'], request.POST['openbal1'], request.POST['openbal2'],
                       request.POST['openbal3'], request.POST['openbal4'], request.POST['openbal5'],
                       request.POST['openbal6'], request.POST['openbal7'], request.POST['openbal8'],
                       request.POST['openbal9']]
        try:
            if invoice.objects.get(invoiceno=description[0], cid=cmp1) and description[0] != 'undefined':
                print(deposito)
                invo = invoice.objects.get(invoiceno=description[0], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[0])
                invo.baldue = float(openbalance[0]) - float(payments[0])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[1], cid=cmp1) and description[1] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[1], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[1])
                invo.baldue = float(openbalance[1]) - float(payments[1])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[2], cid=cmp1) and description[2] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[2], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[2])
                invo.baldue = float(openbalance[2]) - float(payments[2])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[3], cid=cmp1) and description[3] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[3], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[3])
                invo.baldue = float(openbalance[3]) - float(payments[3])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[4], cid=cmp1) and description[4] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[4], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[4])
                invo.baldue = float(openbalance[4]) - float(payments[4])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[5], cid=cmp1) and description[5] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[5], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[5])
                invo.baldue = float(openbalance[5]) - float(payments[5])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[6], cid=cmp1) and description[6] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[6], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[6])
                invo.baldue = float(openbalance[6]) - float(payments[6])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[7], cid=cmp1) and description[7] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[7], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[7])
                invo.baldue = float(openbalance[7]) - float(payments[7])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[8], cid=cmp1) and description[8] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[8], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[8])
                invo.baldue = float(openbalance[8]) - float(payments[8])
                invo.save()
        except:
            pass
        try:
            if invoice.objects.get(invoiceno=description[9]) and description[9] != 'undefined':
                invo = invoice.objects.get(invoiceno=description[9], cid=cmp1)
                invo.amtrecvd = int(invo.amtrecvd) + int(payments[9])
                invo.baldue = float(openbalance[9]) - float(payments[9])
                invo.save()
        except:
            pass
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletepayment(request, id):
    try:
        pay = payment.objects.get(paymentid=id)
        pay.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletecredit(request, id):
    try:
        crd = credit.objects.get(creditnoteid=id)
        crd.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def editcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        credi = credit.objects.get(creditnoteid=id)
        invo = invoice.objects.get(invoiceno=credi.invnum, cid=cmp1)
        context = {'credit': credi, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser, 'invo': invo}
        return render(request, 'app1/editcredit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def showcredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        credi = credit.objects.get(creditnoteid=id)
        acounts = accounts.objects.filter(cid=cmp1)
        styles = customize.objects.get(selected='selected', cid=cmp1)
        if styles.template == 'classic':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcredit.html', context)
        elif styles.template == 'modern':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditmodern.html', context)
        elif styles.template == 'fresh':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditfresh.html', context)
        elif styles.template == 'friendly':
            custo = salesrecpts.objects.get(salesrecptsid=id)
            context = {'credit': credi, 'cmp1': cmp1, 'accoun': acounts, 'styles': styles}
            return render(request, 'app1/showcreditfriendly.html', context)
        else:
            return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def updatecredit(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        credi = credit.objects.get(creditnoteid=id, cid=cmp1)
        product = [request.POST['product'], request.POST['product1'], request.POST['product2'],
                   request.POST['product3']]
        creqty = [credi.qty, credi.qty1, credi.qty2, credi.qty3]
        qty = [request.POST['qty'], request.POST['qty1'],
               request.POST['qty2'], request.POST['qty3']]
        taxes = [float(credi.tax) / 100, float(credi.tax1) / 100,
                 float(credi.tax2) / 100, float(credi.tax3) / 100]
        otaxamnt = [float(credi.total) * taxes[0], float(credi.total1) * taxes[1], float(credi.total2) * taxes[2],
                    float(credi.total3) * taxes[3]]
        taxamnt = [float(request.POST['taxamount']), float(request.POST['taxamount1']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        otot = [float(credi.total), float(credi.total1),
                float(credi.total2), float(credi.total3)]
        tot = [float(request.POST['total']), float(request.POST['total1']), float(request.POST['total2']),
               float(request.POST['total3'])]
        placosupply = request.POST['place']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
                else:
                    pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) + \
                            (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) - \
                            (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        for (p, q, cq, tt, ot, tx, otx) in zip(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        invenacnt = invent.invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invent.expacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invent.expacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
                else:
                    pass
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        noninvent.qty = int(noninvent.qty) + \
                            (int(q) - int(cq))
                        noninvent.save()
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        noninvent.qty = int(noninvent.qty) - \
                            (int(cq) - int(q))
                        noninvent.save()
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            print(ta, type(ta))
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass

        grndtot = float(request.POST['grndtot'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grndtot > credi.grndtot:
            accont.balance = accont.balance - (grndtot - credi.grndtot)
            accont.save()
        elif grndtot < credi.grndtot:
            accont.balance = accont.balance + (credi.grndtot - grndtot)
            accont.save()
        else:
            pass

        credi.customer = request.POST['customer']
        credi.mail = request.POST['mail']
        credi.biladdr = request.POST['biladdr']
        credi.creditdate = request.POST['creditdate']
        credi.place = request.POST['place']
        credi.invnum = request.POST['invnum']
        credi.invperiod = request.POST['invperiod']
        credi.product = request.POST['product']
        credi.descrip = request.POST['descrip']
        credi.qty = request.POST['qty']
        credi.price = request.POST['price']
        credi.tax = request.POST['tax']
        credi.subtot = request.POST['subtot']
        credi.total = request.POST['total']
        credi.grndtot = request.POST['grndtot']
        credi.taxamnt = request.POST['taxamnt']
        credi.product1 = request.POST['product1']
        credi.descrip1 = request.POST['descrip1']
        credi.qty1 = request.POST['qty1']
        credi.price1 = request.POST['price1']
        credi.tax1 = request.POST['tax1']
        credi.total1 = request.POST['total1']
        credi.product2 = request.POST['product2']
        credi.descrip2 = request.POST['descrip2']
        credi.qty2 = request.POST['qty2']
        credi.price2 = request.POST['price2']
        credi.total2 = request.POST['total2']
        credi.tax2 = request.POST['tax2']
        credi.product3 = request.POST['product3']
        credi.descrip3 = request.POST['descrip3']
        credi.qty3 = request.POST['qty3']
        credi.price3 = request.POST['price3']
        credi.total3 = request.POST['total3']
        credi.tax3 = request.POST['tax3']
        credi.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def expencesindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        customers = customer.objects.all()
        suppliers = supplier.objects.all()
        exp1 = expences.objects.all()
        inv = inventory.objects.all()
        bun = bundle.objects.all()
        noninv = noninventory.objects.all()
        ser = service.objects.all()
        acounts = accounts.objects.filter(cid=cmp1)
        catlist = viewlist()
        context = {'exp': exp1, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'customers': customers,
                   'suppliers': suppliers, 'tod': tod, 'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def expencescreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        p = request.POST['product']
        qty = request.POST['qty']
        tot = float(request.POST['total'])
        p2 = request.POST['product2']
        qty2 = request.POST['qty2']
        tot2 = float(request.POST['total2'])
        p3 = request.POST['product3']
        qty3 = request.POST['qty3']
        tot3 = float(request.POST['total3'])
        p4 = request.POST['product4']
        qty4 = request.POST['qty4']
        tot4 = float(request.POST['total4'])
        taxamnt1 = float(request.POST['taxamount1'])
        taxamnt2 = float(request.POST['taxamount2'])
        taxamnt3 = float(request.POST['taxamount3'])
        taxamnt4 = float(request.POST['taxamount4'])
        payee = request.POST['payee'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = cust.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
            try:
                if customer.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    cust = customer.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = cust.state
            except:
                pass
        for i in inv:
            if str(i.name) == str(p):
                qy = int(i.initialqty)
                qy += int(qty)
                invname = p
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                if placosupply == cmp1.state:
                    tax = taxamnt1 / 2
                    accocgst = accounts1.objects.get(
                        name='Input CGST', cid=cmp1)
                    accocgst.balance = round(float(accocgst.balance - tax), 2)
                    accocgst.save()
                    accosgst = accounts1.objects.get(
                        name='Input SGST', cid=cmp1)
                    accosgst.balance = round(float(accosgst.balance - tax), 2)
                    accosgst.save()
                else:
                    accoigst = accounts1.objects.get(
                        name='Input IGST', cid=cmp1)
                    accoigst.balance = round(
                        float(accoigst.balance - taxamnt1), 2)
                    accoigst.save()
                request.session["invcol"] = "green"
            if str(i.name) == str(p2):
                qy = int(i.initialqty)
                qy += int(qty2)
                invname = p2
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"
            if str(i.name) == str(p3):
                qy = int(i.initialqty)
                qy += int(qty3)
                invname = p3
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"
            if str(i.name) == str(p4):
                qy = int(i.initialqty)
                qy += int(qty4)
                invname = p4
                inv1 = inventory.objects.get(name=invname, cid=cmp1)
                inv1.initialqty = str(qy)
                inv1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["invcol"] = "green"

        for n in noninv:
            if str(n.name) == str(p):
                qy = int(n.qty)
                qy += int(qty)
                noninvname = p
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt1 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt1), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p2):
                qy = int(n.qty)
                qy += int(qty2)
                noninvname = p2
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot2
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot2
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p3):
                qy = int(n.qty)
                qy += int(qty3)
                noninvname = p3
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot3
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot3
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"
            if str(n.name) == str(p4):
                qy = int(n.qty)
                qy += int(qty4)
                noninvname = p4
                noninv1 = noninventory.objects.get(name=noninvname, cid=cmp1)
                noninv1.qty = str(qy)
                noninv1.save()
                try:
                    if accounts.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot4
                        acc.save()
                except:
                    pass
                try:
                    if accounts1.objects.get(name=noninv1.expenseaccount, cid=cmp1):
                        acc = accounts1.objects.get(
                            name=noninv1.expenseaccount, cid=cmp1)
                        acc.balance = acc.balance + tot4
                        acc.save()
                except:
                    pass
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["noninvcol"] = "green"

        for b in bun:
            if str(b.name) == str(p):
                qy = int(b.qty)
                qy += int(qty)
                bunname = p
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt1 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt1), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p2):
                qy = int(b.qty)
                qy += int(qty2)
                bunname = p2
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt2 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt2), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p3):
                qy = int(b.qty)
                qy += int(qty3)
                bunname = p3
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt3 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt3), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
            if str(b.name) == str(p4):
                qy = int(b.qty)
                qy += int(qty4)
                bunname = p4
                bun1 = bundle.objects.get(name=bunname, cid=cmp1)
                bun1.qty = str(qy)
                bun1.save()
                try:
                    if placosupply == cmp1.state:
                        tax = taxamnt4 / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        accocgst.balance = round(
                            float(accocgst.balance - tax), 2)
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = round(
                            float(accosgst.balance - tax), 2)
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        accoigst.balance = round(
                            float(accoigst.balance - taxamnt4), 2)
                        accoigst.save()
                except:
                    pass
                request.session["buncol"] = "green"
        exp2 = expences(payee=request.POST['payee'],
                        paymdate=request.POST['paymdate'],
                        paymmethod=request.POST['paymmethod'], refno='1000',
                        totamt=request.POST['totamt'],

                        category1=request.POST['category1'],
                        descrptin1=request.POST['descrptin1'],
                        catqty1=request.POST['catqty1'],
                        catprice1=request.POST['catprice1'],
                        cattotal1=request.POST['cattotal1'],

                        category2=request.POST['category2'],
                        descrptin2=request.POST['descrptin2'],
                        catqty2=request.POST['catqty2'],
                        catprice2=request.POST['catprice2'],
                        cattotal2=request.POST['cattotal2'],

                        category3=request.POST['category3'],
                        descrptin3=request.POST['descrptin3'],
                        catqty3=request.POST['catqty3'],
                        catprice3=request.POST['catprice3'],
                        cattotal3=request.POST['cattotal3'],

                        category4=request.POST['category4'],
                        descrptin4=request.POST['descrptin4'],
                        catqty4=request.POST['catqty4'],
                        catprice4=request.POST['catprice4'],
                        cattotal4=request.POST['cattotal4'],

                        product=request.POST['product'], hsn=request.POST['hsn'],
                        description=request.POST['description'],
                        qty=request.POST['qty'], price=request.POST['price'], total=request.POST['total'],
                        product2=request.POST['product2'], hsn2=request.POST['hsn2'],
                        description2=request.POST['description2'],
                        qty2=request.POST['qty2'], price2=request.POST['price2'], total2=request.POST['total2'],
                        product3=request.POST['product3'], hsn3=request.POST['hsn3'],
                        description3=request.POST['description3'],
                        qty3=request.POST['qty3'], price3=request.POST['price3'], total3=request.POST['total3'],
                        product4=request.POST['product4'], hsn4=request.POST['hsn4'],
                        description4=request.POST['description4'],
                        qty4=request.POST['qty4'], price4=request.POST['price4'], total4=request.POST['total4'],

                        subtotal=request.POST['subtotal'],
                        tax=request.POST['tax'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                        tax4=request.POST['tax4'], taxamount=request.POST['taxamount'],
                        grandtotal=request.POST['grandtotal'], cid=cmp1)
        exp2.save()
        exp2.refno = int(exp2.refno) + exp2.expencesid
        exp2.save()
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        qty = [float(request.POST['qty']), float(request.POST['qty2']), float(request.POST['qty3']),
               float(request.POST['qty4'])]
        grandtotal = float(request.POST['grandtotal'])
        if grandtotal != 0:
            if accounts1.objects.get(name='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                acc.balance = round(acc.balance + grandtotal, 2)
                acc.save()
            else:
                pass
        else:
            pass
        if inventory.objects.filter(name=product[0], cid=cmp1):
            inven = inventory.objects.get(name=product[0], cid=cmp1)
            cxq = float(inven.cost) * qty[0]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[1], cid=cmp1):
            inven = inventory.objects.get(name=product[1], cid=cmp1)
            cxq = float(inven.cost) * qty[1]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[2], cid=cmp1):
            inven = inventory.objects.get(name=product[2], cid=cmp1)
            cxq = float(inven.cost) * qty[2]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        if inventory.objects.filter(name=product[3], cid=cmp1):
            inven = inventory.objects.get(name=product[3], cid=cmp1)
            cxq = float(inven.cost) * qty[3]
            acc1 = accounts1.objects.get(name=inven.invacnt, cid=cmp1)
            acc1.balance = round(acc1.balance + cxq, 2)
            acc1.save()
        else:
            pass
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def deleteexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        exp = expences.objects.get(expencesid=id, cid=cmp1)
        exp.delete()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def editexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        exps = expences.objects.get(expencesid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        catlist = viewlist()
        context = {'expences': exps, 'inv': inv, 'cmp1': cmp1, 'bun': bun, 'noninv': noninv, 'ser': ser,
                   'catlist': catlist, 'accoun': acounts}
        return render(request, 'app1/editexpences.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def updateexpences(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        exps = expences.objects.get(expencesid=id, cid=cmp1)
        grandtotal = float(request.POST['grandtotal'])
        payee = request.POST['payee'].split()
        firstname = payee[0]
        lastname = payee[1]
        if len(payee) == 3:
            lastname = payee[1] + " " + payee[2]
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=firstname, lastname=lastname, cid=cmp1):
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                    placosupply = supp.state
            except:
                pass
        accs = accounts1.objects.get(
            name='Accounts Payable(Creditors)', cid=cmp1)
        try:
            if grandtotal > float(exps.grandtotal):
                newgrand = grandtotal - float(exps.grandtotal)
                accs.balance = round(accs.balance + newgrand, 2)
                accs.save()
            elif grandtotal < float(exps.grandtotal):
                newgrand = float(exps.grandtotal) - grandtotal
                accs.balance = round(accs.balance - newgrand, 2)
                accs.save()
            else:
                pass
        except:
            pass
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        creqty = [exps.qty, exps.qty2, exps.qty3, exps.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        taxes = [float(exps.tax) / 100, float(exps.tax2) / 100,
                 float(exps.tax3) / 100, float(exps.tax4) / 100]
        otaxamnt = [float(exps.total) * taxes[0], float(exps.total2) * taxes[1],
                    float(exps.total3) * taxes[2],
                    float(exps.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount3']),
                   float(request.POST['taxamount4'])]
        otot = [float(exps.total), float(exps.total2),
                float(exps.total3), float(exps.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        try:
            if inventory.objects.get(name=product[0], cid=cmp1):
                invent = inventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[0]) - int(creqty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[0]) - float(creqty[0]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[0]) - int(qty[0]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[0]) - float(qty[0]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[0], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[0]) - int(creqty[0]))
                    noninvent.save()
                    newtot = tot[0] - otot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[0]) - int(qty[0]))
                    noninvent.save()
                    newtot = otot[0] - tot[0]
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[0], cid=cmp1):
                bundl = bundle.objects.get(name=product[0], cid=cmp1)
                if int(qty[0]) > int(creqty[0]):
                    bundl.qty = int(bundl.qty) + (int(qty[0]) - int(creqty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[0] - otaxamnt[0]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[0]) < int(creqty[0]):
                    bundl.qty = int(bundl.qty) - (int(creqty[0]) - int(qty[0]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[0] / 2
                        otax = otaxamnt[0] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[0] - taxamnt[0]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass

        try:
            if inventory.objects.get(name=product[1], cid=cmp1):
                invent = inventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[1]) - int(creqty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[1]) - float(creqty[1]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[1]) - int(qty[1]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[1]) - float(qty[1]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[1], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[1]) - int(creqty[1]))
                    noninvent.save()
                    newtot = tot[1] - otot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[1]) - int(qty[1]))
                    noninvent.save()
                    newtot = otot[1] - tot[1]
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[1], cid=cmp1):
                bundl = bundle.objects.get(name=product[1], cid=cmp1)
                if int(qty[1]) > int(creqty[1]):
                    bundl.qty = int(bundl.qty) + (int(qty[1]) - int(creqty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[1] - otaxamnt[1]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[1]) < int(creqty[1]):
                    bundl.qty = int(bundl.qty) - (int(creqty[1]) - int(qty[1]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[1] / 2
                        otax = otaxamnt[1] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[1] - taxamnt[1]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[2], cid=cmp1):
                invent = inventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[2]) - int(creqty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[2]) - float(creqty[2]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[2]) - int(qty[2]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[2]) - float(qty[2]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[2], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[2]) - int(creqty[2]))
                    noninvent.save()
                    newtot = tot[2] - otot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[2]) - int(qty[2]))
                    noninvent.save()
                    newtot = otot[2] - tot[2]
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[2], cid=cmp1):
                bundl = bundle.objects.get(name=product[2], cid=cmp1)
                if int(qty[2]) > int(creqty[2]):
                    bundl.qty = int(bundl.qty) + (int(qty[2]) - int(creqty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[2] - otaxamnt[2]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[2]) < int(creqty[2]):
                    bundl.qty = int(bundl.qty) - (int(creqty[2]) - int(qty[2]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[2] / 2
                        otax = otaxamnt[2] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[2] - taxamnt[2]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if inventory.objects.get(name=product[3], cid=cmp1):
                invent = inventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) + (int(qty[3]) - int(creqty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(qty[3]) - float(creqty[3]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance + cxq
                    accnt.save()
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    invent.initialqty = int(
                        invent.initialqty) - (int(creqty[3]) - int(qty[3]))
                    invent.save()
                    cxq = float(invent.cost) * \
                        (float(creqty[3]) - float(qty[3]))
                    accnt = accounts1.objects.get(
                        name=invent.invacnt, cid=cmp1)
                    accnt.balance = accnt.balance - cxq
                    accnt.save()
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
        except:
            pass
        try:
            if noninventory.objects.get(name=product[3], cid=cmp1):
                noninvent = noninventory.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) + \
                        (int(qty[3]) - int(creqty[3]))
                    noninvent.save()
                    newtot = tot[3] - otot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    noninvent.qty = int(noninvent.qty) - \
                        (int(creqty[3]) - int(qty[3]))
                    noninvent.save()
                    newtot = otot[3] - tot[3]
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        try:
            if bundle.objects.get(name=product[3], cid=cmp1):
                bundl = bundle.objects.get(name=product[3], cid=cmp1)
                if int(qty[3]) > int(creqty[3]):
                    bundl.qty = int(bundl.qty) + (int(qty[3]) - int(creqty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = tax - otax
                        accocgst.balance = accocgst.balance - ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance - ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = taxamnt[3] - otaxamnt[3]
                        accoigst.balance = accoigst.balance - ta
                        accoigst.save()
                elif int(qty[3]) < int(creqty[3]):
                    bundl.qty = int(bundl.qty) - (int(creqty[3]) - int(qty[3]))
                    bundl.save()
                    if placosupply == cmp1.state:
                        tax = taxamnt[3] / 2
                        otax = otaxamnt[3] / 2
                        accocgst = accounts1.objects.get(
                            name='Input CGST', cid=cmp1)
                        ta = otax - tax
                        accocgst.balance = accocgst.balance + ta
                        accocgst.save()
                        accosgst = accounts1.objects.get(
                            name='Input SGST', cid=cmp1)
                        accosgst.balance = accosgst.balance + ta
                        accosgst.save()
                    else:
                        accoigst = accounts1.objects.get(
                            name='Input IGST', cid=cmp1)
                        ta = otaxamnt[3] - taxamnt[3]
                        accoigst.balance = accoigst.balance + ta
                        accoigst.save()
                else:
                    pass
        except:
            pass
        exps.payee = request.POST['payee']
        exps.paymdate = request.POST['paymdate']
        exps.paymmethod = request.POST['paymmethod']
        exps.totamt = request.POST['totamt']

        exps.category1 = request.POST['category1']
        exps.descrptin1 = request.POST['descrptin1']
        exps.catqty1 = request.POST['catqty1']
        exps.catprice1 = request.POST['catprice1']
        exps.cattotal1 = request.POST['cattotal1']

        exps.category2 = request.POST['category2']
        exps.descrptin2 = request.POST['descrptin2']
        exps.catqty2 = request.POST['catqty2']
        exps.catprice2 = request.POST['catprice2']
        exps.cattotal2 = request.POST['cattotal2']

        exps.category3 = request.POST['category3']
        exps.descrptin3 = request.POST['descrptin3']
        exps.catqty3 = request.POST['catqty3']
        exps.catprice3 = request.POST['catprice3']
        exps.cattotal3 = request.POST['cattotal3']

        exps.category4 = request.POST['category4']
        exps.descrptin4 = request.POST['descrptin4']
        exps.catqty4 = request.POST['catqty4']
        exps.catprice4 = request.POST['catprice4']
        exps.cattotal4 = request.POST['cattotal4']

        exps.product = request.POST['product']
        exps.hsn = request.POST['hsn']
        exps.qty = request.POST['qty']
        exps.price = request.POST['price']
        exps.total = request.POST['total']
        exps.product2 = request.POST['product2']
        exps.hsn2 = request.POST['hsn2']
        exps.qty2 = request.POST['qty2']
        exps.price2 = request.POST['price2']
        exps.total2 = request.POST['total2']
        exps.product3 = request.POST['product3']
        exps.hsn3 = request.POST['hsn3']
        exps.qty3 = request.POST['qty3']
        exps.price3 = request.POST['price3']
        exps.total3 = request.POST['total3']
        exps.product4 = request.POST['product4']
        exps.hsn4 = request.POST['hsn4']
        exps.qty4 = request.POST['qty4']
        exps.price4 = request.POST['price4']
        exps.total4 = request.POST['total4']
        exps.subtotal = request.POST['subtotal']
        exps.tax = request.POST['tax']
        exps.tax2 = request.POST['tax2']
        exps.tax3 = request.POST['tax3']
        exps.tax4 = request.POST['tax4']
        exps.taxamount = request.POST['taxamount']
        exps.grandtotal = request.POST['grandtotal']
        exps.save()
        return redirect('goexpences')
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def estindex(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        customers = customer.objects.filter(cid=cmp1).all()
        est1 = estimate.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'est': est1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod}
        return render(request, 'app1/estimate.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def estcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        est2 = estimate(customer=request.POST['customer'], email=request.POST['email'], billingaddress=request.POST['billingaddress'], estimatedate=request.POST['estimatedate'], expirationdate=request.POST['expirationdate'], placeofsupply=request.POST['placeofsupply'],
                        estimateno='1000', product=request.POST['product'], description=request.POST['description'],
                        hsn=request.POST['hsn'],
                        qty=request.POST['qty'], rate=request.POST['rate'], tax=request.POST['tax'],
                        total=request.POST['total'], taxamount=request.POST['taxamount'],
                        subtotal=request.POST['sub_total'], estimatetotal=request.POST['estimatetotal'], product1=request.POST[
                            'product1'], hsn1=request.POST['hsn1'], qty1=request.POST['qty1'],
                        description1=request.POST['description1'], rate1=request.POST[
                            'rate1'], total1=request.POST['total1'], tax1=request.POST['tax1'],
                        product2=request.POST['product2'], hsn2=request.POST['hsn2'], qty2=request.POST['qty2'],
                        description2=request.POST['description2'], rate2=request.POST[
                            'rate2'], total2=request.POST['total2'], tax2=request.POST['tax2'],
                        product3=request.POST['product3'], hsn3=request.POST['hsn3'], qty3=request.POST['qty3'],
                        description3=request.POST['description3'], rate3=request.POST[
                            'rate3'], total3=request.POST['total3'], tax3=request.POST['tax3'],
                        cid=cmp1)
        est2.save()
        est2.estimateno = int(est2.estimateno) + est2.estimateid
        est2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delayed(request):
    try:
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        delayed1 = delayedcharge.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'delayed': delayed1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,
                   'ser': ser, 'tod': tod}  # assigning key to a variable(not necessary)
        return render(request, 'app1/delayedcharge.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        delayed2 = delayedcharge(customer=request.POST['customer'], delayedchargedate=request.POST['delayedchargedate'], delayedchargeno='1000', prodorser=request.POST['prodorser'], description=request.POST['description'], qty=request.POST['qty'], rate=request.POST['rate'], tax=request.POST['tax'],
                                 taxamount=request.POST['taxamount'],
                                 total=request.POST['total'], tax1=request.POST['tax1'],
                                 subtotal=request.POST['subtotal'],
                                 grandtotal=request.POST['grandtotal'], prodorser1=request.POST['prodorser1'],
                                 description1=request.POST['description1'], qty1=request.POST['qty1'], rate1=request.POST['rate1'], total1=request.POST[
                                     'total1'], prodorser2=request.POST['prodorser2'], description2=request.POST['description2'], qty2=request.POST['qty2'], rate2=request.POST['rate2'],
                                 total2=request.POST['total2'], tax2=request.POST['tax2'], prodorser3=request.POST[
                                     'prodorser3'], description3=request.POST['description3'], qty3=request.POST['qty3'], rate3=request.POST['rate3'],
                                 total3=request.POST['total3'], tax3=request.POST['tax3'],
                                 cid=cmp1)
        delayed2.save()
        delayed2.delayedchargeno = int(
            delayed2.delayedchargeno) + delayed2.delayedchargeid
        delayed2.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')




@login_required(login_url='regcomp')
def editdelayed(request, id):
    try:
        cmp1 = company.objects.get(cid=request.session['uid'])
        edit = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        context = {'delayedcharge': edit, 'cmp1': cmp1,
                   'inv': inv, 'noninv': noninv, 'bun': bun, 'ser': ser}
        return render(request, 'app1/delayedit.html', context)
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def delayedupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        dela = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        dela.customer = request.POST['customer']
        dela.delayedchargedate = request.POST['delayedchargedate']
        dela.prodorser = request.POST['prodorser']
        dela.description = request.POST['description']
        dela.qty = request.POST['qty']
        dela.rate = request.POST['rate']
        dela.total = request.POST['total']
        dela.tax = request.POST['tax']
        dela.taxamount = request.POST['taxamount']
        dela.prodorser1 = request.POST['prodorser1']
        dela.description1 = request.POST['description1']
        dela.qty1 = request.POST['qty1']
        dela.rate1 = request.POST['rate1']
        dela.total1 = request.POST['total1']
        dela.tax1 = request.POST['tax1']
        dela.prodorser2 = request.POST['prodorser2']
        dela.description2 = request.POST['description2']
        dela.qty2 = request.POST['qty2']
        dela.rate2 = request.POST['rate2']
        dela.total2 = request.POST['total2']
        dela.tax2 = request.POST['tax2']
        dela.prodorser3 = request.POST['prodorser3']
        dela.description3 = request.POST['description3']
        dela.qty3 = request.POST['qty3']
        dela.rate3 = request.POST['rate3']
        dela.total3 = request.POST['total3']
        dela.tax3 = request.POST['tax3']
        dela.save()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def deletedelay(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        dela = delayedcharge.objects.get(delayedchargeid=id, cid=cmp1)
        dela.delete()
        return redirect('gosalesrecords')
    except:
        return redirect('gosalesrecords')


@login_required(login_url='regcomp')
def addpandse(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            expenseaccount = request.POST.get('expenseaccount')
            income = request.POST.get('income')
            if expenseaccount == None:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income=request.POST.get('income'),
                              tax=request.POST.get('tax'),
                              abatement=request.POST.get('abatement'),
                              sertype=request.POST.get('sertype'),
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount="NULL",
                              purchasetax="NULL",
                              revcharge="NULL",
                              presupplier="NULL",
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
            elif income == None:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income="NULL",
                              tax="NULL",
                              abatement="NULL",
                              sertype="NULL",
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount=request.POST.get(
                                  'expenseaccount'),
                              purchasetax=request.POST.get('purchasetax'),
                              revcharge=request.POST.get('revcharge'),
                              presupplier=request.POST.get('presupplier'),
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
            else:
                ser = service(name=request.POST.get('name'),
                              sku=request.POST.get('sku'),
                              sac=request.POST.get('sac'),
                              unit=request.POST.get('unit'),
                              categ=request.POST.get('categ'),
                              descr=request.POST.get('descr'),
                              saleprice=request.POST.get('saleprice'),
                              income=request.POST.get('income'),
                              tax=request.POST.get('tax'),
                              abatement=request.POST.get('abatement'),
                              sertype=request.POST.get('sertype'),
                              purchasedescr=request.POST.get('purchasedescr'),
                              cost=request.POST.get('cost'),
                              expenseaccount=request.POST.get(
                                  'expenseaccount'),
                              purchasetax=request.POST.get('purchasetax'),
                              revcharge=request.POST.get('revcharge'),
                              presupplier=request.POST.get('presupplier'),
                              cid=cmp1)
                img = request.FILES["img"]
                ser.img = img
                ser.save()
                return redirect('/app1/gopands')
    except:
        return redirect('gopands')


def viewlist():
    serlist = ['Advertising/Promotional',
               'Bank charges',
               'Business Licenses and Permits',
               'Charitable Contributions',
               'Computer and Internet Expense',
               'Continuing Education',
               'Depreciation Expense',
               'Dues and Subscriptions',
               'Housekeeping Charges',
               'Insurance Expense',
               'Insurance Expense-General Liability Insurance',
               'Insurance Expense-Health Insurance',
               'Insurance Expense-Life and Disability Insurance',
               'Insurance Expense-Professional Liability',
               'Interest Expense',
               'Meals and entertainment',
               'Office Supplies',
               'Postage and Delivery',
               'Printing and Reproduction',
               'Professional Fees',
               'Purchases',
               'Rent Expense',
               'Repair and maintenance',
               'Small Tools and Equipment',
               'Swachh Bharat Cess Expense',
               'Taxes - Property',
               'Telephone Expense',
               'Travel Expense',
               'Uncategorised Expense',
               'Utilities',
               'Cash and cash equivalents',
               'Accounts Receivable (Debtors)',
               'Deferred CGST',
               'Deferred GST Input Credit',
               'Deferred IGST',
               'Deferred Krishi Kalyan Cess Input Credit',
               'Deferred Service Tax Input Credit',
               'Deferred SGST',
               'Deferred VAT Input Credit',
               'GST Refund',
               'Inventory Asset',
               'Krishi Kalyan Cess Refund',
               'Prepaid Insurance',
               'Service Tax Refund',
               'TDS Receivable',
               'Uncategorised Asset',
               'Undeposited Funds',
               'Accumulated Depreciation',
               'Buildings and Improvements',
               'Furniture and Equipment',
               'Land',
               'Leasehold Improvements',
               'Vehicles',
               'CGST Payable',
               'CST Payable',
               'CST Suspense',
               'GST Payable',
               'GST Suspense',
               'IGST Payable',
               'Input CGST',
               'Input CGST Tax RCM',
               'Input IGST',
               'Input IGST Tax RCM',
               'Input Krishi Kalyan Cess',
               'Input Krishi Kalyan Cess RCM',
               'Input Service Tax',
               'Input Service Tax RCM',
               'Input SGST',
               'Input SGST Tax RCM',
               'Input VAT 14%',
               'Input VAT 4%',
               'Input VAT 5%',
               'Krishi Kalyan Cess Payable',
               'Krishi Kalyan Cess Suspense',
               'Output CGST',
               'Output CGST Tax RCM',
               'Output CST 2%',
               'Output IGST',
               'Output IGST Tax RCM',
               'Output Krishi Kalyan Cess',
               'Output Krishi Kalyan Cess RCM',
               'Output Service Tax',
               'Output Service Tax RCM',
               'Output SGST',
               'Output SGST Tax RCM',
               'Output VAT 14%',
               'Output VAT 4%',
               'Output VAT 5%',
               'Service Tax Payable',
               'Service Tax Suspense',
               'SGST Payable',
               'Swachh Bharat Cess Payable',
               'Swachh Bharat Cess Suspense',
               'TDS Payable',
               'VAT Payable',
               'VAT Suspense',
               'Opening Balance Equity',
               'Retained Earnings',
               'Billable Expense Income',
               'Consulting Income',
               'Product Sales',
               'Sales',
               'Sales - Hardware',
               'Sales - Software',
               'Sales - Support and Maintenance',
               'Sales Discounts',
               'Sales of Product Income',
               'Uncategorised Income',
               'Cost of sales',
               'Equipment Rental for Jobs',
               'Freight and Shipping Costs',
               'Merchant Account Fees',
               'Purchases - Hardware for Resale',
               'Purchases - Software for Resale'
               'Subcontracted Services',
               'Tools and Craft Supplies',
               'Finance Charge Income',
               'Insurance Proceeds Received',
               'Interest Income',
               'Proceeds from Sale of Assets',
               'Shipping and Delivery Income',
               'Ask My Accountant',
               'CGST write-off',
               'GST write-off',
               'IGST write-off',
               'Miscellaneous Expense',
               'Political Contributions',
               'SGST write-off',
               'Tax write-of',
               'Vehicle Expenses']

    ser = service.objects.all()
    for s in ser:
        serlist.append(str(s.name))
    return serlist


@login_required(login_url='regcomp')
def editser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        se = service.objects.get(serviceid=id, cid=cmp1)
        context = {'ser': se, 'cmp1': cmp1}
        return render(request, 'app1/editserv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def updateser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        ser = service.objects.get(serviceid=id, cid=cmp1)
        ser.name = request.POST['name']
        ser.sku = request.POST['sku']
        ser.sac = request.POST['sac']
        ser.unit = request.POST['unit']
        ser.categ = request.POST['categ']
        ser.descr = request.POST['descr']
        ser.saleprice = request.POST['saleprice']
        ser.income = request.POST['income']
        ser.tax = request.POST['tax']
        ser.abatement = request.POST['abatement']
        ser.sertype = request.POST['sertype']
        ser.purchasedescr = request.POST['purchasedescr']
        ser.cost = request.POST['cost']
        ser.expenseaccount = request.POST['expenseaccount']
        ser.purchasetax = request.POST['purchasetax']
        ser.revcharge = request.POST['revcharge']
        ser.presupplier = request.POST['presupplier']
        ser.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deleteser(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        sl = service.objects.get(serviceid=id, cid=cmp1)
        sl.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addnoninv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            expenseaccount = request.POST.get('expenseaccount')
            tax = request.POST.get('tax')
            purchasetax = request.POST.get('purchasetax')
            if expenseaccount == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount="NULL",
                                      purchasetax="NULL",
                                      revcharge="NULL",
                                      presupplier="NULL",
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            elif purchasetax == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax="NULL",
                                      revcharge="NULL",
                                      presupplier="NULL",
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            elif tax == None:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax="NULL",
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax=request.POST.get(
                                          'purchasetax'),
                                      revcharge=request.POST.get('revcharge'),
                                      presupplier=request.POST.get(
                                          'presupplier'),
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
            else:
                noninv = noninventory(name=request.POST.get('name'),
                                      sku=request.POST.get('sku'),
                                      hsn=request.POST.get('hsn'),
                                      unit=request.POST.get('unit'),
                                      category=request.POST.get('category'),
                                      descr=request.POST.get('descr'),
                                      saleprice=request.POST.get('saleprice'),
                                      income=request.POST.get('income'),
                                      tax=request.POST.get('tax'),
                                      purchasedescr=request.POST.get(
                                          'purchasedescr'),
                                      qty=0,
                                      cost=request.POST.get('cost'),
                                      expenseaccount=request.POST.get(
                                          'expenseaccount'),
                                      purchasetax=request.POST.get(
                                          'purchasetax'),
                                      revcharge=request.POST.get('revcharge'),
                                      presupplier=request.POST.get(
                                          'presupplier'),
                                      cid=cmp1)
                img = request.FILES["image"]
                noninv.image = img
                noninv.save()
                return redirect('/app1/gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def nonivndisplay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'GET':
            noninv = noninventory.objects.filter(cid=cmp1).all()
            return render((request, 'pands.html', {'noninventory': noninv, 'cmp1': cmp1}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deletenoninv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        noninv.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editnoninv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        context = {'noninventory': noninv, 'cmp1': cmp1}
        return render(request, 'app1/editnoninv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def noninvupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        noninv = noninventory.objects.get(noninventoryid=id, cid=cmp1)
        noninv.name = request.POST['name']
        noninv.sku = request.POST['sku']
        noninv.hsn = request.POST['hsn']
        noninv.unit = request.POST['unit']
        noninv.category = request.POST['category']
        noninv.descr = request.POST['descr']
        noninv.saleprice = request.POST['saleprice']
        noninv.income = request.POST['income']
        noninv.tax = request.POST['tax']
        noninv.purchasedescr = request.POST['purchasedescr']
        noninv.cost = request.POST['cost']
        noninv.expenseaccount = request.POST['expenseaccount']
        noninv.purchasetax = request.POST['purchasetax']
        noninv.revcharge = request.POST['revcharge']
        noninv.presupplier = request.POST['presupplier']

        noninv.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addbun(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            bun = bundle(name=request.POST['name'],
                         sku=request.POST['sku'], description=request.POST['description'],
                         product1=request.POST['product1'], product2=request.POST['product2'],
                         product3=request.POST['product3'], product4=request.POST['product4'],
                         hsn1=request.POST['hsn1'], hsn2=request.POST['hsn2'], hsn3=request.POST['hsn3'],
                         hsn4=request.POST['hsn4'], description1=request.POST['description1'],
                         description2=request.POST['description2'], description3=request.POST['description3'],
                         description4=request.POST['description4'],
                         qty1=request.POST['qty1'], qty2=request.POST['qty2'], qty3=request.POST['qty3'],
                         qty4=request.POST['qty4'], total1=request.POST['total1'], total2=request.POST['total2'],
                         total3=request.POST['total3'], total4=request.POST['total4'], price1=request.POST['price1'],
                         price2=request.POST['price2'], price3=request.POST['price3'], price4=request.POST['price4'],
                         tax1=request.POST['tax1'], tax2=request.POST['tax2'], tax3=request.POST['tax3'],
                         tax4=request.POST['tax4'], grandtotal=request.POST['grandtotal'], cid=cmp1)
            img = request.FILES["image"]
            bun.image = img
            bun.save()
            return redirect('gopands')
        else:
            return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def display(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'GET':
            tels = bundle.objects.filter(cid=cmp1).all()
            return render((request, 'pands.html',
                           {'bundle': tels}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editbun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        bundles = bundle.objects.get(bundleid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        context = {'bundle': bundles, 'inv': inv,
                   'noninv': noninv, 'cmp1': cmp1}
        return render(request, 'app1/editbun.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def updatebun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bundl = bundle.objects.get(bundleid=id, cid=cmp1)
        bundl.name = request.POST['name']
        bundl.sku = request.POST['sku']
        bundl.description = request.POST['description']
        bundl.product1 = request.POST['product1']
        bundl.product2 = request.POST['product2']
        bundl.product3 = request.POST['product3']
        bundl.product4 = request.POST['product4']
        bundl.qty1 = request.POST['qty1']
        bundl.qty2 = request.POST['qty2']
        bundl.qty3 = request.POST['qty3']
        bundl.qty4 = request.POST['qty4']
        bundl.price1 = request.POST['price1']
        bundl.price2 = request.POST['price2']
        bundl.price3 = request.POST['price3']
        bundl.price4 = request.POST['price4']
        bundl.total1 = request.POST['total1']
        bundl.total2 = request.POST['total2']
        bundl.total3 = request.POST['total3']
        bundl.total4 = request.POST['total4']
        bundl.tax1 = request.POST['tax1']
        bundl.tax2 = request.POST['tax2']
        bundl.tax3 = request.POST['tax3']
        bundl.tax4 = request.POST['tax4']
        bundl.grandtotal = request.POST['grandtotal']
        bundl.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deletebun(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bun = bundle.objects.get(bundleid=id, cid=cmp1)
        bun.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def addinv(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            initialqty = float(request.POST['initialqty'])
            cost = float(request.POST['cost'])
            totalcost = float(initialqty * cost)
            inv = inventory(name=request.POST['name'],
                            sku=request.POST['sku'], hsn=request.POST['hsn'],
                            unit=request.POST['unit'], category=request.POST['category'],
                            initialqty=request.POST['initialqty'], date=request.POST['date'],
                            stockalrt=request.POST['stockalrt'],
                            invacnt=request.POST['invacnt'], description=request.POST['description'],
                            salesprice=request.POST['salesprice'], incomeacnt=request.POST['incomeacnt'],
                            tax=request.POST['tax'],
                            purchaseinfo=request.POST['purchaseinfo'], cost=request.POST['cost'],
                            expacnt=request.POST['expacnt'],
                            purtax=request.POST['purtax'], revcharge=request.POST['revcharge'],
                            presupplier=request.POST['presupplier'], cxq=totalcost,
                            cid=cmp1)
            img = request.FILES["image"]
            inv.image = img
            inv.save()
            
            invacnt = request.POST['invacnt']
            account = accounts1.objects.get(name=invacnt, cid=cmp1)
            account1 = accounts1.objects.get(
                name='Opening Balance Equity', cid=cmp1)
            try:
                if cost != 0:
                    accbal = float(account.balance)
                    bala = accbal + totalcost
                    account.balance = round(bala, 2)
                    account.save()
                    account1.balance = round(account1.balance + totalcost, 2)
                    account1.save()
            except:
                pass
            messages.info(request, 'Product added successfully!')
            return render(request,'pands.html',{'msg_success':msg_success})
        else:
            return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def ivndisplay(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'GET':
            print('hellow')
            inv = inventory.objects.filter(cid=cmp1).all()
            print(inv)
            for x in inv:
                print('hello')
                print(x.profile_pic)
            return render((request, 'pands.html', {'inventory': inv}))
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def deleteinv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id, cid=cmp1)
        inv.delete()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def editinv(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id)
        context = {'inventory': inv, 'cmp1': cmp1}
        return render(request, 'app1/editinv.html', context)
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def invupdate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inv = inventory.objects.get(inventoryid=id, cid=cmp1)
        inv.name = request.POST['name']
        inv.sku = request.POST['sku']
        inv.hsn = request.POST['hsn']
        inv.unit = request.POST['unit']
        inv.category = request.POST['category']
        inv.date = request.POST['date']
        inv.stockalrt = request.POST['stockalrt']
        inv.invacnt = request.POST['invacnt']
        inv.description = request.POST['description']
        inv.salesprice = request.POST['salesprice']
        inv.incomeacnt = request.POST['incomeacnt']
        # inv.tax = request.POST['tax']
        inv.purchaseinfo = request.POST['purchaseinfo']
        inv.cost = request.POST['cost']
        inv.expacnt = request.POST['expacnt']
        inv.purtax = request.POST['purtax']
        inv.revcharge = request.POST['revcharge']
        inv.presupplier = request.POST['presupplier']
        inv.save()
        return redirect('gopands')
    except:
        return redirect('gopands')


@login_required(login_url='regcomp')
def gorecon(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        accountyp = accountype.objects.filter(cid=cmp1).all()
        return render(request, 'app1/recon.html', {'cmp1': cmp1, 'accountype': accountyp})
    except:
        return redirect('something')


@login_required(login_url='regcomp')
def reconcreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        account = request.POST.get('account')
        begbal = request.POST.get('begbal')
        endbal = request.POST.get('endbal')
        enddate = request.POST.get('enddate')
        dat = request.POST.get('dat')
        serchar = request.POST.get('serchar')
        expacc = request.POST.get('expacc')
        dat1 = request.POST.get('dat1')
        intear = request.POST.get('intear')
        incacc = request.POST.get('incacc')
        if request.method == 'POST':
            if expenseaccount.objects.filter(account=account).exists() and expenseaccount.objects.filter(
                    cid=cmp1.cid) and incomeaccount.objects.filter(cid=cmp1.cid):
                expen = expenseaccount.objects.filter(
                    account=account, cid=cmp1.cid).get()
                incom = incomeaccount.objects.filter(
                    cid=cmp1.cid, expenceincomeid=expen).get()
                return render(request, 'app1/reconciled.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
            else:
                pro1 = accountype.objects.filter(
                    accountname=account, cid=cmp1).get()
                expen = expenseaccount(account=account, begbal=begbal, endbal=endbal, enddate=enddate, dat=dat,
                                       serchar=serchar, expacc=expacc, cid=cmp1, expaccountypid=pro1)
                expen.save()
                pro = expenseaccount.objects.get(
                    expenseid=expen.expenseid, cid=cmp1)
                incom = incomeaccount(
                    dat1=dat1, intear=intear, incacc=incacc, cid=cmp1, expenceincomeid=pro)
                incom.save()
                expen1 = expenseaccount.objects.last()
                incom1 = incomeaccount.objects.last()
                return render(request, 'app1/reconciled.html', {'expen': expen1, 'incom': incom1, 'cmp1': cmp1})
        else:
            return redirect('gorecon')
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def editrecon(request, expenseid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        expen = expenseaccount.objects.get(expenseid=expenseid, cid=cmp1)
        incom = incomeaccount.objects.get(
            expenceincomeid=expen.expenseid, cid=cmp1)
        return render(request, 'app1/editrecon.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def editrecon1(request, expenseid):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            expen = expenseaccount.objects.get(expenseid=expenseid, cid=cmp1)
            incom = incomeaccount.objects.get(
                expenceincomeid=expenseid, cid=cmp1)
            expen.account = request.POST['account']
            expen.begbal = request.POST['begbal']
            expen.endbal = request.POST['endbal']
            expen.enddate = request.POST['enddate']
            expen.dat = request.POST['dat']
            expen.serchar = request.POST['serchar']
            expen.expacc = request.POST['expacc']
            incom.dat1 = request.POST['dat1']
            incom.intear = request.POST['intear']
            incom.incacc = request.POST['incacc']
            expen.save()
            incom.save()
            return render(request, 'app1/reconciled.html', {'expen': expen, 'incom': incom, 'cmp1': cmp1})
        else:
            return redirect('gorecon')
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def goreconciled(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        return render(request, 'app1/reconciled.html', {'cmp1': cmp1})
    except:
        return redirect('gorecon')


@login_required(login_url='regcomp')
def goaddcustinvoice(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustinvoice.html', context)
    except:
        return redirect('goaddinvoices')


@login_required(login_url='regcomp')
def customersinvoice(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('goaddinvoices')
        else:
            return redirect('goaddinvoices')
    except:
        return redirect('goaddinvoices')


@login_required(login_url='regcomp')
def goaddcustpayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustpayment.html', context)
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def customerspayment(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('paymentindex')
        else:
            return redirect('paymentindex')
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def goaddcustestimate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustestimate.html', context)
    except:
        return redirect('estindex')


@login_required(login_url='regcomp')
def customersestimate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('estindex')
        else:
            return redirect('estindex')
    except:
        return redirect('estindex')


@login_required(login_url='regcomp')
def goaddcustsalrecpt(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustsalrecpt.html', context)
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def customerssalrecpt(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def goaddcustcreditnote(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustcreditnote.html', context)
    except:
        return redirect('creditindex')


@login_required(login_url='regcomp')
def customerscreditnote(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('creditindex')
        else:
            return redirect('creditindex')
    except:
        return redirect('creditindex')


@login_required(login_url='regcomp')
def goaddcustdelchrg(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustdelchrg.html', context)
    except:
        return redirect('delayed')


@login_required(login_url='regcomp')
def customersdelchrg(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('delayed')
        else:
            return redirect('delayed')
    except:
        return redirect('delayed')


@login_required(login_url='regcomp')
def goaddcusttimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcusttimeact.html', context)
    except:
        return redirect('gosaletimeactivity')


@login_required(login_url='regcomp')
def customerstimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('gosaletimeactivity')
        else:
            return redirect('gosaletimeactivity')
    except:
        return redirect('gosaletimeactivity')


@login_required(login_url='regcomp')
def supplierstimeact(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppliertimeact.html', context)
    except:
        return redirect('goexpences')


@login_required(login_url='regcomp')
def suppacttime(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gosaletimeactivity')
    except:
        return redirect('goexpences')


def getdata(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    x.append(" ")
    a = x[0]
    b = x[1]
    if x[2] is not None:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                'gsttype': custobject.gsttype,
                'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                'website': custobject.website,
                'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                'state': custobject.state,
                'pincode': custobject.pincode, 'country': custobject.country}
        list.append(dict)
    else:
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                'gsttype': custobject.gsttype,
                'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                'website': custobject.website,
                'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                'state': custobject.state,
                'pincode': custobject.pincode, 'country': custobject.country}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getdatainv(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        id = request.POST['select']
        print (id)
        x = id.split()
        x.append(" ")
        a = x[0]
        b = x[1]
        if x[2] is not None:
            b = x[1] + " " + x[2]
        custobject = customer.objects.values().filter(firstname=a, lastname=b, cid=cmp1)
        invitems = invoice.objects.values().filter(customername=id ,cid =cmp1,status='Approved' )

        custopenblan = customer.objects.get(firstname=a,lastname=b,cid =cmp1)

        if custopenblan.opening_balance != 0.0:

            cust1 = customer.objects.get(firstname=a,lastname=b,cid =cmp1,opnbalance_status="Default")

            date = cust1.date
            opb = cust1.opening_balance
            print(opb )
            obdue = cust1.opening_balance_due

            

        x_data = list(invitems)
        ct= list(custobject)
        
        return JsonResponse({"status":" not","invitem":x_data,"ct":ct,'date':date,'opb':opb,'obdue':obdue,})
        # return redirect('goexpences')





def getdata1(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    list = []
    if len(x) == 3:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        invoiceobject = invoice.objects.filter(customername=id, cid=cmp1)
        for i in invoiceobject:
            if i.baldue != '0.0':
                dict = {'customerid': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                        'gsttype': custobject.gsttype,
                        'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                        'website': custobject.website,
                        'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                        'state': custobject.state,
                        'pincode': custobject.pincode, 'country': custobject.country, 'invoiceid': i.invoiceid,
                        'customername': i.customername, 'email1': i.email,
                        'invoiceno': i.invoiceno, 'terms': i.terms,
                        'invoicedate': i.invoicedate, 'duedate': i.duedate,
                        'bname': i.bname, 'placosupply': i.placosupply,
                        'product': i.product, 'hsn': i.hsn,
                        'description': i.description, 'qty': i.qty,
                        'price': i.price, 'total': i.total,
                        'subtotal': i.subtotal, 'tax': i.tax,
                        'tax2': i.tax2, 'tax3': i.tax3, 'tax4': i.tax4,
                        'grandtotal': i.grandtotal,
                        'product2': i.product2, 'hsn2': i.hsn2,
                        'description2': i.description2, 'qty2': i.qty2,
                        'price2': i.price2, 'total2': i.total2,
                        'product3': i.product3, 'hsn3': i.hsn3,
                        'description3': i.description3, 'qty3': i.qty3,
                        'price3': i.price3, 'total3': i.total3,
                        'product4': i.product4, 'hsn4': i.hsn4,
                        'description4': i.description4, 'qty4': i.qty4,
                        'price4': i.price4, 'total4': i.total4,
                        'amtrecvd': i.amtrecvd,
                        'baldue': i.baldue
                        }
                list.append(dict)
    else:
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
        invoiceobject = invoice.objects.filter(customername=id, cid=cmp1)
        for i in invoiceobject:
            if i.baldue != '0.0':
                dict = {'customerid': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                        'gsttype': custobject.gsttype,
                        'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                        'website': custobject.website,
                        'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                        'state': custobject.state,
                        'pincode': custobject.pincode, 'country': custobject.country, 'invoiceid': i.invoiceid,
                        'customername': i.customername, 'email1': i.email,
                        'invoiceno': i.invoiceno, 'terms': i.terms,
                        'invoicedate': i.invoicedate, 'duedate': i.duedate,
                        'bname': i.bname, 'placosupply': i.placosupply,
                        'product': i.product, 'hsn': i.hsn,
                        'description': i.description, 'qty': i.qty,
                        'price': i.price, 'total': i.total,
                        'subtotal': i.subtotal, 'tax': i.tax,
                        'tax2': i.tax2, 'tax3': i.tax3, 'tax4': i.tax4,
                        'grandtotal': i.grandtotal,
                        'product2': i.product2, 'hsn2': i.hsn2,
                        'description2': i.description2, 'qty2': i.qty2,
                        'price2': i.price2, 'total2': i.total2,
                        'product3': i.product3, 'hsn3': i.hsn3,
                        'description3': i.description3, 'qty3': i.qty3,
                        'price3': i.price3, 'total3': i.total3,
                        'product4': i.product4, 'hsn4': i.hsn4,
                        'description4': i.description4, 'qty4': i.qty4,
                        'price4': i.price4, 'total4': i.total4, 'amtrecvd': i.amtrecvd,
                        'baldue': i.baldue}
                list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getitems(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    id = request.GET.get('id')

    def supplierstate():
        id1 = request.GET.get('id1')
        x = id1.split()
        a = x[0]
        b = x[1]
        if len(x) == 3:
            b = x[1] + " " + x[2]
            try:
                if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                    supobject = supplier.objects.get(
                        firstname=a, lastname=b, cid=cmp1)
                    payeeplace = supobject.state
            except:
                pass
        else:
            try:
                if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                    supobject = supplier.objects.get(
                        firstname=a, lastname=b, cid=cmp1)
                    payeeplace = supobject.state
            except:
                pass
        return payeeplace

    list = []
    if bundle.objects.filter(name=id, cid=cmp1).exists():
        bundleobject = bundle.objects.filter(name=id, cid=cmp1).get()
        bundledict = {'item': 'bundle', 'bundleid': bundleobject.bundleid, 'name': bundleobject.name,
                      'hsn': bundleobject.sku, 'description': bundleobject.description,
                      'salesprice': bundleobject.grandtotal, 'cost': 0, 'tax': 0,
                      'product1': bundleobject.product1, 'product2': bundleobject.product2,
                      'product3': bundleobject.product3, 'product4': bundleobject.product4, 'hsn1': bundleobject.hsn1,
                      'hsn2': bundleobject.hsn2, 'hsn3': bundleobject.hsn3, 'hsn4': bundleobject.hsn4,
                      'description1': bundleobject.description1, 'description2': bundleobject.description2,
                      'description3': bundleobject.description3, 'description4': bundleobject.description4,
                      'qty1': bundleobject.qty1, 'qty2': bundleobject.qty2, 'qty3': bundleobject.qty3,
                      'qty4': bundleobject.qty4, 'price1': bundleobject.price1, 'price2': bundleobject.price2,
                      'price3': bundleobject.price3, 'price4': bundleobject.price4, 'total1': bundleobject.total1,
                      'total2': bundleobject.total2, 'total3': bundleobject.total3, 'total4': bundleobject.total4,
                      'tax1': bundleobject.tax1, 'tax2': bundleobject.tax2, 'tax3': bundleobject.tax3,
                      'tax4': bundleobject.tax4}
        try:
            bundledict['place'] = supplierstate()
        except:
            pass
        list.append(bundledict)
    elif service.objects.filter(name=id, cid=cmp1).exists():
        serviceobject = service.objects.filter(name=id, cid=cmp1).get()
        servicedict = {'item': 'service', 'serviceid': serviceobject.serviceid,
                       'name': serviceobject.name, 'sku': serviceobject.sku,
                       'hsn': serviceobject.sac, 'unit': serviceobject.unit, 'categ': serviceobject.categ,
                       'description': serviceobject.descr, 'salesprice': serviceobject.saleprice,
                       'income': serviceobject.income, 'initialqty': '',
                       'tax': serviceobject.tax, 'abatement': serviceobject.abatement,
                       'sertype': serviceobject.sertype}
        try:
            servicedict['place'] = supplierstate()
        except:
            pass
        list.append(servicedict)
    elif inventory.objects.filter(name=id, cid=cmp1).exists():
        inventoryobject = inventory.objects.filter(name=id, cid=cmp1).get()
        inventorydict = {'item': 'inventory', 'inventoryid': inventoryobject.inventoryid,
                         'name': inventoryobject.name, 'sku': inventoryobject.sku, 'hsn': inventoryobject.hsn,
                         'unit': inventoryobject.unit, 'category': inventoryobject.category,
                         'initialqty': inventoryobject.initialqty,
                         'date': inventoryobject.date, 'stockalrt': inventoryobject.stockalrt,
                         'invacnt': inventoryobject.invacnt,
                         'description': inventoryobject.description, 'salesprice': inventoryobject.salesprice,
                         'incomeacnt': inventoryobject.incomeacnt,
                         'tax': inventoryobject.tax, 'purchaseinfo': inventoryobject.purchaseinfo,
                         'cost': inventoryobject.cost,
                         'expacnt': inventoryobject.expacnt, 'purtax': inventoryobject.purtax,
                         'revcharge': inventoryobject.revcharge,
                         'presupplier': inventoryobject.presupplier}
        try:
            inventorydict['place'] = supplierstate()
        except:
            pass
        list.append(inventorydict)
    elif noninventory.objects.filter(name=id, cid=cmp1).exists():
        noninventoryobject = noninventory.objects.filter(
            name=id, cid=cmp1).get()
        noninventorydict = {'item': 'noninventory', 'noninventoryid': noninventoryobject.noninventoryid,
                            'name': noninventoryobject.name,
                            'sku': noninventoryobject.sku, 'hsn': noninventoryobject.hsn,
                            'unit': noninventoryobject.unit,
                            'category': noninventoryobject.category, 'initialqty': noninventoryobject.qty,
                            'description': noninventoryobject.descr, 'cost': noninventoryobject.cost,
                            'salesprice': noninventoryobject.saleprice,
                            'tax': noninventoryobject.tax, 'purtax': noninventoryobject.purchasetax}
        try:
            noninventorydict['place'] = supplierstate()
        except:
            pass
        list.append(noninventorydict)




    else:
        notany = {'item': 'notany', 'name': ' ',
                  'sku': ' ', 'hsn': ' ',
                  'unit': 0,
                  'category': ' ', 'initialqty': 0,
                  'description': ' ', 'cost': 0,
                  'salesprice': 0,
                  'tax': 0, 'purtax': 0}
        list.append(notany)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getbalan(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    acctypeobject = accountype.objects.get(accountname=id, cid=cmp1)
    dict = {'accounttypeid': acctypeobject.accountypeid, 'accountname': acctypeobject.accountname,
            'accountbal': acctypeobject.accountbal}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getinvpro(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    invno = request.GET.get('invoiceno')
    list = []
    if invoice.objects.get(invoiceno=invno, cid=cmp1):
        invoiobject = invoice.objects.get(invoiceno=invno, cid=cmp1)
        dict = {'product': invoiobject.product, 'description': invoiobject.description,
                'qty': invoiobject.qty, 'price': invoiobject.price, 'total': invoiobject.total,
                'product2': invoiobject.product2, 'description2': invoiobject.description2,
                'qty2': invoiobject.qty2, 'price2': invoiobject.price2, 'total2': invoiobject.total2,
                'product3': invoiobject.product3, 'description3': invoiobject.description3,
                'qty3': invoiobject.qty3, 'price3': invoiobject.price3, 'total3': invoiobject.total3,
                'product4': invoiobject.product4, 'description4': invoiobject.description4,
                'qty4': invoiobject.qty4, 'price4': invoiobject.price4, 'total4': invoiobject.total4,
                'tax': invoiobject.tax,
                'tax2': invoiobject.tax2, 'tax3': invoiobject.tax3, 'tax4': invoiobject.tax4,
                'subtotal': invoiobject.subtotal,
                'grandtotal': invoiobject.grandtotal, 'taxamount': invoiobject.taxamount}
        list.append(dict)
    else:
        dict = {'product': '', 'description': '',
                'qty': '', 'price': '', 'total': '',
                'product2': '', 'description2': '',
                'qty2': '', 'price2': '', 'total2': '',
                'product3': '', 'description3': '',
                'qty3': '', 'price3': '', 'total3': '',
                'product4': '', 'description4': '',
                'qty4': '', 'price4': '', 'total4': '',
                'tax': '',
                'tax2': '', 'tax3': '', 'tax4': '',
                'subtotal': '',
                'grandtotal': '', 'taxamount': ''}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getterm(request):
    id = request.GET.get('id')
    list = []
    toda = date.today() + timedelta(days=int(id))
    newdate = toda.strftime("%d-%m-%Y")
    dict = {'newdate': newdate}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


@login_required(login_url='regcomp')
def gooexpensesuppliers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%d-%m-%y")
        context = {'cmp1': cmp1, 'tod': tod}
        return render(request, 'app1/expensesupplier.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def expensesupplier(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), addterms=request.POST.get('addterms'),
                           openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('/app1/expencesindex')
        suppliers = supplier.objects.all()
        context = {'suppliers': suppliers, 'cmp1': cmp1}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def gooexpensecustomer(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/expensecustomer.html', context)
    except:
        return redirect('/app1/expencesindex')


@login_required(login_url='regcomp')
def expensecustomers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                                 lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                                 location=request.POST.get('location'), gsttype=request.POST.get('gsttype'),
                                 gstin=request.POST.get('gstin'), panno=request.POST.get('panno'),
                                 email=request.POST.get('email'),
                                 website=request.POST.get('website'), mobile=request.POST.get('mobile'),
                                 street=request.POST.get('street'), city=request.POST.get('city'),
                                 state=request.POST.get('state'),
                                 pincode=request.POST.get('pincode'), country=request.POST.get('country'),
                                 cid=cmp1)

            customer1.save()
            return redirect('/app1/expencesindex')
        customers = customer.objects.all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/addexpences.html', context)
    except:
        return redirect('/app1/expencesindex')


def getitempay(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    print(id)
    if customer.objects.filter(firstname=id, cid=cmp1).exists():
        custobject = customer.objects.filter(firstname=id, cid=cmp1).get()
        custdict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                    'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                    'gsttype': custobject.gsttype,
                    'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                    'website': custobject.website,
                    'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                    'state': custobject.state,
                    'pincode': custobject.pincode, 'country': custobject.country, 'shipstreet': custobject.shipstreet,
                    'shipcity': custobject.shipcity, 'shipstate': custobject.shipstate,
                    'shippincode': custobject.shippincode,
                    'shipcountry': custobject.shipcountry}
        list.append(custdict)

    elif supplier.objects.filter(firstname=id, cid=cmp1).exists():
        supobject = supplier.objects.filter(firstname=id, cid=cmp1).get()
        supdict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                   'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                   'email': supobject.email, 'website': supobject.website,
                   'billingrate': supobject.billingrate, 'terms': supobject.terms,
                   'openingbalance': supobject.openingbalance,
                   'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                   'taxregistrationno': supobject.taxregistrationno,
                   'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                   'tds': supobject.tds,
                   'street': supobject.street, 'city': supobject.city,
                   'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                   'notes': supobject.notes}
        list.append(supdict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppdata(request):
    cmp1 = company.objects.get(id=request.sesion['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    else:
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        print(a + ' ' + b)
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppcustdata(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        try:
            if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                supobject = supplier.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                        'lastname': supobject.lastname, 'company': supobject.company, 'state': supobject.state,
                        'defaultexpenceaccount': supobject.defaultexpenceaccount}
                list.append(dict)
        except:
            pass
        try:
            if customer.objects.get(firstname=a, lastname=b, cid=cmp1):
                custobject = customer.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                        'lastname': custobject.lastname, 'company': custobject.company, 'state': custobject.state,
                        'defaultexpenceaccount': ' '}
                list.append(dict)
        except:
            pass
    else:
        try:
            if supplier.objects.get(firstname=a, lastname=b, cid=cmp1):
                supobject = supplier.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                        'lastname': supobject.lastname, 'company': supobject.company, 'state': supobject.state,
                        'defaultexpenceaccount': supobject.defaultexpenceaccount}
                list.append(dict)
        except:
            pass
        try:
            if customer.objects.get(firstname=a, lastname=b, cid=cmp1):
                custobject = customer.objects.get(
                    firstname=a, lastname=b, cid=cmp1)
                list = []
                dict = {'id': custobject.customerid, 'title': custobject.title,
                        'firstname': custobject.firstname, 'defaultexpenceaccount': ' ',
                        'lastname': custobject.lastname, 'company': custobject.company, 'state': custobject.state}
                list.append(dict)
        except:
            pass
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsupitems(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    print(id)
    if bundle.objects.filter(name=id, cid=cmp1).exists():
        bundleobject = bundle.objects.filter(name=id, cid=cmp1).get()
        bundledict = {'bundleid': bundleobject.bundleid, 'name': bundleobject.name,
                      'sku': bundleobject.sku, 'description': bundleobject.description, 'cost': 0}
        list.append(bundledict)
    elif service.objects.filter(name=id, cid=cmp1).exists():
        serviceobject = service.objects.filter(name=id, cid=cmp1).get()
        servicedict = {'serviceid': serviceobject.serviceid,
                       'name': serviceobject.name, 'sku': serviceobject.sku,
                       'sac': serviceobject.sac, 'unit': serviceobject.unit, 'categ': serviceobject.categ,
                       'descr': serviceobject.descr,
                       'saleprice': serviceobject.saleprice, 'income': serviceobject.income,
                       'tax': serviceobject.tax,
                       'sertype': serviceobject.sertype,
                       'purchasedescr': serviceobject.purchasedescr, 'cost': serviceobject.cost,
                       'expenseaccount': serviceobject.expenseaccount, 'purchasetax': serviceobject.purchasetax,
                       'revcharge': serviceobject.revcharge, 'presupplier': serviceobject.presupplier}
        list.append(servicedict)
    elif inventory.objects.filter(name=id, cid=cmp1).exists():
        inventoryobject = inventory.objects.filter(name=id, cid=cmp1)
        inventorydict = {'inventoryid': inventoryobject.inventoryid,
                         'name': inventoryobject.name, 'sku': inventoryobject.sku, 'hsn': inventoryobject.hsn,
                         'unit': inventoryobject.unit, 'category': inventoryobject.category,
                         'initialqty': inventoryobject.initialqty,
                         'date': inventoryobject.date, 'stockalrt': inventoryobject.stockalrt,
                         'invacnt': inventoryobject.invacnt,
                         'description': inventoryobject.description, 'salesprice': inventoryobject.salesprice,
                         'incomeacnt': inventoryobject.incomeacnt,
                         'tax': inventoryobject.tax, 'purchaseinfo': inventoryobject.purchaseinfo,
                         'cost': inventoryobject.cost,
                         'expacnt': inventoryobject.expacnt, 'purtax': inventoryobject.purtax,
                         'revcharge': inventoryobject.revcharge,
                         'presupplier': inventoryobject.presupplier}
        list.append(inventorydict)
    elif noninventory.objects.filter(name=id, cid=cmp1).exists():
        noninventoryobject = noninventory.objects.filter(name=id, cid=cmp1)
        noninventorydict = {'noninventoryid': noninventoryobject.noninventoryid,
                            'name': noninventoryobject.name,
                            'sku': noninventoryobject.sku, 'hsn': noninventoryobject.hsn,
                            'unit': noninventoryobject.unit,
                            'category': noninventoryobject.category,
                            'descr': noninventoryobject.descr,
                            'saleprice': noninventoryobject.saleprice,
                            'income': noninventoryobject.income,
                            'tax': noninventoryobject.tax,
                            'purchasedescr': noninventoryobject.purchasedescr, 'cost': noninventoryobject.cost,
                            'expenseaccount': noninventoryobject.expenseaccount,
                            'purchasetax': noninventoryobject.purchasetax,
                            'revcharge': noninventoryobject.revcharge,
                            'presupplier': noninventoryobject.presupplier}
        list.append(noninventorydict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppdata1(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    x = id.split()
    a = x[0]
    b = x[1]
    if len(x) == 3:
        b = x[1] + " " + x[2]
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    else:
        supobject = supplier.objects.get(firstname=a, lastname=b, cid=cmp1)
        list = []
        dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
                'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
                'email': supobject.email, 'website': supobject.website,
                'billingrate': supobject.billingrate, 'terms': supobject.terms,
                'openingbalance': supobject.openingbalance,
                'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
                'taxregistrationno': supobject.taxregistrationno,
                'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
                'street': supobject.street, 'city': supobject.city,
                'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
                'notes': supobject.notes}
        list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


def getsuppitems(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    supobject = supplier.objects.get(firstname=id, cid=cmp1)
    list = []
    dict = {'supplierid': supobject.supplierid, 'title': supobject.title, 'firstname': supobject.firstname,
            'lastname': supobject.lastname, 'company': supobject.company, 'mobile': supobject.mobile,
            'email': supobject.email, 'website': supobject.website,
            'billingrate': supobject.billingrate, 'terms': supobject.terms, 'addterms': supobject.addterms,
            'openingbalance': supobject.openingbalance,
            'accountno': supobject.accountno, 'gsttype': supobject.gsttype, 'gstin': supobject.gstin,
            'taxregistrationno': supobject.taxregistrationno,
            'effectivedate': supobject.effectivedate, 'defaultexpenceaccount': supobject.defaultexpenceaccount,
            'street': supobject.street, 'city': supobject.city,
            'state': supobject.state, 'pincode': supobject.pincode, 'country': supobject.country,
            'notes': supobject.notes}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


@login_required(login_url='regcomp')
def goaddsuppliersbill(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppbill.html', context)
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goaddsuppliercredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppcredit.html', context)
    except:
        return redirect('gosupcredit')


@login_required(login_url='regcomp')
def suppliercreatecredit(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gosupcredit')
        return redirect('gosupcredit')
    except:
        return redirect('gosupcredit')


@login_required(login_url='regcomp')
def suppliercreatebill(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gobills')
        return redirect('gobills')
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goaddsupplierscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addsuppcheque.html', context)
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def suppliercreatecheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == 'POST':
            sup = supplier(title=request.POST.get('title'), firstname=request.POST.get('firstname'),
                           lastname=request.POST.get('lastname'), company=request.POST.get('company'),
                           mobile=request.POST.get('mobile'), email=request.POST.get('email'),
                           website=request.POST.get('website'), billingrate=request.POST.get('billingrate'),
                           terms=request.POST.get('terms'), openingbalance=request.POST.get('openingbalance'),
                           accountno=request.POST.get('accountno'), gsttype=request.POST.get('gsttype'),
                           gstin=request.POST.get('gstin'), taxregistrationno=request.POST.get('taxregistrationno'),
                           effectivedate=request.POST.get('effectivedate'),
                           defaultexpenceaccount=request.POST.get(
                               'defaultexpenceaccount'),
                           street=request.POST.get('street'),
                           city=request.POST.get('city'), state=request.POST.get('state'),
                           pincode=request.POST.get('pincode'),
                           country=request.POST.get('country'), notes=request.POST.get('notes'), cid=cmp1)
            sup.save()
            return redirect('gocheque')
        return redirect('gocheque')
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def gocustomerscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/addcustcheque.html', context)
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def customerscheque(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                 lastname=request.POST['lastname'], company=request.POST['company'],
                                 location=request.POST['location'], gsttype=request.POST['gsttype'],
                                 gstin=request.POST['gstin'], panno=request.POST['panno'], email=request.POST['email'],
                                 website=request.POST['website'], mobile=request.POST['mobile'],
                                 street=request.POST['street'], city=request.POST['city'], state=request.POST['state'],
                                 pincode=request.POST['pincode'], country=request.POST['country'],
                                 shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                 shipstate=request.POST['shipstate'],
                                 shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                 cid=cmp1)

            customer1.save()
            return redirect('gocheque')
        else:
            return redirect('gocheque')
    except:
        return redirect('gocheque')


@login_required(login_url='regcomp')
def suppliercoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/suppliercoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goaddsuppliers')


@login_required(login_url='regcomp')
def supplieracccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goaddsuppliers')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goaddsuppliers')
        else:
            return redirect('goaddsuppliers')
    except:
        return redirect('goaddsuppliers')


@login_required(login_url='regcomp')
def paymentcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/paymentcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def paymentacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('paymentindex')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('paymentindex')
        else:
            return redirect('paymentindex')
    except:
        return redirect('paymentindex')


@login_required(login_url='regcomp')
def salrecptcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/salrecptcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def salrecptacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('addsalesrecipts')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def editsalrecptcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/editsalrecptcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def editsalrecptacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('addsalesrecipts')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('addsalesrecipts')
        else:
            return redirect('addsalesrecipts')
    except:
        return redirect('addsalesrecipts')


@login_required(login_url='regcomp')
def productcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/productcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def product1coacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/product1coa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def product2coacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/product2coa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goinv')


@login_required(login_url='regcomp')
def productacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goinv')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goinv')
        else:
            return redirect('goinv')
    except:
        return redirect('goinv')


def noninvcoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/noninvcoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('gononinv')


def noninvcoacreate1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/noninvcoa1.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('gononinv')


@login_required(login_url='regcomp')
def noninvacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('gononinv')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('gononinv')
        else:
            return redirect('gononinv')
    except:
        return redirect('gononinv')


def sercoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/sercoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('goser')


@login_required(login_url='regcomp')
def seracccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = 0
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('goser')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=tod, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('goser')
        else:
            return redirect('goser')
    except:
        return redirect('goser')


def expencoacreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        prodobj = ProductModel.objects.all()
        itemobj = ItemModel.objects.all()
        return render(request, 'app1/expencoa.html', {'cmp1': cmp1, 'Product': prodobj, 'Item': itemobj})
    except:
        return redirect('expencesindex')


@login_required(login_url='regcomp')
def expenacccreate(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        acctype = request.POST.get('acctype')
        detype = request.POST.get('detype')
        name = request.POST.get('name')
        description = request.POST.get('description')
        gst = request.POST.get('gst')
        deftaxcode = request.POST.get('deftaxcode')
        balance = request.POST.get('balance')
        asof = request.POST.get('asof')
        pro = accountype.objects.get(accountypeid=acctype)
        pro2 = ProductModel.objects.get(Pid=acctype)
        if request.method == 'POST':
            if accountype.objects.filter(accountname=detype).exists() and accounts.objects.filter(name=name,
                                                                                                  cid=cmp1.cid) or accounts1.objects.filter(
                    name=name, cid=cmp1.cid):
                messages.info(
                    request, f"Account with name {name} already exists. Please provide another name.")
                return redirect('gobills')
            else:
                account = accounts(acctype=acctype, detype=detype, name=name, description=description,
                                   gst=gst, balfordisp=balance,
                                   deftaxcode=deftaxcode, balance=balance, asof=asof, cid=cmp1, proid=pro,
                                   productid=pro2)
                account.save()
                account1 = accountype(
                    cid=cmp1, accountname=detype, accountbal=balance)
                account1.save()
                acco = accounts1.objects.get(
                    name='Opening Balance Equity', cid=cmp1)
                acco.balance += float(balance)
                acco.save()
                return redirect('gobills')
        else:
            return redirect('gobills')
    except:
        return redirect('gobills')


@login_required(login_url='regcomp')
def goofflinebank2(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/offlinebank2.html', {'cmp1': cmp1})
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def uploadstatement(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        bstat = bankstatement.objects.filter(cid=cmp1)
        return render(request, 'app1/uploadtran.html', {'cmp1': cmp1, 'bstat': bstat})
    except:
        return redirect('goofflinebank')


@login_required(login_url='regcomp')
def addbankdata(request, bankstatementid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        accoun = accounts.objects.filter(cid=cmp1)
        accoun1 = accounts1.objects.filter(cid=cmp1)
        bstat = bankstatement.objects.get(
            bankstatementid=bankstatementid, cid=cmp1)
        return render(request, 'app1/addbankdata.html',
                      {'cmp1': cmp1, 'accoun': accoun, 'accoun1': accoun1, 'bstat': bstat})
    except:
        return redirect('goofflinebank')


@login_required(login_url='regcomp')
def addtoaccounts(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            paye = request.POST['payee']
            category = request.POST['category']
            amount = float(request.POST['amount'])
            crdecheck = request.POST['hiden']
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            if crdecheck == 'credit':
                salre = salesrecpts(saledate=tod, salename=paye, offline='True', saledeposit=category,
                                    salegrandtotal=amount, cid=cmp1)
                salre.save()
                ard = accounts1.objects.get(
                    name='Account Receivable(Debtors)', cid=cmp1)
                ard.balance = round(ard.balance - amount, 2)
                ard.save()
                try:
                    acco = accounts.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance + amount, 2)
                    acco.save()
                except:
                    pass
                try:
                    acco = accounts1.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance + amount, 2)
                    acco.save()
                except:
                    pass
            elif crdecheck == 'debit':
                bill = bills(paymdate=tod, payee=paye, paymacnt=category,
                             grandtotal=amount, payornot='debit', cid=cmp1)
                bill.save()
                ard = accounts1.objects.get(
                    name='Accounts Payable(Creditors)', cid=cmp1)
                ard.balance = round(ard.balance - amount, 2)
                ard.save()
                try:
                    acco = accounts.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance - amount, 2)
                    acco.save()
                except:
                    pass
                try:
                    acco = accounts1.objects.get(name=category, cid=cmp1)
                    acco.balance = round(acco.balance - amount, 2)
                    acco.save()
                except:
                    pass
            else:
                pass
        return redirect('uploadstatement')
    except:
        return redirect('uploadstatement')


@login_required(login_url='regcomp')
def addbalance(request):
    try:
        ids = request.GET.get('id')
        cmp1 = company.objects.get(id=request.session['uid'])
        ifs = json.loads(ids)
        for i in range(len(ifs)):
            for j in range(1):
                bankstat = bankstatement(cid=cmp1, name=ifs[i][0], date=ifs[i][1], description=ifs[i][2],
                                         debit=ifs[i][3],
                                         credit=ifs[i][4])
                bankstat.save()
        return redirect('uploadstatement')
    except:
        return redirect('uploadstatement')


@login_required(login_url='regcomp')
def balancesheetfiltered(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
                print(fromdate, todate)
        else:
            return redirect('balancesheet')

        # Account Receivable(Debtors)

        invoi = invoice.objects.raw(
            'select * from app1_invoice where (invoicedate between %s and %s)', [fromdate, todate, ])
        totalardebtors = 0.0
        for i in invoi:
            if i.cid == cmp1:
                totalardebtors += float(i.grandtotal)
        creditnote = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                        [fromdate, todate, ])
        for i in creditnote:
            if i.cid == cmp1:
                totalardebtors -= float(i.grndtot)
        paymen = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in paymen:
            if i.cid == cmp1:
                totalardebtors -= float(i.amtapply)

        context['accountreceivable'] = totalardebtors

        # Accounts Payable(Creditors)

        totalapcreditors = 0.0
        bill = bills.objects.raw(
            'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
        for b in bill:
            if b.cid == cmp1 and b.payornot == 'openbalance':
                totalapcreditors = totalapcreditors + float(b.grandtotal)
        bill2 = bills.objects.raw(
            'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
        for b in bill2:
            if b.cid == cmp1 and b.payornot != 'openbalance' and b.payornot != 'debit':
                totalapcreditors = totalapcreditors - float(b.grandtotal)
        debit = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                        [fromdate, todate, ])
        for b in debit:
            if b.cid == cmp1:
                totalapcreditors = totalapcreditors - float(b.grandtotal)
        expence = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                       [fromdate, todate, ])
        for b in expence:
            if b.cid == cmp1:
                totalapcreditors = totalapcreditors + float(b.grandtotal)

        context['accountpayable'] = totalapcreditors

        currentliability = []

        # Input CGST

        totalinpcgst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpcgst += float(i.taxamount) / 2
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname)
                else:
                    supp = supplier.objects.get(firstname=x[0], lastname=x[1])
                if supp.state == cmp1.state:
                    totalinpcgst -= float(i.taxamount) / 2

        currentliability.append(['Input CGST', totalinpcgst])

        # Input SGST

        totalinpsgst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpsgst += float(i.taxamount) / 2
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    totalinpsgst -= float(i.taxamount) / 2

        currentliability.append(['Input SGST', totalinpsgst])

        # Input IGST

        totalinpigst = 0.0
        deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                      [fromdate, todate, ])
        for i in deb:
            if i.cid == cmp1:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    totalinpigst -= float(i.taxamount)
        expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                     [fromdate, todate, ])
        for i in expen:
            if i.cid == cmp1:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    totalinpigst += float(i.taxamount)

        currentliability.append(['Input IGST', totalinpigst])

        # Output CGST

        totaloutcgst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply == cmp1.state:
                    totaloutcgst += float(i.taxamount) / 2
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place == cmp1.state:
                    totaloutcgst -= float(i.taxamnt) / 2
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace == cmp1.state:
                    totaloutcgst += float(i.saletaxamount) / 2

        currentliability.append(['Output CGST', totaloutcgst])

        # Output SGST

        totaloutsgst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply == cmp1.state:
                    totaloutsgst += float(i.taxamount) / 2
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place == cmp1.state:
                    totaloutsgst -= float(i.taxamnt) / 2
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace == cmp1.state:
                    totaloutsgst += float(i.saletaxamount) / 2

        currentliability.append(['Output SGST', totaloutsgst])

        # Output IGST

        totaloutigst = 0.0
        invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                    [fromdate, todate, ])
        for i in invoi:
            if i.cid == cmp1:
                if i.placosupply != cmp1.state:
                    totaloutigst += float(i.taxamount)
        creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                       [fromdate, todate, ])
        for i in creditnot:
            if i.cid == cmp1:
                if i.place != cmp1.state:
                    totaloutigst -= float(i.taxamnt)
        salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
        for i in salesrcpt:
            if i.cid == cmp1:
                if i.salesplace != cmp1.state:
                    totaloutigst += float(i.saletaxamount)
        currentliability.append(['Output IGST', totaloutigst])

        # Opening Balance Equity

        totalobe = 0.0
        inventori = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                          [fromdate, todate, ])
        for inv in inventori:
            if inv.cid == cmp1:
                totalobe += float(inv.cxq)
        accoun = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        for i in accoun:
            if i.cid == cmp1:
                totalobe += float(i.balfordisp)

        context['obequity'] = totalobe

        # Ask My Accountant

        totalama = 0.0
        bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                 [fromdate, todate, ])
        for i in bill:
            if i.cid == cmp1 and i.payornot == 'openbalance':
                totalama += float(i.grandtotal)

        context['askmyaccountant'] = totalama

        acclis = []
        acc = accounts1.objects.filter(acctype='Current Assets', cid=cmp1)
        for i in acc:
            if i.balance != 0.0:
                acclis.append(i.name)
        inventor = inventory.objects.filter(cid=cmp1)
        inventor1 = []
        for i in inventor:
            inventor1.append([i.name, i.cost])
        bundl = bundle.objects.filter(cid=cmp1)
        bundles = []
        bundlpro = []
        bundlqty = []
        bundlprice = []
        for i in bundl:
            bundles.append(i.name)
            bundlpro.append([i.product1, i.product2, i.product3, i.product4])
            bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            bundlprice.append([i.price1, i.price2, i.price3, i.price4])
        for i in acclis:
            try:
                inventor = inventory.objects.get(invacnt=i, cid=cmp1)
                totalinventasset = 0.0
                invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                                [fromdate, todate, ])
                for i in invento:
                    if i.cid == cmp1 and i.invacnt == inventor.invacnt:
                        totalinventasset += i.cxq
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventasset += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventasset += totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    totalinventasset -= totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventasset -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                for i in expen:
                    for j in inventor1:
                        if i.cid == cmp1:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                totalinventasset += totalcost

                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    totalinventasset += totalcost
                            except:
                                pass
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for i in debi:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(i.price) * float(i.qty), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    totalinventasset -= totalcost
                            except:
                                pass
            except:
                pass
            try:
                invento = inventory.objects.filter(cid=cmp1)
                totalinventincome = 0.0
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalinventincome += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalinventincome += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalinventincome += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalinventincome += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalinventincome -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    totalinventincome -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalinventincome -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalinventincome -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j:
                                    totalinventincome += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    totalinventincome += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    totalinventincome += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    totalinventincome += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalnoincome = 0.0
                noninvento = noninventory.objects.filter(cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnoincome += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnoincome += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnoincome += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnoincome += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnoincome -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    totalnoincome -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnoincome -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnoincome -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalnoincome -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j:
                                    totalnoincome += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    totalnoincome += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    totalnoincome += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    totalnoincome += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalnoincome += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalinventexpence = 0.0
                invento = inventory.objects.filter(cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                for i in invoc:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                for i in creditnot:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    totalinventexpence -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    totalinventexpence -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for i in salesrecpt:
                    for j in inventor:
                        if i.cid == cmp1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    totalinventexpence += totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    totalinventexpence += totalcost
                                            except:
                                                pass
                            except:
                                pass
            except:
                pass
            try:
                totalnonexpence = 0.0
                noninvento = noninventory.objects.filter(cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                for i in expen:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnonexpence += float(i.total)
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnonexpence += float(i.total2)
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnonexpence += float(i.total3)
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnonexpence += float(i.total4)
                            except:
                                pass
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for i in debi:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    totalnonexpence -= float(i.total)
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    totalnonexpence -= float(i.total2)
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    totalnonexpence -= float(i.total3)
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    totalnonexpence -= float(i.total4)
                            except:
                                pass
            except:
                pass
            lis = []
            try:
                totalsaledeposit = 0.0
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for s in salesrecpt:
                    if s.cid == cmp1:
                        lis.append([s.saledeposit, s.salegrandtotal])
                        totalsaledeposit += float(s.salegrandtotal)
            except:
                pass
            try:
                totalpaydeposit = 0.0
                payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for s in payment1:
                    if s.cid == cmp1:
                        lis.append([s.depto, s.amtapply])
                        totalpaydeposit += float(s.amtapply)
            except:
                pass
            try:
                totalbilldeposit = 0.0
                bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                         [fromdate, todate, ])
                for s in bill:
                    if s.cid == cmp1 and s.payornot != 'openbalance':
                        lis.append([s.paymacnt, 0 - float(s.grandtotal)])
                        totalbilldeposit -= float(s.grandtotal)
            except:
                pass
        banktot = 0.0
        currenttot = 0.0
        currentlist = []
        for i in lis:
            try:
                if i[0] in acclis:
                    currentlist.append([i[0], i[1]])
                    currenttot += float(i[1])
            except:
                pass
            try:
                if i[0] not in acclis:
                    banktot += float(i[1])
            except:
                pass
        currentlist.append(['Inventory Asset', str(totalinventasset)])

        accouns = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        for i in accouns:
            if i.cid == cmp1 and i.acctype == '3':
                banktot += float(i.balfordisp)
        context['bank'] = banktot
        context['currentliable'] = currentliability
        context['currentasset'] = currentlist
        context['asset'] = banktot + currenttot + \
            totalinventasset + totalardebtors

        proandloss = ((totalinventincome + totalnoincome) -
                      totalinventexpence) - (totalnonexpence + totalama)
        context['proandloss'] = proandloss
        context['equity'] = proandloss + totalobe
        totcliability = 0.0
        for i in currentliability:
            totcliability += float(i[1])
        context['totcurliability'] = totcliability + totalapcreditors
        context['totliability'] = totcliability + \
            totalapcreditors + proandloss + totalobe

        return render(request, 'app1/balancesheetfilter.html', context)
    except:
        return redirect('balancesheet')


@login_required(login_url='regcomp')
def balancesheet(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        try:
            tot = 0.0
            if accounts1.objects.filter(acctype='Current Assets', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Current Assets', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot = tot + i.balance
                context['account'] = acc
        except:
            pass
        try:
            tot1 = 0.0
            if accounts.objects.filter(acctype='Current Assets', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Current Assets', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot1 = tot1 + i.balance
                context['account1'] = acc
        except:
            pass
        try:
            tot2 = 0.0
            if accounts1.objects.filter(acctype='Account Receivable(Debtors)', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Account Receivable(Debtors)', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot2 = tot2 + i.balance
                context['account2'] = acc
        except:
            pass
        try:
            tot3 = 0.0
            if accounts.objects.filter(acctype='Account Receivable(Debtors)', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Account Receivable(Debtors)', cid=cmp1)
                for i in acc:
                    if i.cid == cmp1:
                        tot3 = tot3 + i.balance
                context['account3'] = acc
        except:
            pass
        try:
            totbank = 0.0
            if accounts.objects.filter(acctype='3', cid=cmp1):
                acc = accounts.objects.filter(acctype='3', cid=cmp1)
                for i in acc:
                    totbank = totbank + i.balance
                context['accountbank'] = acc
                context['tbank'] = totbank
        except:
            pass
        taccountsreceivable = tot2 + tot3
        tcurrentassets = tot + tot1 + taccountsreceivable + totbank
        context['tar'] = taccountsreceivable
        context['tca'] = tcurrentassets
        try:
            tot4 = 0.0
            if accounts1.objects.filter(acctype='Current Liabilities', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Current Liabilities', cid=cmp1)
                for i in acc:
                    tot4 = tot4 + i.balance
                context['account4'] = acc
        except:
            pass
        try:
            tot5 = 0.0
            if accounts.objects.filter(acctype='Current Liabilities', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Current Liabilities', cid=cmp1)
                for i in acc:
                    tot5 = tot5 + i.balance
                context['account5'] = acc
        except:
            pass
        try:
            tot6 = 0.0
            if accounts1.objects.filter(acctype='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Accounts Payable(Creditors)', cid=cmp1)
                for i in acc:
                    tot6 = tot6 + i.balance
                context['account6'] = acc
        except:
            pass
        try:
            tot7 = 0.0
            if accounts.objects.filter(acctype='Accounts Payable(Creditors)', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Accounts Payable(Creditors)', cid=cmp1)
                for i in acc:
                    tot7 = tot7 + i.balance
                context['account7'] = acc
        except:
            pass
        taccountspayable = tot6 + tot7
        tcurrentliabilties = tot4 + tot5 + taccountspayable
        context['tap'] = taccountspayable
        context['tcl'] = tcurrentliabilties
        try:
            tot8 = 0.0
            if accounts1.objects.filter(acctype='Equity', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Equity', cid=cmp1)
                for i in acc:
                    tot8 = tot8 + i.balance
                context['account8'] = acc
        except:
            pass
        try:
            tot9 = 0.0
            if accounts.objects.filter(acctype='Equity', cid=cmp1):
                acc = accounts.objects.filter(acctype='Equity', cid=cmp1)
                for i in acc:
                    tot9 = tot9 + i.balance
                context['account9'] = acc
        except:
            pass
        tequity = tot8 + tot9
        try:
            tot10 = 0.0
            if accounts1.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot10 = tot10 + i.balance
        except:
            pass
        try:
            tot11 = 0.0
            if accounts.objects.filter(acctype='Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Income', cid=cmp1)
                for i in acc:
                    tot11 = tot11 + i.balance
        except:
            pass
        tincome = tot10 + tot11
        try:
            tot12 = 0.0
            if accounts1.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot12 = tot12 + i.balance
        except:
            pass
        try:
            tot13 = 0.0
            if accounts.objects.filter(acctype='Cost of Goods Sold', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Cost of Goods Sold', cid=cmp1)
                for i in acc:
                    tot13 = tot13 + i.balance
        except:
            pass
        tcogs = tot12 + tot13
        try:
            tot14 = 0.0
            if accounts1.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot14 = tot14 + i.balance
        except:
            pass
        try:
            tot15 = 0.0
            if accounts.objects.filter(acctype='Other Income', cid=cmp1):
                acc = accounts.objects.filter(acctype='Other Income', cid=cmp1)
                for i in acc:
                    tot15 = tot15 + i.balance
        except:
            pass
        totherincome = tot14 + tot15
        try:
            tot16 = 0.0
            if accounts1.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts1.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot16 = tot16 + i.balance
        except:
            pass
        try:
            tot17 = 0.0
            if accounts.objects.filter(acctype='Expenses', cid=cmp1):
                acc = accounts.objects.filter(acctype='Expenses', cid=cmp1)
                for i in acc:
                    tot17 = tot17 + i.balance
        except:
            pass
        try:
            tot18 = 0.0
            if accounts1.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts1.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot18 = tot18 + i.balance
        except:
            pass
        try:
            tot19 = 0.0
            if accounts.objects.filter(acctype='Other Expenses', cid=cmp1):
                acc = accounts.objects.filter(
                    acctype='Other Expenses', cid=cmp1)
                for i in acc:
                    tot19 = tot19 + i.balance
        except:
            pass
        texpences = tot16 + tot17
        toexpences = tot18 + tot19
        proandloss = ((tincome - tcogs) + totherincome) - \
                      (texpences + toexpences)
        print(tincome, tcogs, texpences, toexpences)
        totequity = tequity + proandloss
        tlande = tcurrentliabilties + totequity
        context['proandloss'] = proandloss
        context['totequity'] = totequity
        context['tlande'] = tlande
        return render(request, 'app1/balancesheet.html', context)
    except:
        return redirect('godash')


def profitandloss(request):
    
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        
        pur=purchasebill.objects.all()
        sum1=0
        for i in pur:
            sum1+=i.grand_total
        
        inv = invoice.objects.filter()
        sum2=0
        for i in inv:
            sum2+=i.grandtotal

        ex=purchase_expense.objects.all()
        sum3=0
        for i in ex:
            sum3+=i.amount

        sumtot=sum1+sum2+sum3  

        context={'pur':pur,'sum1':sum1,'inv': inv,'sum2':sum2,'sumtot':sumtot,'ex':ex,'sum3':sum3}



        return render(request, 'app1/profitandloss.html', context)
        return redirect('godash')


def profitandlossfiltered(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        context = {'cmp1': cmp1}
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('profitandloss')

        totalama = 0.0
        bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                 [fromdate, todate, ])
        for i in bill:
            if i.cid == cmp1 and i.payornot == 'openbalance':
                totalama += float(i.grandtotal)

        context['askmyaccountant'] = totalama

        inventor = inventory.objects.filter(cid=cmp1)
        inventor1 = []
        for i in inventor:
            inventor1.append([i.name, i.cost])
        bundl = bundle.objects.filter(cid=cmp1)
        bundles = []
        bundlpro = []
        bundlqty = []
        bundlprice = []
        for i in bundl:
            bundles.append(i.name)
            bundlpro.append([i.product1, i.product2, i.product3, i.product4])
            bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            bundlprice.append([i.price1, i.price2, i.price3, i.price4])
        try:
            invento = inventory.objects.filter(cid=cmp1)
            totalinventincome = 0.0
            inventor = []
            for i in invento:
                inventor.append(i.name)
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalinventincome += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalinventincome += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalinventincome += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalinventincome += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalinventincome -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                totalinventincome -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalinventincome -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalinventincome -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                totalinventincome += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                totalinventincome += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                totalinventincome += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                totalinventincome += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalinventincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass

        try:
            totalnoincome = 0.0
            noninvento = noninventory.objects.filter(cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnoincome += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnoincome += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnoincome += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnoincome += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnoincome -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                totalnoincome -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnoincome -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnoincome -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                totalnoincome -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                totalnoincome += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                totalnoincome += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                totalnoincome += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                totalnoincome += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalnoincome += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass

        try:
            totalinventexpence = 0.0
            invento = inventory.objects.filter(cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            for i in invoc:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            for i in creditnot:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                totalinventexpence -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                totalinventexpence -= totalcost
                                        except:
                                            pass
                        except:
                            pass
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for i in salesrecpt:
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                totalinventexpence += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                totalinventexpence += totalcost
                                        except:
                                            pass
                        except:
                            pass
        except:
            pass
        try:
            totalnonexpence = 0.0
            noninvento = noninventory.objects.filter(cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            for i in expen:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnonexpence += float(i.total)
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnonexpence += float(i.total2)
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnonexpence += float(i.total3)
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnonexpence += float(i.total4)
                        except:
                            pass
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for i in debi:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                totalnonexpence -= float(i.total)
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                totalnonexpence -= float(i.total2)
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                totalnonexpence -= float(i.total3)
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                totalnonexpence -= float(i.total4)
                        except:
                            pass
        except:
            pass
        context['totalincome'] = (totalinventincome + totalnoincome)
        context['costofgoods'] = totalinventexpence
        totalnonexpences = totalnonexpence + totalama
        context['totaloexpense'] = totalnonexpences
        grosprofit = (totalinventincome + totalnoincome) - totalinventexpence
        context['gropro'] = grosprofit
        profandloss = ((totalinventincome + totalnoincome) - totalinventexpence) - (totalnonexpence + totalama)
        context['proanloss'] = profandloss
        return render(request, 'app1/profitandlossfilter.html', context)
    except:
        return redirect('profitandloss')


@login_required(login_url='regcomp')
def accreceivables(request):
    
        cmp1 = company.objects.get(id=request.session["uid"])

        inv = invoice.objects.filter(cid=cmp1).values(
            'customername').annotate(t1=Sum('baldue'))
        # cre = credit.objects.filter(cid=cmp1).values(
        #     'customer').annotate(t1=Coalesce(Sum('grndtot'), 0))
        tot = invoice.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('baldue'))

        

        # tot1 = credit.objects.filter(
        #     cid=cmp1).all().aggregate(t2=Sum('grndtot'))

        # custo = customer.objects.filter(cid=cmp1).all()

        

        cust = customer.objects.filter(cid=cmp1)
        
        for i in cust:
            custname = i.firstname +" "+i.lastname
            
            statment = cust_statment.objects.filter(customer=custname,cid=cmp1)
            debit=0
            credit=0
            total1 = 0
            
            for j in statment :
                if j.Amount:
                    debit+=j.Amount
                if j.Payments:
                    credit+=j.Payments

            total1=debit-credit
           
            i.receivables = total1
            i.save()

            sum=0
            for i in  cust:
                if i.receivables:
                    sum +=i.receivables

            print(sum)    
        


        context = {'invoice': inv, 'cmp1': cmp1,
                   'tot': tot, 
                #    'tot1': tot1,
                    # 'cre': cre,
                    "cust":cust,
                    'sum':sum,
                    }
        return render(request, 'app1/accreceivables.html', context)
    

@login_required(login_url='regcomp')
def accreceivables1(request):
    try:
        # toda = date.today()
        # tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        # if filmeth == 'Today':
        #     fromdate = tod
        #     todate = tod
        if filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']

            print(fromdate)


        # elif filmeth == 'This month':
        #     fromdate = toda.strftime("%Y-%m-01")
        #     todate = toda.strftime("%Y-%m-31")
        # elif filmeth == 'This financial year':
        #     if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
        #         pyear = int(toda.strftime("%Y")) - 1
        #         fromdate = f'{pyear}-03-01'
        #         todate = f'{toda.strftime("%Y")}-03-31'
        #     else:
        #         pyear = int(toda.strftime("%Y")) + 1
        #         fromdate = f'{toda.strftime("%Y")}-03-01'
        #         todate = f'{pyear}-03-31'
        else:
            return redirect('accreceivables')
        # cmp1 = company.objects.get(id=request.session["uid"])
        # inv = invoice.objects.filter(cid=cmp1, invoicedate__gte=fromdate, invoicedate__lte=todate).values(
        #     'customername').annotate(t1=Sum('baldue'))
        # cre = credit.objects.filter(cid=cmp1, creditdate__gte=fromdate, creditdate__lte=todate).values(
        #     'customer').annotate(t1=Coalesce(Sum('grndtot'), 0))
        # tot = invoice.objects.filter(cid=cmp1, invoicedate__gte=fromdate, invoicedate__lte=todate).aggregate(
        #     t2=Sum('baldue'))
        # tot1 = credit.objects.filter(cid=cmp1, creditdate__gte=fromdate, creditdate__lte=todate).aggregate(
        #     t2=Sum('grndtot'))
        # context = {'invoice': inv, 'cmp1': cmp1,
        #            'tot': tot, 'tot1': tot1, 'cre': cre}

        cmp1 = company.objects.get(id=request.session["uid"])

        inv = invoice.objects.filter(cid=cmp1).values(
            'customername').annotate(t1=Sum('baldue'))
        # cre = credit.objects.filter(cid=cmp1).values(
        #     'customer').annotate(t1=Coalesce(Sum('grndtot'), 0))
        tot = invoice.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('baldue'))

        

        # tot1 = credit.objects.filter(
        #     cid=cmp1).all().aggregate(t2=Sum('grndtot'))

        # custo = customer.objects.filter(cid=cmp1).all()

        

        cust = customer.objects.filter(cid=cmp1)
        
        for i in cust:
            custname = i.firstname +" "+i.lastname
            
            statment = cust_statment.objects.filter(customer=custname,cid=cmp1,Date__gte=fromdate,Date__lte=todate)
            debit=0
            credit=0
            total1 = 0
            
            for j in statment :
                if j.Amount:
                    debit+=j.Amount
                if j.Payments:
                    credit+=j.Payments

            total1=debit-credit
           
            i.receivables = total1
            i.save()

            sum=0
            for i in  cust:
                sum +=i.receivables

            print(sum)    
        


        context = {'invoice': inv, 'cmp1': cmp1,
                   'tot': tot, 
                #    'tot1': tot1,
                    # 'cre': cre,
                    "cust":cust,
                    'sum':sum,
                    }
        return render(request, 'app1/accreceivables.html', context)
    except:
        return redirect('accreceivables')


@login_required(login_url='regcomp')
def accpayables(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        ex = expences.objects.filter(cid=cmp1).values(
            'payee').annotate(t1=Sum('grandtotal'))
        pbl = purchasebill.objects.filter(cid=cmp1).values(
            'vendor_name').annotate(t1=Sum('balance_due'))
        cre = suplrcredit.objects.filter(cid=cmp1).values(
            'supplier').annotate(t1=Sum('creditamount'))
        op = bills.objects.filter(cid=cmp1, payornot='openbalance').values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi = bills.objects.filter(cid=cmp1, payornot='debit').values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi1 = bills.objects.filter(cid=cmp1, payornot='').values(
            'payee').annotate(t1=Sum('grandtotal'))
        tot = expences.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('grandtotal'))
        tot6 = purchasebill.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('balance_due'))
        tot1 = suplrcredit.objects.filter(
            cid=cmp1).all().aggregate(t2=Sum('creditamount'))
        tot2 = bills.objects.filter(
            cid=cmp1, payornot='debit').all().aggregate(t2=Sum('grandtotal'))
        tot3 = bills.objects.filter(
            cid=cmp1, payornot='').all().aggregate(t2=Sum('grandtotal'))
        tot4 = bills.objects.filter(
            cid=cmp1, payornot='openbalance').all().aggregate(t2=Sum('grandtotal'))
        context = {'expence': ex, 'cmp1': cmp1, 'tot': tot, 'tot1': tot1, 'cre': cre, 'op': op, 'bi': bi, 'bi1': bi1,
                   'tot2': tot2, 'tot3': tot3, 'tot4': tot4,'pbl':pbl,'tot6': tot6}
        return render(request, 'app1/accpayables.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def accpayables1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('accpayables')
        ex = expences.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).values('payee').annotate(
            t1=Sum('grandtotal'))
        pbl = purchasebill.objects.filter(cid=cmp1, date__gte=fromdate, date__lte=todate).values('vendor_name').annotate(
            t1=Sum('balance_due'))
        cre = suplrcredit.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).values(
            'supplier').annotate(t1=Sum('creditamount'))
        op = bills.objects.filter(cid=cmp1, payornot='openbalance', paymdate__gte=fromdate,
                                  paymdate__lte=todate).values('payee').annotate(t1=Sum('grandtotal'))
        bi = bills.objects.filter(cid=cmp1, payornot='debit', paymdate__gte=fromdate, paymdate__lte=todate).values(
            'payee').annotate(t1=Sum('grandtotal'))
        bi1 = bills.objects.filter(cid=cmp1, payornot='', paymdate__gte=fromdate, paymdate__lte=todate).values(
            'payee').annotate(t1=Sum('grandtotal'))
        tot = expences.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot6 = purchasebill.objects.filter(cid=cmp1, date__gte=fromdate, date__lte=todate).aggregate(
            t2=Sum('balance_due'))
        tot1 = suplrcredit.objects.filter(cid=cmp1, paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('creditamount'))
        tot2 = bills.objects.filter(cid=cmp1, payornot='debit', paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot3 = bills.objects.filter(cid=cmp1, payornot='', paymdate__gte=fromdate, paymdate__lte=todate).aggregate(
            t2=Sum('grandtotal'))
        tot4 = bills.objects.filter(cid=cmp1, payornot='openbalance', paymdate__gte=fromdate,
                                    paymdate__lte=todate).aggregate(t2=Sum('grandtotal'))
        context = {'expence': ex, 'cmp1': cmp1, 'tot': tot, 'tot1': tot1, 'cre': cre, 'op': op, 'bi': bi, 'bi1': bi1,
                   'tot2': tot2, 'tot3': tot3, 'tot4': tot4,'pbl':pbl,'tot6': tot6}
        return render(request, 'app1/accpayables.html', context)
    except:
        return redirect('accpayables')


def customisereport(request):
    return render(request, 'app1/customisereport.html')


@login_required(login_url='regcomp')
def customisereport(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/customisereport.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def runreport(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        bal = account.balance
        context = {'cmp1': cmp1, 'account': account, 'accbal': bal}
        if account.name == 'Account Receivable(Debtors)':
            invoic = invoice.objects.filter(cid=cmp1)
            creditnote = credit.objects.filter(cid=cmp1)
            paymen = payment.objects.filter(cid=cmp1)
            salesofline = salesrecpts.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'invoic': invoic, 'creditnote': creditnote, 'salesoffline': salesofline,
                       'payment': paymen, 'account': account,
                       'accbal': bal}
        elif account.name == 'Accounts Payable(Creditors)':
            bill = bills.objects.filter(cid=cmp1, payornot='openbalance')
            bill2 = bills.objects.filter(cid=cmp1, payornot='')
            bill3 = bills.objects.filter(cid=cmp1, payornot='debit')
            debit = suplrcredit.objects.filter(cid=cmp1)
            expence = expences.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'bill': bill, 'bill2': bill2, 'billdebit': bill3, 'debit': debit,
                       'expence': expence,
                       'account': account,
                       'accbal': bal}
        elif account.name == 'Input CGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit1': debit,
                       'expence1': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Input SGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state == cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit2': debit,
                       'expence2': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Input IGST':
            deb = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in deb:
                name = i.supplier
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    debit.append(
                        [i.paymdate, i.refno, i.supplier, float(i.taxamount)])
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                name = i.payee
                x = name.split()
                if len(x) == 3:
                    firstname = x[0]
                    lastname = x[1] + ' ' + x[2]
                    supp = supplier.objects.get(
                        firstname=firstname, lastname=lastname, cid=cmp1)
                else:
                    supp = supplier.objects.get(
                        firstname=x[0], lastname=x[1], cid=cmp1)
                if supp.state != cmp1.state:
                    expence.append([i.paymdate, i.refno, (i.payee).replace(
                        u'\xa0', u''), float(i.taxamount)])
            context = {'cmp1': cmp1, 'debit3': debit,
                       'expence3': expence, 'account': account, 'accbal': bal}
        elif account.name == 'Output CGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply == cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount) / 2])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place == cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace == cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic1': invoic, 'creditnote1': creditnote, 'salesrecipt1': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Output SGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply == cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount) / 2])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place == cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace == cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic2': invoic, 'creditnote2': creditnote, 'salesrecipt2': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Output IGST':
            invoi = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoi:
                if i.placosupply != cmp1.state:
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount)])
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote = []
            for i in creditnot:
                if i.place != cmp1.state:
                    creditnote.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt)])
            salesrcpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt = []
            for i in salesrcpt:
                if i.salesplace != cmp1.state:
                    salesrecipt.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount)])
            context = {'cmp1': cmp1, 'invoic3': invoic, 'creditnote3': creditnote, 'salesrecipt3': salesrecipt,
                       'account': account, 'accbal': bal}
        elif account.name == 'Opening Balance Equity':
            inventori = inventory.objects.filter(cid=cmp1)
            account1 = accounts.objects.filter(cid=cmp1)
            context = {'cmp1': cmp1, 'account': account,
                       'inventory': inventori, 'accbal': bal, 'account1': account1}
        elif account.name == 'Ask My Accountant':
            bill = bills.objects.filter(cid=cmp1, payornot='openbalance')
            context = {'cmp1': cmp1, 'account': account,
                       'bill3': bill, 'accbal': account.balance}
        else:
            context = {'cmp1': cmp1, 'account': account,
                       'accbal': account.balance}
            if inventory.objects.filter(invacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(invacnt=account.name, cid=cmp1)
                inventor = []
                inventor1 = []
                for i in invento:
                    inventor.append([i.date, i.cxq])
                    inventor1.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoice5'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote5 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote5.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnote5'] = creditnote5

                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt5 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt5.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesrecipt5'] = salesrecipt5
                expen = expences.objects.filter(cid=cmp1)
                expence = []
                for i in expen:
                    for j in inventor1:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                context['expence6'] = expence
                debi = suplrcredit.objects.filter(cid=cmp1)
                debit = []
                for i in debi:
                    for j in inventor1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                context['debit6'] = debit
                context['inventory1'] = inventor
            else:
                pass
            if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
                invento = inventory.objects.filter(
                    incomeacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                         invotot])
                context['invoice4'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote4 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote4.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote4'] = creditnote4
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt4 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt4.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt4'] = salesrecipt4
            else:
                pass
            if noninventory.objects.filter(income=account.name, cid=cmp1):
                noninvento = noninventory.objects.filter(
                    income=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in noninventor:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                         float(invotot)])
                context['invoice6'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote4 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in noninventor:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote4.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote6'] = creditnote4
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt4 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in noninventor:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt4.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt6'] = salesrecipt4
            else:
                pass
            if inventory.objects.filter(expacnt=account.name, cid=cmp1):
                invento = inventory.objects.filter(expacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    # bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.filter(cid=cmp1)
                invoic = []
                for i in invoc:
                    invotot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                    invoic.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoiceexpacnt'] = invoic
                creditnot = credit.objects.filter(cid=cmp1)
                creditnote5 = []
                for i in creditnot:
                    credtot = 0.0
                    for j in inventor:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    creditnote5.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnoteexpacnt'] = creditnote5
                salesrecpt = salesrecpts.objects.filter(cid=cmp1)
                salesrecipt5 = []
                for i in salesrecpt:
                    saletot = 0.0
                    for j in inventor:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                        except:
                                            pass
                        except:
                            pass
                    salesrecipt5.append(
                        [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesreciptexpacnt'] = salesrecipt5
            else:
                pass
            if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
                noninvento = noninventory.objects.filter(
                    expenseaccount=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                print(noninventor)
                expen = expences.objects.filter(cid=cmp1)
                expence = []
                for i in expen:
                    for j in noninventor:
                        if i.product == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])

                        try:
                            if i.product2 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
                context['expence5'] = expence
                debi = suplrcredit.objects.filter(cid=cmp1)
                debit = []
                for i in debi:
                    for j in noninventor:
                        try:
                            if i.product == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
                context['debit5'] = debit
            else:
                pass
            if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
                salesrecpt = salesrecpts.objects.filter(
                    saledeposit=account.name, cid=cmp1)
                context['salesrecipt7'] = salesrecpt
            else:
                pass
            if payment.objects.filter(depto=account.name, cid=cmp1):
                payment1 = payment.objects.filter(depto=account.name, cid=cmp1)
                context['payment1'] = payment1
            else:
                pass
            if bills.objects.filter(paymacnt=account.name, cid=cmp1):
                bill = bills.objects.filter(paymacnt=account.name, cid=cmp1)
                context['bill1'] = bill
            else:
                pass
        return render(request, 'app1/runreport.html', context)
    except:
        pass


def runreports(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        context = {'cmp1': cmp1, 'account': account, 'accbal': account.balance}
        if inventory.objects.filter(invacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(invacnt=account.name, cid=cmp1)
            inventor = []
            inventor1 = []
            for i in invento:
                inventor.append([i.date, i.cxq])
                inventor1.append([i.name, i.cost])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(j[1]) * float(i.qty), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty4), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoice5'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty1), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product1 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnote5'] = creditnote5

            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor1:
                    try:
                        if i.salepro == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.saleqty), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.salepro == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty2), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty3), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty4), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesrecipt5'] = salesrecipt5
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                for j in inventor1:
                    if i.product == j[0]:
                        totalcost = round(float(i.price) * float(i.qty), 2)
                        expence.append(
                            [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(i.price2) * float(i.qty2), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(i.price3) * float(i.qty3), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(i.price4) * float(i.qty4), 2)
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
            context['expence6'] = expence
            debi = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in debi:
                for j in inventor1:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(i.price2) * float(i.qty2), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(i.price3) * float(i.qty3), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(i.price4) * float(i.qty4), 2)
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                    except:
                        pass
            context['debit6'] = debit
            context['inventory1'] = inventor
        else:
            pass
        if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(
                incomeacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.product == j:
                        invotot += float(i.total)
                    elif bundle.objects.get(name=i.product, cid=cmp1):
                        for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                            if i.product == b:
                                try:
                                    if j == bp[0]:
                                        totalcost = round(
                                            float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[1]:
                                        totalcost = round(
                                            float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[2]:
                                        totalcost = round(
                                            float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                                try:
                                    if j == bp[3]:
                                        totalcost = round(
                                            float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                        invotot += totalcost
                                except:
                                    pass
                    try:
                        if i.product2 == j:
                            invotot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            invotot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            invotot += float(i.total4)
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     invotot])
            context['invoice4'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    try:
                        if i.product == j:
                            credtot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j:
                            credtot += float(i.total1)
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product1 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            credtot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            credtot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote4'] = creditnote4
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    try:
                        if i.salepro == j:
                            saletot += float(i.saaletotal)
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.salepro == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j:
                            saletot += float(i.cattotal2)
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j:
                            saletot += float(i.cattotal3)
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j:
                            saletot += float(i.cattotal4)
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt4'] = salesrecipt4
        else:
            pass
        if noninventory.objects.filter(income=account.name, cid=cmp1):
            noninvento = noninventory.objects.filter(
                income=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in noninventor:
                    try:
                        if i.product == j:
                            invotot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            invotot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            invotot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            invotot += float(i.total4)
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     float(invotot)])
            context['invoice6'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in noninventor:
                    try:
                        if i.product == j:
                            credtot += float(i.total)
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j:
                            credtot += float(i.total1)
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product1 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            credtot += float(i.total2)
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            credtot += float(i.total3)
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.product3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote6'] = creditnote4
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in noninventor:
                    try:
                        if i.salepro == j:
                            saletot += float(i.saaletotal)
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.salepro == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j:
                            saletot += float(i.cattotal2)
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category2 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j:
                            saletot += float(i.cattotal3)
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category3 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j:
                            saletot += float(i.cattotal4)
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                if i.category4 == b:
                                    try:
                                        if j == bp[0]:
                                            totalcost = round(
                                                float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[1]:
                                            totalcost = round(
                                                float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[2]:
                                            totalcost = round(
                                                float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j == bp[3]:
                                            totalcost = round(
                                                float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt6'] = salesrecipt4
        else:
            pass
        if inventory.objects.filter(expacnt=account.name, cid=cmp1):
            invento = inventory.objects.filter(expacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                # bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.filter(cid=cmp1)
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    try:
                        if i.product == j[0]:
                            totalcost = round(float(j[1]) * float(i.qty), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                    try:
                        if i.product4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty4), 2)
                            invotot += totalcost
                        elif bundle.objects.get(name=i.product4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                            invotot += totalcost
                                    except:
                                        pass
                                else:
                                    pass
                    except:
                        pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoiceexpacnt'] = invoic
            creditnot = credit.objects.filter(cid=cmp1)
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    try:
                        if i.product == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product1 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty1), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product1, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product1 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty2), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.product3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.qty3), 2)
                            credtot += totalcost
                        elif bundle.objects.get(name=i.product3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.product3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                            credtot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnoteexpacnt'] = creditnote5
            salesrecpt = salesrecpts.objects.filter(cid=cmp1)
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    try:
                        if i.salepro == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.saleqty), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.salepro, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.salepro == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category2 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty2), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category2, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category2 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category3 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty3), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category3, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category3 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                    try:
                        if i.category4 == j[0]:
                            totalcost = round(
                                float(j[1]) * float(i.catqty4), 2)
                            saletot += totalcost
                        elif bundle.objects.get(name=i.category4, cid=cmp1):
                            for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                if i.category4 == b:
                                    try:
                                        if j[0] == bp[0]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[1]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[2]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                                    try:
                                        if j[0] == bp[3]:
                                            totalcost = round(
                                                float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                            saletot += totalcost
                                    except:
                                        pass
                    except:
                        pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesreciptexpacnt'] = salesrecipt5
        else:
            pass
        if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
            noninvento = noninventory.objects.filter(
                expenseaccount=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.filter(cid=cmp1)
            expence = []
            for i in expen:
                for j in noninventor:
                    if i.product == j:
                        expence.append(
                            [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])

                    try:
                        if i.product2 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                    except:
                        pass
            context['expence5'] = expence
            debi = suplrcredit.objects.filter(cid=cmp1)
            debit = []
            for i in debi:
                for j in noninventor:
                    try:
                        if i.product == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                    except:
                        pass
                    try:
                        if i.product2 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                    except:
                        pass
                    try:
                        if i.product3 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                    except:
                        pass
                    try:
                        if i.product4 == j:
                            debit.append(
                                [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                    except:
                        pass
            context['debit5'] = debit
        else:
            pass
        if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
            salesrecpt = salesrecpts.objects.filter(
                saledeposit=account.name, cid=cmp1)
            context['salesrecipt7'] = salesrecpt
        else:
            pass
        if payment.objects.filter(depto=account.name, cid=cmp1):
            payment1 = payment.objects.filter(depto=account.name, cid=cmp1)
            context['payment1'] = payment1
        else:
            pass
        if bills.objects.filter(paymacnt=account.name, cid=cmp1):
            bill = bills.objects.filter(paymacnt=account.name, cid=cmp1)
            context['bill1'] = bill
        else:
            pass
        return render(request, 'app1/runreportnew.html', context)
    except:
        return redirect('gocoa')


@login_required(login_url='regcomp')
def runreportfiltered(request, accounts1id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        account = accounts1.objects.get(accounts1id=accounts1id, cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
                print(fromdate, todate)
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
                print(fromdate, todate)
        else:
            return redirect('runreport')
        context = {'cmp1': cmp1, 'accbal': account.balance, 'account': account}
        if account.name == 'Account Receivable(Debtors)':
            invoce = []
            invoi = invoice.objects.raw(
                'select * from app1_invoice where (invoicedate between %s and %s)', [fromdate, todate, ])
            total = 0.0
            for i in invoi:
                if i.cid == cmp1:
                    total += float(i.grandtotal)
                    invoce.append(
                        [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.grandtotal)])
            creditnot = []
            creditnote = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                            [fromdate, todate, ])
            for i in creditnote:
                if i.cid == cmp1:
                    creditnot.append(
                        [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.grndtot)])
                    total -= float(i.grndtot)
            payments = []
            paymen = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                         [fromdate, todate, ])
            for i in paymen:
                if i.cid == cmp1:
                    payments.append(
                        [i.paymdate, i.refno, (i.customer).replace(u'\xa0', u''), float(i.amtapply)])
                    total -= float(i.amtapply)
            salesofline = []
            sales = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                            [fromdate, todate, ])
            for i in sales:
                if i.cid == cmp1 and i.offline == 'True':
                    salesofline.append(
                        [i.saledate, i.salerefno, (i.salename).replace(u'\xa0', u''), float(i.salegrandtotal)])
                    total -= float(i.salegrandtotal)
            context = {'cmp1': cmp1, 'account': account, 'invoic': invoce, 'accbal': total, 'creditnote': creditnot,
                       'payment': payments, 'saleoffline': salesofline}
        elif account.name == 'Accounts Payable(Creditors)':
            total = 0.0
            bil = []
            bill = bills.objects.raw(
                'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
            for b in bill:
                if b.cid == cmp1 and b.payornot == 'openbalance':
                    bil.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total + float(b.grandtotal)
            bil2 = []
            bill2 = bills.objects.raw(
                'select * from app1_bills where paymdate between %s and %s', [fromdate, todate, ])
            for b in bill2:
                if b.cid == cmp1 and b.payornot != 'openbalance' and b.payornot != 'debit':
                    bil2.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            bil3 = []
            for b in bill2:
                if b.cid == cmp1 and b.payornot == 'debit':
                    bil3.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            debt = []
            debit = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                            [fromdate, todate, ])
            for b in debit:
                if b.cid == cmp1:
                    debt.append(
                        [b.paymdate, b.refno, (b.supplier).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total - float(b.grandtotal)
            expen = []
            expence = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for b in expence:
                if b.cid == cmp1:
                    expen.append(
                        [b.paymdate, b.refno, (b.payee).replace(u'\xa0', u''), float(b.grandtotal)])
                    total = total + float(b.grandtotal)
            context = {'cmp1': cmp1, 'bill': bil, 'bill2': bil2, 'billdebit': bil3, 'debit': debt, 'expence': expen,
                       'account': account,
                       'accbal': total}
        elif account.name == 'Input CGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total -= float(i.taxamount) / 2
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1])
                    if supp.state == cmp1.state:
                        total += float(i.taxamount) / 2
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit1': debit,
                       'expence1': expence, 'account': account, 'accbal': total}
        elif account.name == 'Input SGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total -= float(i.taxamount) / 2
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount) / 2])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state == cmp1.state:
                        total += float(i.taxamount) / 2
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount) / 2])
            context = {'cmp1': cmp1, 'debit2': debit,
                       'expence2': expence, 'account': account, 'accbal': total}
        elif account.name == 'Input IGST':
            total = 0.0
            deb = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                          [fromdate, todate, ])
            debit = []
            for i in deb:
                if i.cid == cmp1:
                    name = i.supplier
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state != cmp1.state:
                        total -= float(i.taxamount)
                        debit.append(
                            [i.paymdate, i.refno, i.supplier, float(i.taxamount)])
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                if i.cid == cmp1:
                    name = i.payee
                    x = name.split()
                    if len(x) == 3:
                        firstname = x[0]
                        lastname = x[1] + ' ' + x[2]
                        supp = supplier.objects.get(
                            firstname=firstname, lastname=lastname, cid=cmp1)
                    else:
                        supp = supplier.objects.get(
                            firstname=x[0], lastname=x[1], cid=cmp1)
                    if supp.state != cmp1.state:
                        total += float(i.taxamount)
                        expence.append([i.paymdate, i.refno, (i.payee).replace(
                            u'\xa0', u''), float(i.taxamount)])
            context = {'cmp1': cmp1, 'debit3': debit,
                       'expence3': expence, 'account': account, 'accbal': total}
        elif account.name == 'Output CGST':
            total = 0.0
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply == cmp1.state:
                        total += float(i.taxamount) / 2
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(i.taxamount) / 2])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place == cmp1.state:
                        total -= float(i.taxamnt) / 2
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount) / 2
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic1': invoic, 'creditnote1': creditnote, 'salesrecipt1': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Output SGST':
            total = 0.0
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply == cmp1.state:
                        total += float(i.taxamount) / 2
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(i.taxamount) / 2])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place == cmp1.state:
                        total -= float(i.taxamnt) / 2
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt) / 2])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount) / 2
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount) / 2])
            context = {'cmp1': cmp1, 'invoic2': invoic, 'creditnote2': creditnote, 'salesrecipt2': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Output IGST':
            invoi = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoi:
                if i.cid == cmp1:
                    if i.placosupply != cmp1.state:
                        total += float(i.taxamount)
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), float(i.taxamount)])
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote = []
            for i in creditnot:
                if i.cid == cmp1:
                    if i.place != cmp1.state:
                        total -= float(i.taxamnt)
                        creditnote.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(i.taxamnt)])
            salesrcpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                [fromdate, todate, ])
            salesrecipt = []
            for i in salesrcpt:
                if i.cid == cmp1:
                    if i.salesplace == cmp1.state:
                        total += float(i.saletaxamount)
                        salesrecipt.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(i.saletaxamount)])
            context = {'cmp1': cmp1, 'invoic3': invoic, 'creditnote3': creditnote, 'salesrecipt3': salesrecipt,
                       'account': account, 'accbal': total}
        elif account.name == 'Opening Balance Equity':
            total = 0.0
            inventor = []
            inventori = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                              [fromdate, todate, ])
            for inv in inventori:
                if inv.cid == cmp1:
                    inventor.append([inv.date, inv.cxq])
                    total += float(inv.cxq)
            account1 = []
            accoun = accounts.objects.raw('select * from app1_accounts where asof between %s and %s',
                                          [fromdate, todate, ])
            for i in accoun:
                if i.cid == cmp1:
                    account1.append([i.asof, i.balfordisp])
                    total += float(i.balfordisp)
            context = {'cmp1': cmp1, 'account': account,
                       'inventory': inventor, 'accbal': total, 'account1': account1}
        elif account.name == 'Ask My Accountant':
            total = 0.0
            bil = []
            bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                     [fromdate, todate, ])
            for i in bill:
                if i.cid == cmp1 and i.payornot == 'openbalance':
                    total += float(i.grandtotal)
                    bil.append([i.paymdate, i.refno, i.payee, i.grandtotal])
            context = {'cmp1': cmp1, 'account': account,
                       'bill3': bil, 'accbal': total}
        else:
            context = {'cmp1': cmp1, 'account': account}
            if inventory.objects.filter(invacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                                [fromdate, todate, ])
                inventor = []
                inventor1 = []
                for i in invento:
                    if i.cid == cmp1 and i.invacnt == account.name:
                        total += i.cxq
                        inventor.append([i.date, i.cxq])
                        inventor1.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    invotot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoice5'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote5 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    credtot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote5.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnote5'] = creditnote5
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt5 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor1:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    saletot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt5.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesrecipt5'] = salesrecipt5
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                expence = []
                for i in expen:
                    for j in inventor1:
                        if i.cid == cmp1:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    total += totalcost
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                context['expence6'] = expence
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])

                debit = []
                for i in debi:
                    for j in inventor1:
                        if i.cid == cmp1:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(i.price) * float(i.qty), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(i.price2) * float(i.qty2), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(i.price3) * float(i.qty3), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(i.price4) * float(i.qty4), 2)
                                    total -= totalcost
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                            except:
                                pass
                context['debit6'] = debit
                context['inventory1'] = inventor
                context['accbal'] = total
            else:
                pass
            if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(
                    incomeacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j:
                                    invotot += float(i.total)
                                    total += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    invotot += float(i.total2)
                                    total += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    invotot += float(i.total3)
                                    total += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    invotot += float(i.total4)
                                    total += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             invotot])
                context['invoice4'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote4 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j:
                                    credtot += float(i.total)
                                    total -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    credtot += float(i.total1)
                                    total -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    credtot += float(i.total2)
                                    total -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    credtot += float(i.total3)
                                    total -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote4.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote4'] = creditnote4
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt4 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor:
                            try:
                                if i.salepro == j:
                                    saletot += float(i.saaletotal)
                                    total += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    saletot += float(i.cattotal2)
                                    total += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    saletot += float(i.cattotal3)
                                    total += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    saletot += float(i.cattotal4)
                                    total += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt4.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt4'] = salesrecipt4
                context['accbal'] = total
            else:
                pass
            if noninventory.objects.filter(income=account.name, cid=cmp1):
                total = 0.0
                noninvento = noninventory.objects.filter(
                    income=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                    bundlprice.append([i.price1, i.price2, i.price3, i.price4])
                invoc = invoice.objects.raw(
                    'select * from app1_invoice where invoicedate between %s and %s', [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in noninventor:
                            try:
                                if i.product == j:
                                    invotot += float(i.total)
                                    total += float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    invotot += float(i.total2)
                                    total += float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    invotot += float(i.total3)
                                    total += float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    invotot += float(i.total4)
                                    total += float(i.total4)
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                             float(invotot)])
                context['invoice6'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote4 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in noninventor:
                            try:
                                if i.product == j:
                                    credtot += float(i.total)
                                    total -= float(i.total)
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j:
                                    credtot += float(i.total1)
                                    total -= float(i.total1)
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product1 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    credtot += float(i.total2)
                                    total -= float(i.total2)
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    credtot += float(i.total3)
                                    total -= float(i.total3)
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.product3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote4.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
                context['creditnote6'] = creditnote4
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt4 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in noninventor:
                            try:
                                if i.salepro == j:
                                    saletot += float(i.saaletotal)
                                    total += float(i.saaletotal)
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.salepro == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j:
                                    saletot += float(i.cattotal2)
                                    total += float(i.cattotal2)
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category2 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j:
                                    saletot += float(i.cattotal3)
                                    total += float(i.cattotal3)
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category3 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j:
                                    saletot += float(i.cattotal4)
                                    total += float(i.cattotal4)
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                        if i.category4 == b:
                                            try:
                                                if j == bp[0]:
                                                    totalcost = round(
                                                        float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[1]:
                                                    totalcost = round(
                                                        float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[2]:
                                                    totalcost = round(
                                                        float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j == bp[3]:
                                                    totalcost = round(
                                                        float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt4.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
                context['salesrecipt6'] = salesrecipt4
                context['accbal'] = total
            else:
                pass
            if inventory.objects.filter(expacnt=account.name, cid=cmp1):
                total = 0.0
                invento = inventory.objects.filter(
                    expacnt=account.name, cid=cmp1)
                inventor = []
                for i in invento:
                    inventor.append([i.name, i.cost])
                bundl = bundle.objects.filter(cid=cmp1)
                bundles = []
                bundlpro = []
                bundlqty = []
                bundlprice = []
                for i in bundl:
                    bundles.append(i.name)
                    bundlpro.append(
                        [i.product1, i.product2, i.product3, i.product4])
                    bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                            [fromdate, todate, ])
                invoic = []
                for i in invoc:
                    if i.cid == cmp1:
                        invotot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                            try:
                                if i.product4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty4), 2)
                                    invotot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.product4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                    invotot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                        else:
                                            pass
                            except:
                                pass
                        invoic.append(
                            [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
                context['invoiceexp'] = invoic
                creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                               [fromdate, todate, ])
                creditnote5 = []
                for i in creditnot:
                    if i.cid == cmp1:
                        credtot = 0.0
                        for j in inventor:
                            try:
                                if i.product == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product1 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty1), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product1, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product1 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty2), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.product3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.qty3), 2)
                                    credtot += totalcost
                                    total -= totalcost
                                elif bundle.objects.get(name=i.product3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.product3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                    credtot += totalcost
                                                    total -= totalcost
                                            except:
                                                pass
                            except:
                                pass
                        creditnote5.append(
                            [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
                context['creditnoteexp'] = creditnote5
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                salesrecipt5 = []
                for i in salesrecpt:
                    if i.cid == cmp1:
                        saletot = 0.0
                        for j in inventor:
                            try:
                                if i.salepro == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.saleqty), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.salepro == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category2 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty2), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category2, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category2 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category3 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty3), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category3, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category3 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                            try:
                                if i.category4 == j[0]:
                                    totalcost = round(
                                        float(j[1]) * float(i.catqty4), 2)
                                    saletot += totalcost
                                    total += totalcost
                                elif bundle.objects.get(name=i.category4, cid=cmp1):
                                    for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                        if i.category4 == b:
                                            try:
                                                if j[0] == bp[0]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[1]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[2]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                                            try:
                                                if j[0] == bp[3]:
                                                    totalcost = round(
                                                        float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                    saletot += totalcost
                                                    total += totalcost
                                            except:
                                                pass
                            except:
                                pass
                        salesrecipt5.append(
                            [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
                context['salesreciptexp'] = salesrecipt5
                context['accbal'] = total
            else:
                pass
            if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
                total = 0.0
                noninvento = noninventory.objects.filter(
                    expenseaccount=account.name, cid=cmp1)
                noninventor = []
                for i in noninvento:
                    noninventor.append(i.name)
                expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                             [fromdate, todate, ])
                expence = []
                for i in expen:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    total += float(i.total)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    total += float(i.total2)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    total += float(i.total3)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    total += float(i.total4)
                                    expence.append(
                                        [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                            except:
                                pass
                context['expence5'] = expence
                debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                               [fromdate, todate, ])
                debit = []
                for i in debi:
                    for j in noninventor:
                        if i.cid == cmp1:
                            try:
                                if i.product == j:
                                    total -= float(i.total)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                            except:
                                pass
                            try:
                                if i.product2 == j:
                                    total -= float(i.total2)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                            except:
                                pass
                            try:
                                if i.product3 == j:
                                    total -= float(i.total3)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                            except:
                                pass
                            try:
                                if i.product4 == j:
                                    total -= float(i.total4)
                                    debit.append(
                                        [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                            except:
                                pass
                context['debit5'] = debit
                context['accbal'] = total
            else:
                pass
            if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
                total = 0.0
                sale = []
                salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                     [fromdate, todate, ])
                for s in salesrecpt:
                    if s.cid == cmp1:
                        sale.append(
                            [s.saledate, s.saleno, s.salename, s.salegrandtotal])
                        total += float(s.salegrandtotal)
                context['salesrecipt7'] = sale
                context['accbal'] = total
            else:
                pass
            if payment.objects.filter(depto=account.name, cid=cmp1):
                total = 0.0
                payman = []
                payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                               [fromdate, todate, ])
                for s in payment1:
                    if s.cid == cmp1:
                        payman.append(
                            [s.paymdate, s.refno, s.customer, s.amtapply])
                        total += float(s.amtapply)
                context['payment1'] = payman
                context['accbal'] = total
            else:
                pass
            if bills.objects.filter(paymacnt=account.name, cid=cmp1):
                bil = []
                total = 0.0
                bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                         [fromdate, todate, ])
                for s in bill:
                    if s.cid == cmp1 and s.payornot == 'openbalance' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 + float(s.grandtotal)])
                        total += float(s.grandtotal)
                    elif s.cid == cmp1 and s.payornot == 'debit' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 - float(s.grandtotal)])
                        total -= float(s.grandtotal)
                    elif s.cid == cmp1 and s.payornot != 'debit' and s.payornot != 'openbalance' and s.paymacnt == account.name:
                        bil.append(
                            [s.paymdate, s.payee, 0 - float(s.grandtotal)])
                        total -= float(s.grandtotal)
                context['accbal'] = total
                context['bill1'] = bil
            else:
                pass
        return render(request, 'app1/runreportfiltered.html', context)
    except:
        return redirect('runreport')


@login_required(login_url='regcomp')
def runreportfilterednew(request, accountsid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST['reportperiod']
        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['fper']
            todate = request.POST['tper']
        elif filmeth == 'This month':
            fromdate = toda.strftime("%Y-%m-01")
            todate = toda.strftime("%Y-%m-31")
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            return redirect('runreports')
        account = accounts.objects.get(accountsid=accountsid, cid=cmp1)
        accoun1 = accounts.objects.raw(
            'select * from app1_accounts where asof between %s and %s', [fromdate, todate, ])
        total = 0.0
        account1 = []
        for i in accoun1:
            if i.cid == cmp1 and i.name == account.name:
                account1.append([i.asof, i.balfordisp])
                total += float(i.balfordisp)
        context = {'cmp1': cmp1, 'account': account,
                   'accbal': total, 'account1': account1}
        if inventory.objects.filter(invacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.raw('select * from app1_inventory where date between %s and %s',
                                            [fromdate, todate, ])
            inventor = []
            inventor1 = []
            for i in invento:
                if i.cid == cmp1 and i.invacnt == account.name:
                    total += i.cxq
                    inventor.append([i.date, i.cxq])
                    inventor1.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoice5'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnote5'] = creditnote5
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesrecipt5'] = salesrecipt5
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                for j in inventor1:
                    if i.cid == cmp1:
                        if i.product == j[0]:
                            totalcost = round(float(i.price) * float(i.qty), 2)
                            total += totalcost
                            expence.append(
                                [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])

                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                total += totalcost
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
            context['expence6'] = expence
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])

            debit = []
            for i in debi:
                for j in inventor1:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(i.price) * float(i.qty), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(i.price2) * float(i.qty2), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(i.price3) * float(i.qty3), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(i.price4) * float(i.qty4), 2)
                                total -= totalcost
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), totalcost])
                        except:
                            pass
            context['debit6'] = debit
            context['inventory1'] = inventor
            context['accbal'] = total
        else:
            pass
        if inventory.objects.filter(incomeacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.filter(
                incomeacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                                total += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                                total += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                                total += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                                total += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     invotot])
            context['invoice4'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                                total -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                                total -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                                total -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                                total -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote4'] = creditnote4
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                                total += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                                total += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                                total += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                                total += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt4'] = salesrecipt4
            context['accbal'] = total
        else:
            pass
        if noninventory.objects.filter(income=account.name, cid=cmp1):
            total = 0.0
            noninvento = noninventory.objects.filter(
                income=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
                bundlprice.append([i.price1, i.price2, i.price3, i.price4])
            invoc = invoice.objects.raw(
                'select * from app1_invoice where invoicedate between %s and %s', [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                invotot += float(i.total)
                                total += float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                invotot += float(i.total2)
                                total += float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                invotot += float(i.total3)
                                total += float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                invotot += float(i.total4)
                                total += float(i.total4)
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''),
                     float(invotot)])
            context['invoice6'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote4 = []
            for i in creditnot:
                credtot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                credtot += float(i.total)
                                total -= float(i.total)
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j:
                                credtot += float(i.total1)
                                total -= float(i.total1)
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product1 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                credtot += float(i.total2)
                                total -= float(i.total2)
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                credtot += float(i.total3)
                                total -= float(i.total3)
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.product3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote4.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), float(credtot)])
            context['creditnote6'] = creditnote4
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt4 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j:
                                saletot += float(i.saaletotal)
                                total += float(i.saaletotal)
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.salepro == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j:
                                saletot += float(i.cattotal2)
                                total += float(i.cattotal2)
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category2 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j:
                                saletot += float(i.cattotal3)
                                total += float(i.cattotal3)
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category3 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j:
                                saletot += float(i.cattotal4)
                                total += float(i.cattotal4)
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq, bprice) in zip(bundles, bundlpro, bundlqty, bundlprice):
                                    if i.category4 == b:
                                        try:
                                            if j == bp[0]:
                                                totalcost = round(
                                                    float(bprice[0]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[1]:
                                                totalcost = round(
                                                    float(bprice[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[2]:
                                                totalcost = round(
                                                    float(bprice[2]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j == bp[3]:
                                                totalcost = round(
                                                    float(bprice[3]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt4.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), float(saletot)])
            context['salesrecipt6'] = salesrecipt4
            context['accbal'] = total
        else:
            pass
        if inventory.objects.filter(expacnt=account.name, cid=cmp1):
            total = 0.0
            invento = inventory.objects.filter(
                expacnt=account.name, cid=cmp1)
            inventor = []
            for i in invento:
                inventor.append([i.name, i.cost])
            bundl = bundle.objects.filter(cid=cmp1)
            bundles = []
            bundlpro = []
            bundlqty = []
            bundlprice = []
            for i in bundl:
                bundles.append(i.name)
                bundlpro.append(
                    [i.product1, i.product2, i.product3, i.product4])
                bundlqty.append([i.qty1, i.qty2, i.qty3, i.qty4])
            invoc = invoice.objects.raw('select * from app1_invoice where invoicedate between %s and %s',
                                        [fromdate, todate, ])
            invoic = []
            for i in invoc:
                invotot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(float(j[1]) * float(i.qty), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                        try:
                            if i.product4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty4), 2)
                                invotot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.product4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[0]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[1]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[2]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty4) * float(bq[3]), 2)
                                                invotot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                    else:
                                        pass
                        except:
                            pass
                invoic.append(
                    [i.invoicedate, i.invoiceno, (i.customername).replace(u'\xa0', u''), invotot])
            context['invoiceexp'] = invoic
            creditnot = credit.objects.raw('select * from app1_credit where creditdate between %s and %s',
                                           [fromdate, todate, ])
            creditnote5 = []
            for i in creditnot:
                credtot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product1 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty1), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product1, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product1 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty1) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty2), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty2) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.product3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.qty3), 2)
                                credtot += totalcost
                                total -= totalcost
                            elif bundle.objects.get(name=i.product3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.product3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[0]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[1]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[2]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.qty3) * float(bq[3]), 2)
                                                credtot += totalcost
                                                total -= totalcost
                                        except:
                                            pass
                        except:
                            pass
                creditnote5.append(
                    [i.creditdate, i.creditno, (i.customer).replace(u'\xa0', u''), credtot])
            context['creditnoteexp'] = creditnote5
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            salesrecipt5 = []
            for i in salesrecpt:
                saletot = 0.0
                for j in inventor:
                    if i.cid == cmp1:
                        try:
                            if i.salepro == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.saleqty), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.salepro, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.salepro == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.saleqty) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category2 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty2), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category2, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category2 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty2) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category3 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty3), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category3, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category3 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty3) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                        try:
                            if i.category4 == j[0]:
                                totalcost = round(
                                    float(j[1]) * float(i.catqty4), 2)
                                saletot += totalcost
                                total += totalcost
                            elif bundle.objects.get(name=i.category4, cid=cmp1):
                                for (b, bp, bq) in zip(bundles, bundlpro, bundlqty):
                                    if i.category4 == b:
                                        try:
                                            if j[0] == bp[0]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[0]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[1]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[1]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[2]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[2]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                                        try:
                                            if j[0] == bp[3]:
                                                totalcost = round(
                                                    float(j[1]) * float(i.catqty4) * float(bq[3]), 2)
                                                saletot += totalcost
                                                total += totalcost
                                        except:
                                            pass
                        except:
                            pass
                salesrecipt5.append(
                    [i.saledate, i.saleno, (i.salename).replace(u'\xa0', u''), saletot])
            context['salesreciptexp'] = salesrecipt5
            context['accbal'] = total
        else:
            pass
        if noninventory.objects.filter(expenseaccount=account.name, cid=cmp1):
            total = 0.0
            noninvento = noninventory.objects.filter(
                expenseaccount=account.name, cid=cmp1)
            noninventor = []
            for i in noninvento:
                noninventor.append(i.name)
            expen = expences.objects.raw('select * from app1_expences where paymdate between %s and %s',
                                         [fromdate, todate, ])
            expence = []
            for i in expen:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                total += float(i.total)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                total += float(i.total2)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                total += float(i.total3)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                total += float(i.total4)
                                expence.append(
                                    [i.paymdate, i.refno, (i.payee).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
            context['expence5'] = expence
            debi = suplrcredit.objects.raw('select * from app1_suplrcredit where paymdate between %s and %s',
                                           [fromdate, todate, ])

            debit = []
            for i in debi:
                for j in noninventor:
                    if i.cid == cmp1:
                        try:
                            if i.product == j:
                                total -= float(i.total)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total)])
                        except:
                            pass
                        try:
                            if i.product2 == j:
                                total -= float(i.total2)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total2)])
                        except:
                            pass
                        try:
                            if i.product3 == j:
                                total -= float(i.total3)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total3)])
                        except:
                            pass
                        try:
                            if i.product4 == j:
                                total -= float(i.total4)
                                debit.append(
                                    [i.paymdate, i.refno, (i.supplier).replace(u'\xa0', u''), float(i.total4)])
                        except:
                            pass
            context['debit5'] = debit
        else:
            pass
        total = 0.0
        if account.cid == cmp1:
            total += float(account.balfordisp)
        else:
            pass
        if salesrecpts.objects.filter(saledeposit=account.name, cid=cmp1):
            sale = []
            salesrecpt = salesrecpts.objects.raw('select * from app1_salesrecpts where saledate between %s and %s',
                                                 [fromdate, todate, ])
            for s in salesrecpt:
                if s.cid == cmp1:
                    sale.append(
                        [s.saledate, s.saleno, s.salename, s.salegrandtotal])
                    total += float(s.salegrandtotal)
                    print(s.salegrandtotal)
            context['salesrecipt7'] = sale
            context['accbal'] = total
        else:
            pass
        if payment.objects.filter(depto=account.name, cid=cmp1):
            payman = []
            payment1 = payment.objects.raw('select * from app1_payment where paymdate between %s and %s',
                                           [fromdate, todate, ])
            for s in payment1:
                if s.cid == cmp1:
                    payman.append(
                        [s.paymdate, s.refno, s.customer, s.amtapply])
                    total += float(s.amtapply)
                    print(s.amtapply)
            context['payment1'] = payman
            context['accbal'] = total
        else:
            pass
        if bills.objects.filter(paymacnt=account.name, cid=cmp1):
            bil = []
            total = 0.0
            bill = bills.objects.raw('select * from app1_bills where paymdate between %s and %s',
                                     [fromdate, todate, ])
            for s in bill:
                if s.cid == cmp1 and s.payornot == 'openbalance' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 + float(s.grandtotal)])
                    total += float(s.grandtotal)
                elif s.cid == cmp1 and s.payornot == 'debit' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 - float(s.grandtotal)])
                    total -= float(s.grandtotal)
                elif s.cid == cmp1 and s.payornot != 'debit' and s.payornot != 'openbalance' and s.paymacnt == account.name:
                    bil.append([s.paymdate, s.payee, 0 - float(s.grandtotal)])
                    total -= float(s.grandtotal)
            context['accbal'] = total
            context['bill1'] = bil
        else:
            pass
        return render(request, 'app1/runreportfilterednew.html', context)
    except:
        return redirect('runreport')


@login_required(login_url='regcomp')
def cashposition(request):
    try:
        label_1 = []
        data_1 = []
        cmp1 = company.objects.get(id=request.session['uid'])
        cashpo = accounts.objects.filter(
            detype='Cash and Cash Equivalents', cid=cmp1)
        balance = accounts.objects.order_by('balance')[:10]
        for bala in balance:
            if bala.cid == cmp1:
                label_1.append(bala.name)
                data_1.append(bala.balance)
        context = {'cmp1': cmp1,
                   'cashpo': cashpo,
                   'label_1': label_1,
                   'data_1': data_1}
        return render(request, 'app1/cashposition.html', context)
    except:
        return redirect('godash')

@login_required(login_url='regcomp')
def editaccounts(request):
    try:
        user1 = User.objects.get(id=request.session["uid"])
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'users': user1, 'cmp1': cmp1}
        return render(request, 'app1/accountssettings.html', context)
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def updateaccounts(request):
    try:
        user = User.objects.get(id=request.session["uid"])
        comp = company.objects.get(id=user.id)

        user.first_name = request.POST["first_name"]
        user.last_name = request.POST["last_name"]
        user.email = request.POST["email"]
        p1 = request.POST["newpassword"]
        p2 = request.POST["newpassword1"]

        comp.cname = request.POST["cname"]
        comp.caddress = request.POST["caddress"]
        comp.city = request.POST["city"]
        comp.state = request.POST["state"]
        comp.pincode = request.POST["pincode"]
        comp.cemail = request.POST["cemail"]
        comp.phone = request.POST["phone"]
        comp.bname = request.POST["bname"]
        comp.industry = request.POST["industry"]
        comp.ctype = request.POST["ctype"]
        try:
            img1 = request.FILES["img1"]
            comp.cimg = img1
        except:
            img2 = request.POST["img2"]
            comp.cimg = img2

        comp.save()
        user.save()

        if p1 == p2:
            if p1 != "":
                user.set_password(p1)
                user.save()
                logout(request)
                return redirect('/app1/go')
        elif p1 == "":
            return redirect('/app1/godash')

        return redirect('/app1/godash')
    except:
        return redirect('godash')


@login_required(login_url='regcomp')
def gobillingandsub(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/billingandsubscription.html', {'cmp1': cmp1})


@login_required(login_url='regcomp')
def goaccountexpense(request):
    cmp1 = company.objects.get(id=request.session['uid'])

    return render(request, 'app1/accountexpense.html', {'cmp1': cmp1})





@login_required(login_url='regcomp')
def goaccountsales(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    return render(request, 'app1/accountsales.html', {'cmp1': cmp1})

@login_required(login_url='regcomp')
def customstyle(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.filter(cid=cmp1)
        return render(request, 'app1/customstyle.html', {'newstyle': newstyl, 'cmp1': cmp1})
    except:
        return redirect('godash')

@login_required(login_url='regcomp')
def newstyle(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/newstyle.html', {'cmp1': cmp1})
    except:
        return redirect('customstyle')

@login_required(login_url='regcomp')
def addnewstyle(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            name = request.POST['name']
            template = request.POST['template']
            pcolour = request.POST['pcolour']
            scolour = request.POST['scolour']
            fonts = request.POST['fonts']
            selected = request.POST.get('selected', ' ')
            newstyl = customize(name=name, template=template, pcolour=pcolour, scolour=scolour, fonts=fonts, selected=selected, cid=cmp1)
            newstyl.save()
            newsty = customize.objects.filter(cid=cmp1)
            for i in newsty:
                if i.selected == 'selected' and i.name != request.POST['name']:
                    name = i.name
                    newsty1 = customize.objects.get(name=name, cid=cmp1)
                    newsty1.selected = ' '
                    newsty1.save()
                else:
                    pass
            return redirect('customstyle')
        else:
            return redirect('customstyle')
    except:
        messages.info(request, 'something went wrong.')
        return redirect('newstyle')

@login_required(login_url='regcomp')
def editstyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
        return render(request, 'app1/editstyle.html', {'cmp1': cmp1, 'newstyle': newstyl})
    except:
        return redirect('customstyle')


@login_required(login_url='regcomp')
def updatestyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
            newstyl.name = request.POST.get('name')
            newstyl.template = request.POST.get('template')
            newstyl.pcolour = request.POST.get('pcolour')
            newstyl.scolour = request.POST.get('scolour')
            newstyl.fonts = request.POST.get('fonts')
            newstyl.selected = request.POST.get('selected', ' ')
            newstyl.save()
            newsty = customize.objects.filter(cid=cmp1)
            for i in newsty:
                if i.selected == 'selected' and i.name != newstyl.name:
                    name = i.name
                    newst = customize.objects.get(name=name, cid=cmp1)
                    newst.selected = ' '
                    newst.save()
                else:
                    pass
            return redirect('customstyle')
        else:
            return redirect('customstyle')
    except:
        return redirect('customstyle')

@login_required(login_url='regcomp')
def deletestyle(request, customizeid):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        newstyl = customize.objects.get(customizeid=customizeid, cid=cmp1)
        newstyl.delete()
        return redirect('customstyle')
    except:
        return redirect('customstyle')




# Ananthakrishnan


@login_required(login_url='regcomp')
def cust_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    cust = customer.objects.get(customerid=id,cid=cmp1)

    if request.method == 'POST':
        
        if len(request.FILES) != 0:
           
            if cust.file != "default.jpg":
                 os.remove(cust.file.path)
                
            cust.file=request.FILES['file']
        
        cust.save()
        return redirect('customer_profile',id)
      




@login_required(login_url='regcomp')
def gosearch(request):
    if request.method == "POST":
        cmp1 = company.objects.get(id=request.session["uid"])
        search = request.POST['search']
        cloumn = request.POST['type']
        

        
        

        if cloumn == '1' or search  == '':
            return redirect('gocustomers')    

        else :
            if cloumn == '2':
                custo = customer.objects.filter(cid=cmp1,firstname=search).all()
                context = {'customers': custo, 'cmp1': cmp1}
                return render(request, 'app1/customers.html', context)
            

   
    else:
        return redirect('gocustomers')

    

@login_required(login_url='regcomp')
def gocustomers1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.filter(cid=cmp1,status='Active').all()
        context = {'customers': custo, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('godash')



@login_required(login_url='regcomp')
def gocustomers2(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        custo = customer.objects.filter(cid=cmp1,status='Inactive').all()
        context = {'customers': custo, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('godash')


def gstverification(request):

    url = "https://www.knowyourgst.com/developers/gstincall/"
    querystring = {"gstin":"24AABCU9603R1ZT"}
    headers = {
        'passthrough': "YXNkZjEyMzQ1NjYxODM3NzE4NjM",
        }
    res = requests.request("GET", url, headers=headers, params=querystring).json()
    print(res)
    
    
    return render(request,'app1/addcust.html',{'response':res})




def customer_profile(request,id):
    cmp1 = company.objects.get(id=request.session["uid"])
    custo = customer.objects.get(customerid=id, cid=cmp1)
    fn =custo.firstname
    ln = custo.lastname
    su = fn+ ' ' +ln
    toda = date.today()
    tod = toda.strftime("%Y-%m-%d")
    to = toda.strftime("%d-%m-%Y")
    inv = invoice.objects.filter(cid=cmp1,customername=su,status='Approved',invoicedate=tod)

    pay = payment.objects.filter(cid=cmp1,customer=su,paymdate=tod)

    preamount =0
    prepayment= 0
    prebalance=0
    prev_balance = cust_statment.objects.filter(customer=su,Date__lt=tod)
    for j in prev_balance:
        if j.Amount:
            preamount += j.Amount

        if j.Payments:
            prepayment += j.Payments
    

    prebalance = preamount-prepayment
    print(prebalance)


    statment = cust_statment.objects.filter(customer=su,Date=tod)
    bal=0
    if prebalance !=0:
        bal=prebalance
        


    for i in statment:
        if i.Transactions =="Invoice" or "Customer Opening Balance":
            if i.Amount:
                i.Balance = bal + i.Amount
                bal = i.Balance
        if i.Transactions =="Payment Received":
            i.Balance = bal-i.Payments
            

        i.save() 
         
        


    invoiced=0
    sum=0
    sum2=0
    re=0
    for i in inv:
        if i.baldue:
            sum+=i.baldue
        if i.grandtotal:
            invoiced += i.grandtotal  

    for i in pay:
        if i.amtcredit:
            sum2+=i.amtcredit 
        if i.amtapply:
           re+=i.amtapply
    
    resum = 0
    invo2= invoice.objects.filter(cid=cmp1,customername=su,status='Approved')
    for i in invo2:
        if i.baldue:
            resum +=i.baldue
         






    baldue=invoiced+prebalance-re
    invs = invoice.objects.filter(cid=cmp1,customername=su,).all() 
    payme = payment.objects.filter(cid=cmp1,customer=su,).all()  
    est1 = estimate.objects.filter(cid=cmp1,customer=su,).all()   
    sel1 = salesorder.objects.filter(cid=cmp1,salename=su,).all() 
    context = {'customer': custo,
                'cmp1': cmp1,
                'inv':inv,
                'sum':sum,
                'sum2':sum2,
                'invoiced':invoiced,
                'tod':tod,
                're':re,
                'pay':pay,
                'invs':invs,
                'payme':payme,
                'est1':est1,
                'sel1':sel1,
                'statment':statment,
                'baldue':baldue,
                'resum':resum,
                'bal_amount':prebalance,
                'tod':to,

                
     }
    return render(request, 'app1/customer_view.html', context)



def update_opening_balance(request,id):
    
    if request.method == 'POST':
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        cust = customer.objects.get(customerid=id,cid=cmp1)

        if cust.opening_balance == "":

            cust.opening_balance = request.POST['openbalance']
            cust.opening_balance_due = request.POST['openbalance']
            cust.date = tod
            cust.save()

            if cust.opening_balance.opening_balance != "":

                add_cust_stat=cust_statment(

                customer =  cust.firstname +" "+  cust.lastname,

                cid  = cmp1,

                    

                Date = tod,

                Transactions="Customer Opening Balance",

                Amount=  cust.opening_balance,

                )


                add_cust_stat.save()

        if cust.opening_balance != "":
            temp = request.POST['openbalance']
            previous = cust.opening_balance
            cust.opening_balance = cust.opening_balance + float(temp)
            cust.opening_balance_due = cust.opening_balance_due +float(temp)
            cust.save()
            update_custstatment = cust_statment.objects.get(customer =  cust.firstname +" "+  cust.lastname,cid = cmp1,Transactions="Customer Opening Balance")
            update_custstatment.Amount =  request.POST['openbalance']
            update_custstatment.Balance =  request.POST['openbalance']
            update_custstatment.save()
        return redirect('customer_profile',id)

    return redirect('customer_profile',id)






def search_resept(request,id):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        
        

        fst =  request.POST['fd']
        lst = request.POST['ld']
        print(fst)
        print(lst)
        
        custo = customer.objects.get(customerid=id, cid=cmp1)
        fn =custo.firstname
        ln = custo.lastname
        su = fn+ ' ' +ln
        invoiced=0
        sum=0
        sum2=0
        re=0
        
        inv = invoice.objects.values().filter(cid=cmp1,customername=su,status='Approved',invoicedate__gte=fst,invoicedate__lte=lst)
        inv2 =invoice.objects.filter(cid=cmp1,customername=su,status='Approved',invoicedate__gte=fst,invoicedate__lte=lst)
        for i in  inv2:
            if i.baldue:
                sum+=i.baldue
            if i.grandtotal:
                invoiced += i.grandtotal  
          
        pay = payment.objects.values().filter(cid=cmp1,customer=su,paymdate__gte=fst,paymdate__lte=lst,)
        pay2 = payment.objects.filter(cid=cmp1,customer=su,paymdate__gte=fst,paymdate__lte=lst,)
        for i in pay2:
            if i.amtcredit:
                sum2+=i.amtcredit
            if i.amtapply:
                re+=i.amtapply



        preamount =0
        prepayment= 0
        prebalance=0
        prev_balance = cust_statment.objects.filter(customer=su,Date__lt=fst)
        for j in prev_balance:
            if j.Amount:
                preamount += j.Amount

            if j.Payments:
                prepayment += j.Payments
    

        prebalance = preamount-prepayment
        print(prebalance)

        currentamt =0 
        current = cust_statment.objects.filter(customer=su,Date__gte=fst,Date__lte=lst)

        for j in current:
            if j.Amount:
                currentamt += j.Amount

        
        baldue=currentamt+prebalance-re 
        statment2 = cust_statment.objects.all()
        for j in statment2:
            if j.Transactions =="Invoice":
                j.Details2 = "INV-"+" "+str(j.inv.invoiceno) +" "+ "due on" +" "+ str(j.inv.duedate)
            if j.Transactions =="Payment Received":
                 j.Details2 = "₹"+ str(j.Payments) +" "+"payment"
                      
            j.save()          
       
        statment = cust_statment.objects.filter(customer=su,Date__gte=fst,Date__lte=lst)


        bal=0
        if prebalance !=0:
            bal=prebalance
        
        for i in statment:
            if i.Transactions =="Invoice" or "Customer Opening Balance":
                if i.Amount:
                    i.Balance = i.Amount + bal
            
                    bal = i.Balance
             
            if i.Transactions =="Payment Received":
                i.Balance = bal - i.Payments
                bal=i.Balance
  
            i.save() 
             
        
        stat = cust_statment.objects.values().filter(customer=su,Date__gte=fst,Date__lte=lst,)
        x_data = list(inv)
        ct= list(pay)
        st=list(stat)
            
            
        return JsonResponse({"status":" not",
        "invitem":x_data,"ct":ct ,
        "invoiced":currentamt,'re':re,'sum':sum,
        "df":fst,"dl":lst,"st":st,"baldue":baldue,
        'opening':prebalance,
        'fst':fst,

        
        })


def goestimate(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    est1 = estimate.objects.filter(cid=cmp1).all()

    context = {
        'est1' :est1,
        'cmp1': cmp1

    }
    return render(request,'app1/goestimate.html',context)

@login_required(login_url='regcomp')
def estindex2(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        customers = customer.objects.filter(cid=cmp1).all()
        est1 = estimate.objects.filter(cid=cmp1).all()
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        item = itemtable.objects.filter(cid=cmp1).all()

        unit = unittable.objects.filter(cid=cmp1)
        acc  = accounts1.objects.filter(acctype='Cost of Goods Sold',cid=cmp1)
        acc1  = accounts1.objects.filter(acctype='Sales',cid=cmp1)



        context = {'est': est1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,'item':item,
                   'ser': ser, 'tod': tod,
                   'unit':unit,'acc':acc,'acc1':acc1,
                   }
        return render(request, 'app1/estimate2.html', context)
    except:
        return redirect('goestimate')


@login_required(login_url='regcomp')
def estcreate2(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        est2 = estimate(customer=request.POST['customer'], email=request.POST['email'], billingaddress=request.POST['billingaddress'], 
                        estimatedate=request.POST['estimatedate'], expirationdate=request.POST['expirationdate'],
                        placeofsupply=request.POST['placosupply'],
                        estimateno='1000',
                        
                        
                        #  product=request.POST['product'], description=request.POST['description'],
                        # hsn=request.POST['hsn'],
                        # qty=request.POST['qty'], rate=request.POST['rate'], tax=request.POST['tax'],
                        # total=request.POST['total'], taxamount=request.POST['taxamount'],
                        #  , product1=request.POST[
                        #     'product1'], hsn1=request.POST['hsn1'], qty1=request.POST['qty1'],
                        # description1=request.POST['description1'], rate1=request.POST[
                        #     'rate1'], total1=request.POST['total1'], tax1=request.POST['tax1'],
                        # product2=request.POST['product2'], hsn2=request.POST['hsn2'], qty2=request.POST['qty2'],
                        # description2=request.POST['description2'], rate2=request.POST[
                        #     'rate2'], total2=request.POST['total2'], tax2=request.POST['tax2'],
                        # product3=request.POST['product3'], hsn3=request.POST['hsn3'], qty3=request.POST['qty3'],
                        # description3=request.POST['description3'], rate3=request.POST[
                        #     'rate3'], total3=request.POST['total3'], tax3=request.POST['tax3'],
                        cid=cmp1,
                        reference_number = request.POST['Ref_No'],
                        note = request.POST['Note'],
                        subtotal=request.POST['subtotal'],
                        IGST =request.POST['IGST'],
                        CGST  = request.POST['CGST'],
                        SGST = request.POST['SGST'],
                        TCS = request.POST['TCS'],
                        estimatetotal=request.POST['grandtotal']
                        
                        
                        )
                        
                            
        if len(request.FILES) != 0:
            est2.file=request.FILES['file']                    
        est2.save()
        est2.estimateno = int(est2.estimateno) + est2.estimateid
        est2.save()

        items = request.POST.getlist("product[]")
        hsn = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        quantity = request.POST.getlist("qty[]")
        rate = request.POST.getlist("price[]")
        tax = request.POST.getlist("tax[]")
        amount = request.POST.getlist("total[]")

        estimateid= estimate.objects.get(estimateid=est2.estimateid)

        if len(items)==len(hsn)==len(description)==len(quantity)==len(rate)==len(tax )==len(amount) and items and hsn and description and quantity and rate and tax and amount:
                mapped=zip(items,hsn,description ,quantity,rate,tax,amount)
                mapped=list(mapped)
                for ele in mapped:
                    itemAdd,created = estimate_item.objects.get_or_create(item = ele[0],hsn=ele[1],description=ele[2],
                    quantity=ele[3],rate=ele[4],tax=ele[5],total=ele[6] ,estimate = estimateid,cid=cmp1)



        return redirect('goestimate')
    
    return redirect('goestimate')


@login_required(login_url='regcomp')
def new_customers(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()
                return redirect('/app1/estindex2')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('estindex2')




def estimate_create_item(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            #itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST.get('invacc')
            istock = request.POST.get('stock')
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                #tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('estindex2')
        return render(request,'app1/estimate2.html')
    return redirect('/') 


def estimate_create_item2(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            # itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST['invacc']
            istock = request.POST['stock']
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                # tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect(editestimate,id)
        return render(request,'app1/estimate2.html')
    return redirect('/') 


@login_required(login_url='regcomp')
def editestimate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
       
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        customers = customer.objects.filter(cid=cmp1).all()
        edt = estimate.objects.get(estimateid=id, cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1).all()
        estimateitem = estimate_item.objects.filter(estimate=id).all()
        


        context = {'estimate': edt, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser,'item':item,'estimateitem':estimateitem ,'customers':customers}
        return render(request, 'app1/edit_estimate.html', context)
    except:
        return redirect('goestimate')




@login_required(login_url='regcomp')
def updateestimate2(request, id):
    if request.method =="POST":
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = estimate.objects.get(estimateid=id, cid=cmp1)
        upd.customer = request.POST['customer']
        upd.email = request.POST['email']
        upd.billingaddress = request.POST['billingaddress']
        upd.estimatedate = request.POST['estimatedate']
        upd.expirationdate = request.POST['expirationdate']
        upd.placeofsupply = request.POST['placosupply']
        
        upd.reference_number = request.POST['Ref_No']
        upd.note = request.POST['Note']
        upd.subtotal=request.POST['subtotal']

        upd.IGST =request.POST['IGST']
        upd.CGST  = request.POST['CGST']
        upd.SGST = request.POST['SGST']
        upd.TCS = request.POST['TCS']
        upd.estimatetotal = request.POST['grandtotal']
        if len(request.FILES) != 0:
            if len(upd.file) > 0  :
                os.remove(upd.estimate.path)
                
            upd.file = request.FILES['file']

        upd.save()
        items = request.POST.getlist("product[]")
        hsn = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        quantity = request.POST.getlist("qty[]")
        rate = request.POST.getlist("price[]")
        tax = request.POST.getlist("tax[]")
        amount = request.POST.getlist("total[]")
        estitemid = request.POST.getlist("id[]")

        estimateid= estimate.objects.get(estimateid=upd.estimateid)

        if len(items)==len(hsn)==len(description)==len(quantity)==len(rate)==len(tax )==len(amount)==len(estitemid) and items and hsn and description and quantity and rate and tax and amount and estitemid:
                mapped=zip(items,hsn,description ,quantity,rate,tax,amount,estitemid)
                mapped=list(mapped)
                print(mapped)
                for ele in mapped:
                    created = estimate_item.objects.filter(id=ele[7],cid=cmp1).update(item = ele[0],hsn=ele[1],description=ele[2],
                    quantity=ele[3],rate=ele[4],tax=ele[5],total=ele[6])
                   



        return redirect('goestimate')
    else:
        return redirect('goestimate')


@login_required(login_url='regcomp')
def new_customers4(request,id):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()
                return redirect('editestimate',id)
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('goaddinvoices')



@login_required(login_url='regcomp')
def deleteestimate(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = estimate.objects.get(estimateid=id, cid=cmp1)
        
        upd.delete()
        os.remove(upd.estimate.path)
        return redirect('goestimate')
    except:
        return redirect('goestimate')


def search_estimate(request):
    if request.method == "POST":
        cmp1 = company.objects.get(id=request.session["uid"])
        search = request.POST['search']
        cloumn = request.POST['type']

        if cloumn == '1' or search  == '':
            return redirect('goestimate')    

        else :
            if cloumn == '2':
                cmp1 = company.objects.get(id=request.session["uid"])
                est1 = estimate.objects.filter(cid=cmp1,customer=search).all()

                context = {
                            'est1' :est1,
                            'cmp1': cmp1
                                }
                return render(request,'app1/goestimate.html',context)
            else:
                if cloumn == '3':
                    cmp1 = company.objects.get(id=request.session["uid"])
                    est1 = estimate.objects.filter(cid=cmp1,estimateno=search).all()

                    context = {
                            'est1' :est1,
                            'cmp1': cmp1
                                }
                    return render(request,'app1/goestimate.html',context)        
   
    
    return redirect('goestimate')


def estimate_view(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = estimate.objects.get(estimateid=id, cid=cmp1)

    estitem = estimate_item.objects.filter(estimate=id)

    context ={
        'estimate':upd,
        'cmp1':cmp1,
        'estitem':estitem,

    }

    return render(request,'app1/estimate_view.html',context)


def convert1(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = estimate.objects.get(estimateid=id, cid=cmp1)

    upd.status = 'Approved'
    upd.save()



    return redirect(estimate_view,id)

def convert2(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    est= estimate.objects.get(estimateid=id, cid=cmp1)

    est.status = 'Sales'
    est.save()


    cmp1 = company.objects.get(id=request.session['uid'])
    upd = salesorder()
    upd.cid =  cmp1 
    upd.salename  = est.customer
    upd.saleemail = est.email
    upd.saleaddress = est.billingaddress
    upd.saledate = est.estimatedate
    upd.shipmentdate = est.expirationdate
    upd.placeofsupply= est.placeofsupply

    
    upd.taxamount = est.taxamount

    upd.reference_number = est.reference_number
    upd.note = est.note

    upd.subtotal=est.subtotal
    upd.IGST =est. IGST
    upd.CGST  = est.CGST
    upd.SGST = est.SGST
    upd.TCS = est.TCS 
    upd.salestotal = est.estimatetotal
  
    upd.file = est.file
    upd.saleno = '1000'

    upd.save()
    upd.saleno = int(upd.saleno) + upd.id
    upd.save()

    es =estimate_item.objects.filter(estimate=id)

    salid = salesorder.objects.get(id=upd.id)
    for i in es:
        a=sales_item()
        a. salesorder = salid 
        a.product = i.item
        a.hsn = i.hsn
        a.description = i.description
        a.qty  = i.quantity
        a.price = i.rate
        a.total = i.total
        a.tax = i.tax
        a.cid = i.cid
        a.save()


    return redirect(estimate_view,id)


def estmate_filter1(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    est1 = estimate.objects.filter(cid=cmp1,status='Draft').all()

    context = {
            'est1' :est1,
            'cmp1': cmp1
            }
    return render(request,'app1/goestimate.html',context)
def estmate_filter2(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    est1 = estimate.objects.filter(cid=cmp1,status='Approved').all()

    context = {
            'est1' :est1,
            'cmp1': cmp1
            }
    return render(request,'app1/goestimate.html',context)

def estmate_filter3(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    est1 = estimate.objects.filter(cid=cmp1,status='Invoice').all()

    context = {
            'est1' :est1,
            'cmp1': cmp1
            }
    return render(request,'app1/goestimate.html',context)



# def pdf(request):
#     pdf =html2pdf("app1/pdf.html")
#     return HttpResponse(pdf,content_type="application/pdf")


def gosalesorder(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    sel1 = salesorder.objects.filter(cid=cmp1).all()

    context = {
        'sel1' :sel1,
        'cmp1': cmp1

        }

    return render(request,'app1/gosalesorder.html',context )

def newsalesorder(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    toda = date.today()
    tod = toda.strftime("%Y-%m-%d")
    customers = customer.objects.filter(cid=cmp1).all()
    sel1 = salesorder.objects.filter(cid=cmp1).all()
    inv = inventory.objects.filter(cid=cmp1).all()
    bun = bundle.objects.filter(cid=cmp1).all()
    noninv = noninventory.objects.filter(cid=cmp1).all()
    ser = service.objects.filter(cid=cmp1).all()
    item = itemtable.objects.filter(cid=cmp1).all()

    unit = unittable.objects.filter(cid=cmp1)
    acc  = accounts1.objects.filter(acctype='Cost of Goods Sold',cid=cmp1)
    acc1  = accounts1.objects.filter(acctype='Sales',cid=cmp1)





    context = {'sel1': sel1, 'customers': customers, 'cmp1': cmp1, 'inv': inv, 'bun': bun, 'noninv': noninv,'item':item,
                   'ser': ser, 'tod': tod,
                   'unit':unit,'acc':acc,'acc1':acc1,
                   }
        
    print(sel1)

    return render(request,'app1/salesorder.html',context )


@login_required(login_url='regcomp')
def createsales_record(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])

        sel2 = salesorder(salename=request.POST['customer'], saleemail=request.POST['email'],
                        saleaddress=request.POST['billingaddress'], saledate=request.POST['Salesdate'],
                        shipmentdate=request.POST['Shipmentdate'], placeofsupply=request.POST['placosupply'],
                        saleno='1000', 
                        # product=request.POST['product'], 
                        # description=request.POST['description'],
                        # hsn=request.POST['hsn'],
                        # qty=request.POST['qty'],
                        # rate=request.POST['rate'],
                        # tax=request.POST['tax'],



                        # total=request.POST['total'],
                        # taxamount=request.POST['taxamount'],

                        #  product1=request.POST['product1'],
                        #  hsn1=request.POST['hsn1'], qty1=request.POST['qty1'],
                        # description1=request.POST['description1'], rate1=request.POST[
                        #     'rate1'], total1=request.POST['total1'], tax1=request.POST['tax1'],
                        # product2=request.POST['product2'], hsn2=request.POST['hsn2'], qty2=request.POST['qty2'],
                        # description2=request.POST['description2'], rate2=request.POST[
                        #     'rate2'], total2=request.POST['total2'], tax2=request.POST['tax2'],
                        # product3=request.POST['product3'], hsn3=request.POST['hsn3'], qty3=request.POST['qty3'],
                        # description3=request.POST['description3'], rate3=request.POST[
                        #     'rate3'], total3=request.POST['total3'], tax3=request.POST['tax3'],
                        cid=cmp1,
                        reference_number = request.POST['Ref_No'],
                        note = request.POST['Note'],

                        subtotal=request.POST['subtotal'],
                        IGST =request.POST['IGST'],
                        CGST  = request.POST['CGST'],
                        SGST = request.POST['SGST'],
                        TCS = request.POST['TCS'],
                        salestotal=request.POST['grandtotal'],)            
        if len(request.FILES) != 0:
            sel2.file=request.FILES['file']                    
        sel2.save()
        sel2.saleno= int(sel2.saleno) + sel2.id
        sel2.save()

        product = request.POST.getlist("product[]")
        hsn  = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        qty = request.POST.getlist("qty[]")
        price = request.POST.getlist("price[]")
        
        tax = request.POST.getlist("tax[]")
        total = request.POST.getlist("total[]")

        salesorderid=salesorder.objects.get(id =sel2.id)

        if len(product)==len(hsn)==len(description)==len(qty)==len(price)==len(tax)==len(total) and product and hsn and description and qty and price and tax and total:
            mapped=zip(product,hsn,description,qty,price,tax,total)
            mapped=list(mapped)
            for ele in mapped:
                salesorderAdd,created = sales_item.objects.get_or_create(product = ele[0],hsn=ele[1],description=ele[2],
                qty=ele[3],price=ele[4],tax=ele[5],total=ele[6],salesorder=salesorderid, cid=cmp1 )



        return redirect('gosalesorder')
    
    return redirect('gosalesorder')



@login_required(login_url='regcomp')
def new_customers2(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()
                temp=request.POST['openbalance']
                if temp != "":
                    customer1.opening_balance = request.POST['openbalance'] 
                    customer1.opening_balance_due = request.POST['openbalance'] 
                    customer1.date= tod
                    customer1.save()
                    
                   

                

                if customer1.opening_balance != "":

                    add_cust_stat=cust_statment(

                    customer = customer1.firstname +" "+ customer1.lastname,

                    cid  = cmp1,

                    

                    Date = tod,

                    Transactions="Customer Opening Balance",

                    Amount= customer1.opening_balance,

                )


                add_cust_stat.save()

                return redirect('newsalesorder')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('newsalesorder')

def sale_create_item(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            #itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST.get('invacc')
            istock = request.POST.get('stock')
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                #tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('newsalesorder')
        return render(request,'app1/salesorder.html')
    return redirect('/') 


def sales_order_view(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = salesorder.objects.get(id=id, cid=cmp1)

    saleitem = sales_item.objects.filter(salesorder=id)

    context ={
        'sale':upd,
        'cmp1':cmp1,
        'saleitem':saleitem

    }


    return render(request,'app1/sales_order_view.html',context)


@login_required(login_url='regcomp')
def sales_order_delete(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = salesorder.objects.get(id=id, cid=cmp1)
        
        upd.delete()
        os.remove(upd.sales.path)
        return redirect('gosalesorder')
    except:
        return redirect('gosalesorder')


@login_required(login_url='regcomp')
def edit_sales_order(request, id):
    
        cmp1 = company.objects.get(id=request.session['uid'])
        edt = salesorder.objects.get(id=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        item = itemtable.objects.filter(cid=cmp1).all()
        itemsale = sales_item.objects.filter(salesorder=id)
        context = {'sale': edt, 'cmp1': cmp1, 'inv': inv,
                   'noninv': noninv, 'bun': bun, 'ser': ser,'item':item,'itemsale':itemsale}
        return render(request, 'app1/edit_sales_order.html', context)
    

@login_required(login_url='regcomp')
def updatesale(request, id):
    if request.method =="POST":
        cmp1 = company.objects.get(id=request.session['uid'])
        upd = salesorder.objects.get(id=id, cid=cmp1)

        upd.salename  = request.POST['customer']
        upd.saleemail = request.POST['email']
        upd.saleaddress = request.POST['billingaddress']
        upd.saledate = request.POST['Salesdate']
        upd.shipmentdate = request.POST['Shipmentdate']
        upd.placeofsupply= request.POST['placosupply']
      

        upd.reference_number = request.POST['Ref_No']
        upd.note = request.POST['Note']

        upd.subtotal=request.POST['subtotal']
        upd.IGST =request.POST['IGST']
        upd.CGST  = request.POST['CGST']
        upd.SGST = request.POST['SGST']
        upd.TCS = request.POST['TCS']
        upd.salestotal = request.POST['grandtotal']

        if len(request.FILES) != 0:
            if upd.file != "default.jpg" :
                os.remove(upd.sales.path)
                
            upd.file = request.FILES['file']

        

        upd.save()

        product = request.POST.getlist("product[]")
        hsn  = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        qty = request.POST.getlist("qty[]")
        price = request.POST.getlist("price[]")
        
        tax = request.POST.getlist("tax[]")
        total = request.POST.getlist("total[]")

        itemid = request.POST.getlist("id[]")

        saleid=salesorder.objects.get(id =upd.id)
        # import pdb; pdb.set_trace()
        if len(product)==len(hsn)==len(description)==len(qty)==len(price)==len(tax)==len(total)==len(itemid) and product and hsn and description and qty and price and tax and total and itemid:
            mapped=zip(product,hsn,description,qty,price,tax,total,itemid)
            mapped=list(mapped)
           
            for ele in mapped:
                created = sales_item.objects.filter(id=ele[7],cid=cmp1).update(product = ele[0],hsn=ele[1],description=ele[2],
                qty=ele[3],price=ele[4],tax=ele[5],total=ele[6])


        return redirect('gosalesorder')
    else:
        return redirect('gosalesorder')




def sale_convert1(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = salesorder.objects.get(id=id, cid=cmp1)

    upd.status = 'Approved'
    upd.save()



    return redirect(sales_order_view,id)

def sale_convert2(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = salesorder.objects.get(id=id, cid=cmp1)

    upd.status = 'Invoice'
    upd.save()

    inv = invoice()
    inv.cid =  cmp1 
    inv.customername  = upd.salename
    inv.email = upd.saleemail
   
    inv.invoicedate = upd.saledate
    inv.duedate  =  upd.shipmentdate
    inv.bname = upd.saleaddress
    inv.placosupply= upd.placeofsupply

    # inv.reference_number = est.reference_number
    inv.note = upd.note
    
    inv.subtotal=upd.subtotal 
    inv.IGST =upd. IGST
    inv.CGST  = upd.CGST
    inv.SGST = upd.SGST
    inv.TCS = upd.TCS 
    inv.amtrecvd = 0 
    inv.baldue = upd.salestotal 
    inv.grandtotal = upd.salestotal 
  
    inv.file = upd.file
    inv.saleno = '1000'



    orderno = 'OR'+str(random.randint(1111111,9999999))
    while invoice.objects.filter(invoice_orderno=orderno ) is None:
        orderno = 'OR'+str(random.randint(1111111,9999999))
    inv.invoice_orderno =orderno
    inv.save()
    inv.invoiceno = int(inv.invoiceno) + inv.invoiceid
    inv.save()
    
    sl =sales_item.objects.filter(salesorder=id)

    salid = invoice.objects.get(invoiceid=inv.invoiceid)
    for i in sl:
        
        a=invoice_item()
        a. invoice = salid 
        a.product = i.product
        a.hsn = i.hsn
        a.description = i.description
        a.qty  = i.qty

        a.price = i.price
        a.total = i.total
        a.tax = i.tax
        a.cid = i.cid
        a.save()
        print(i.product)
        itemqty = itemtable.objects.get(name=i.product,cid=cmp1)
    
        if itemqty.stock != 0:
            temp=0
            temp = itemqty.stock
            temp = temp-i.qty
        
            itemqty.stock = temp 
            itemqty.save()




    return redirect(sales_order_view,id)



def sale_filter1(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    sel1 = salesorder.objects.filter(cid=cmp1,status='Draft').all()

    context = {
            'sel1' :sel1,
            'cmp1': cmp1
            }
    return render(request,'app1/gosalesorder.html',context)

def sale_filter2(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    sel1 = salesorder.objects.filter(cid=cmp1,status='Approved').all()

    context = {
            'sel1' :sel1,
            'cmp1': cmp1
            }
    return render(request,'app1/gosalesorder.html',context)

def sale_filter3(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    sel1 = salesorder.objects.filter(cid=cmp1,status='Invoice').all()

    context = {
            'sel1' :sel1,
            'cmp1': cmp1
            }
    return render(request,'app1/gosalesorder.html',context)


def search_sale(request):
    if request.method == "POST":
        cmp1 = company.objects.get(id=request.session["uid"])
        search = request.POST['search']
        cloumn = request.POST['type']

        if cloumn == '1' or search  == '':
            return redirect('gosalesorder')    

        else :
            if cloumn == '2':
                cmp1 = company.objects.get(id=request.session["uid"])
                sel1= salesorder.objects.filter(cid=cmp1,salename =search).all()

                context = {
                            'sel1' :sel1,
                            'cmp1': cmp1
                                }
                return render(request,'app1/gosalesorder.html',context)
            else:
                if cloumn == '3':
                    cmp1 = company.objects.get(id=request.session["uid"])
                    sel1= salesorder.objects.filter(cid=cmp1,salename=search).all()

                    context = {
                            'sel1' :sel1,
                            'cmp1': cmp1
                                }
                    return render(request,'app1/gosalesorder.html',context)        
   
    
    return redirect('gosalesorder')



@login_required(login_url='regcomp')
def goinvoices(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1).all()
        invs = invoice.objects.filter(cid=cmp1).all()
        context = {'invoice': invs, 'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/invoices.html', context)
    except:
        return redirect('godash')

@login_required(login_url='regcomp')
def goaddinvoices(request):
    try:
        
        customers = customer.objects.all()
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        cmp1 = company.objects.get(id=request.session["uid"])
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1).all()

        unit = unittable.objects.filter(cid=cmp1)
        acc  = accounts1.objects.filter(acctype='Cost of Goods Sold',cid=cmp1)
        acc1  = accounts1.objects.filter(acctype='Sales',cid=cmp1)



        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv,'item' :item,
                   'ser': ser,
                   'tod': tod,
                   'unit':unit,'acc':acc,'acc1':acc1,
                   }
        return render(request, 'app1/addinvoics.html', context)
    except:
        return redirect('goinvoices')       

@login_required(login_url='regcomp')
def invoice_view(request,id):

    cmp1 = company.objects.get(id=request.session['uid'])
    upd = invoice.objects.get(invoiceid=id, cid=cmp1)

    invitem = invoice_item.objects.filter(invoice=id)

    total = upd.grandtotal
    words_total = num2words(total)

    context ={
        'invoice':upd,
        'cmp1':cmp1,
        'words_total':words_total,
        'invitem':invitem,

    }


    return render(request,'app1/invoice_view.html',context)




@login_required(login_url='regcomp')
def new_customers3(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()

               
                temp=request.POST['openbalance']
                if temp != "":
                    customer1.opening_balance = request.POST['openbalance'] 
                    customer1.opening_balance_due = request.POST['openbalance'] 
                    customer1.date= tod
                    customer1.save()
                    
                   

                

                if customer1.opening_balance != "":

                    add_cust_stat=cust_statment(

                    customer = customer1.firstname +" "+ customer1.lastname,

                    cid  = cmp1,

                    

                    Date = tod,

                    Transactions="Customer Opening Balance",

                    Amount= customer1.opening_balance,

                )


                add_cust_stat.save()




                return redirect('goaddinvoices')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('goaddinvoices')


@login_required(login_url='regcomp')
def editinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        invo3 = invoice.objects.get(invoiceid=id, cid=cmp1)
        inv = inventory.objects.filter(cid=cmp1).all()
        bun = bundle.objects.filter(cid=cmp1).all()
        noninv = noninventory.objects.filter(cid=cmp1).all()
        ser = service.objects.filter(cid=cmp1).all()
        item = itemtable.objects.filter(cid=cmp1).all()

        invitem = invoice_item.objects.filter(invoice =id )
        context = {'invoice': invo3, 'cmp1': cmp1, 'inv': inv, 'item':item,'invitem':invitem,
                   'noninv': noninv, 'bun': bun, 'ser': ser}
        return render(request, 'app1/editinvoice.html', context)
    except:
        return redirect('goinvoices')

@login_required(login_url='regcomp')
def updateinvoice(request, id):
    if request.method =='POST':
        cmp1 = company.objects.get(id=request.session['uid'])
        invoi = invoice.objects.get(invoiceid=id, cid=cmp1)
        creqty = [invoi.qty, invoi.qty2, invoi.qty3, invoi.qty4]
        qty = [request.POST['qty'], request.POST['qty2'],
               request.POST['qty3'], request.POST['qty4']]
        taxes = [float(invoi.tax) / 100, float(invoi.tax2) / 100,
                 float(invoi.tax3) / 100, float(invoi.tax4) / 100]
        otaxamnt = [float(invoi.total) * taxes[0], float(invoi.total2) * taxes[1],
                    float(invoi.total3) * taxes[2],
                    float(invoi.total4) * taxes[3]]
        taxamnt = [float(request.POST['taxamount1']), float(request.POST['taxamount2']),
                   float(request.POST['taxamount2']),
                   float(request.POST['taxamount3'])]
        otot = [float(invoi.total), float(invoi.total2),
                float(invoi.total3), float(invoi.total4)]
        tot = [float(request.POST['total']), float(request.POST['total2']), float(request.POST['total3']),
               float(request.POST['total4'])]
        product = [request.POST['product'], request.POST['product2'], request.POST['product3'],
                   request.POST['product4']]
        placosupply = request.POST['placosupply']
        for (p, q, cq, tt, ot, tx, otx) in zip(product, qty, creqty, tot, otot, taxamnt, otaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        newtot = tt - ot
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        newtot = ot - tt
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        bproduct = [request.POST['product11'], request.POST['product12'], request.POST['product13'],
                    request.POST['product14'], request.POST['product21'], request.POST['product22'],
                    request.POST['product23'],
                    request.POST['product24'], request.POST['product31'], request.POST['product32'],
                    request.POST['product33'],
                    request.POST['product34'], request.POST['product41'], request.POST['product42'],
                    request.POST['product43'],
                    request.POST['product44']]
        bqty = [request.POST['qty11'], request.POST['qty12'], request.POST['qty13'], request.POST['qty14'],
                request.POST['qty21'], request.POST['qty22'], request.POST['qty23'], request.POST['qty24'],
                request.POST['qty31'], request.POST['qty32'], request.POST['qty33'], request.POST['qty34'],
                request.POST['qty41'], request.POST['qty42'], request.POST['qty43'], request.POST['qty44']]
        bcreqty = [request.POST['creqty11'], request.POST['creqty12'], request.POST['creqty13'],
                   request.POST['creqty14'],
                   request.POST['creqty21'], request.POST['creqty22'], request.POST['creqty23'],
                   request.POST['creqty24'],
                   request.POST['creqty31'], request.POST['creqty32'], request.POST['creqty33'],
                   request.POST['creqty34'],
                   request.POST['creqty41'], request.POST['creqty42'], request.POST['creqty43'],
                   request.POST['creqty44']]
        btot = [float(request.POST['total11']), float(request.POST['total12']), float(request.POST['total13']),
                float(request.POST['total14']), float(
                    request.POST['total21']), float(request.POST['total22']),
                float(request.POST['total23']),
                float(request.POST['total24']), float(
                    request.POST['total31']), float(request.POST['total32']),
                float(request.POST['total33']),
                float(request.POST['total34']), float(
                    request.POST['total41']), float(request.POST['total42']),
                float(request.POST['total43']),
                float(request.POST['total44'])]
        botot = [float(request.POST['ototal11']), float(request.POST['ototal12']), float(request.POST['ototal13']),
                 float(request.POST['ototal14']), float(
                     request.POST['ototal21']), float(request.POST['ototal22']),
                 float(request.POST['ototal23']),
                 float(request.POST['ototal24']), float(
                     request.POST['ototal31']), float(request.POST['ototal32']),
                 float(request.POST['ototal33']),
                 float(request.POST['ototal34']), float(
                     request.POST['ototal41']), float(request.POST['ototal42']),
                 float(request.POST['ototal43']), float(request.POST['ototal44'])]
        btaxes = [float(request.POST['otax11']) / 100, float(request.POST['otax12']) / 100,
                  float(request.POST['otax13']) /
                  100, float(request.POST['otax14']) / 100,
                  float(request.POST['otax21']) /
                  100, float(request.POST['otax22']) / 100,
                  float(request.POST['otax23']) /
                  100, float(request.POST['otax24']) / 100,
                  float(request.POST['otax31']) /
                  100, float(request.POST['otax32']) / 100,
                  float(request.POST['otax33']) /
                  100, float(request.POST['otax34']) / 100,
                  float(request.POST['otax41']) /
                  100, float(request.POST['otax42']) / 100,
                  float(request.POST['otax43']) / 100, float(request.POST['otax44']) / 100]
        botaxamnt = [float(botot[0]) * btaxes[0], float(botot[1]) * btaxes[1], float(botot[2]) * btaxes[2],
                     float(botot[3]) * btaxes[3], float(botot[4]) *
                     btaxes[4], float(botot[5]) * btaxes[5],
                     float(botot[6]) * btaxes[6], float(botot[7]) *
                     btaxes[7], float(botot[8]) * btaxes[8],
                     float(botot[9]) * btaxes[9], float(botot[10]) *
                     btaxes[10], float(botot[11]) * btaxes[11],
                     float(botot[12]) * btaxes[12], float(botot[13]) *
                     btaxes[13], float(botot[14]) * btaxes[14],
                     float(botot[15]) * btaxes[15]]
        btaxamnt = [float(request.POST['taxamount11']), float(request.POST['taxamount12']),
                    float(request.POST['taxamount13']), float(
                        request.POST['taxamount14']),
                    float(request.POST['taxamount21']), float(
                        request.POST['taxamount22']),
                    float(request.POST['taxamount23']), float(
                        request.POST['taxamount24']),
                    float(request.POST['taxamount31']), float(
                        request.POST['taxamount32']),
                    float(request.POST['taxamount33']), float(
                        request.POST['taxamount34']),
                    float(request.POST['taxamount41']), float(
                        request.POST['taxamount42']),
                    float(request.POST['taxamount43']), float(request.POST['taxamount44'])]
        print(bcreqty)
        for (p, q, cq, tt, ot, tx, otx) in itertools.zip_longest(bproduct, bqty, bcreqty, btot, botot, btaxamnt, botaxamnt):
            try:
                if inventory.objects.get(name=p, cid=cmp1):
                    invent = inventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        invent.initialqty = int(
                            invent.initialqty) - (int(q) - int(cq))
                        invent.save()
                        cxq = float(invent.cost) * (float(q) - float(cq))
                        newtot = tt - ot
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance - cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance + cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        invent.initialqty = int(
                            invent.initialqty) + (int(cq) - int(q))
                        invent.save()
                        cxq = float(invent.cost) * (float(cq) - float(q))
                        newtot = ot - tt
                        invenacnt = invent.invacnt
                        # invacnt
                        if accounts1.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts1.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        elif accounts.objects.get(name=invenacnt, cid=cmp1):
                            accoun = accounts.objects.get(
                                name=invenacnt, cid=cmp1)
                            accoun.balance = accoun.balance + cxq
                            accoun.save()
                        else:
                            pass
                        # incomeacnt
                        try:
                            if accounts.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.incomeacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.incomeacnt, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        # expacnt
                        try:
                            if accounts.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=invent.expacnt, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=invent.expacnt, cid=cmp1)
                                acc.balance = acc.balance - cxq
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
            except:
                pass
            try:
                if noninventory.objects.get(name=p, cid=cmp1):
                    noninvent = noninventory.objects.get(name=p, cid=cmp1)
                    if int(q) > int(cq):
                        newtot = tt - ot
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance + newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = tax - otax
                            accocgst.balance = accocgst.balance + ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance + ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = tx - otx
                            accoigst.balance = accoigst.balance + ta
                            accoigst.save()
                    elif int(q) < int(cq):
                        newtot = ot - tt
                        try:
                            if accounts.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        try:
                            if accounts1.objects.get(name=noninvent.income, cid=cmp1):
                                acc = accounts1.objects.get(
                                    name=noninvent.income, cid=cmp1)
                                acc.balance = acc.balance - newtot
                                acc.save()
                        except:
                            pass
                        if placosupply == cmp1.state:
                            tax = tx / 2
                            otax = otx / 2
                            accocgst = accounts1.objects.get(
                                name='Output CGST', cid=cmp1)
                            ta = otax - tax
                            accocgst.balance = accocgst.balance - ta
                            accocgst.save()
                            accosgst = accounts1.objects.get(
                                name='Output SGST', cid=cmp1)
                            accosgst.balance = accosgst.balance - ta
                            accosgst.save()
                        else:
                            accoigst = accounts1.objects.get(
                                name='Output IGST', cid=cmp1)
                            ta = otx - tx
                            accoigst.balance = accoigst.balance - ta
                            accoigst.save()
                    else:
                        pass
            except:
                pass
        grandtotal = float(request.POST['grandtotal'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        if grandtotal > invoi.grandtotal:
            accont.balance = accont.balance + (grandtotal - invoi.grandtotal)
            accont.save()
        elif grandtotal < invoi.grandtotal:
            accont.balance = accont.balance - (invoi.grandtotal - grandtotal)
            accont.save()
        else:
            pass
        invoi.customername = request.POST['customername']
        invoi.email = request.POST['email']
        invoi.terms = request.POST['terms']
        invoi.invoicedate = request.POST['invoicedate']
        invoi.duedate = request.POST['duedate']
        invoi.bname = request.POST['bname']
        invoi.placosupply = request.POST['placosupply']

        invoi.product = request.POST['product']
        invoi.hsn = request.POST['hsn']
        invoi.qty = request.POST['qty']
        invoi.price = request.POST['price']
        invoi.total = float(request.POST['total'])
        invoi.tax = request.POST['tax']

        invoi.product2 = request.POST['product2']
        invoi.hsn2 = request.POST['hsn2']
        invoi.qty2 = request.POST['qty2']
        invoi.price2 = request.POST['price2']
        invoi.total2 = request.POST['total2']
        invoi.tax2 = request.POST['tax2']

        invoi.product3 = request.POST['product3']
        invoi.hsn3 = request.POST['hsn3']
        invoi.qty3 = request.POST['qty3']
        invoi.price3 = request.POST['price3']
        invoi.total3 = request.POST['total3']
        invoi.tax3 = request.POST['tax3']

        invoi.product4 = request.POST['product4']
        invoi.hsn4 = request.POST['hsn4']
        invoi.qty4 = request.POST['qty4']
        invoi.price4 = request.POST['price4']
        invoi.total4 = request.POST['total4']
        invoi.tax4 = request.POST['tax4']

        invoi.subtotal = float(request.POST['subtotal'])
        invoi.grandtotal = float(request.POST['grandtotal'])
        invoi.amtrecvd = request.POST['amtrecvd']
        invoi.baldue = float(request.POST['baldue'])
        # invoi.taxamount = float(request.POST['taxamount'])
        invoi.note = request.POST['Note']
        invoi.IGST = request.POST['IGST']
        invoi.CGST = request.POST['CGST']
        invoi.SGST = request.POST['SGST']
        invoi.TCS = request.POST['TCS']

        if len(request.FILES) != 0:
            if len(invoi.file) > 0  :
                os.remove(invoi.invoice.path)
                
            invoi.file = request.FILES['file'],







        invoi.save()
        return redirect('goinvoices')
    else:
        return redirect('goinvoices')

@login_required(login_url='regcomp')
def updateinvoice2(request, id):
    if request.method =='POST':
        cmp1 = company.objects.get(id=request.session['uid'])
        invoi = invoice.objects.get(invoiceid=id, cid=cmp1)
        invoi.customername = request.POST['customername']
        invoi.email = request.POST['email']
        invoi.terms = request.POST['terms']
        invoi.invoicedate = request.POST['invoicedate']
        invoi.duedate = request.POST['duedate']
        invoi.bname = request.POST['bname']
        invoi.placosupply = request.POST['placosupply']

   
        invoi.subtotal = request.POST['subtotal']
        invoi.grandtotal = request.POST['grandtotal']
        invoi.amtrecvd = request.POST['amtrecvd']
        invoi.baldue = request.POST['baldue']
        
        invoi.note = request.POST['Note']
        invoi.IGST = request.POST['IGST']
        invoi.CGST = request.POST['CGST']
        invoi.SGST = request.POST['SGST']
        invoi.TCS = request.POST['TCS']

        if len(request.FILES) != 0:
            if len(invoi.file) != "default.jpg" :
                os.remove(invoi.invoice.path)
                
            invoi.file = request.FILES['file'],

        invoi.save()

        product = request.POST.getlist("product[]")
        hsn  = request.POST.getlist("hsn[]")
        description = request.POST.getlist("description[]")
        qty = request.POST.getlist("qty[]")
        price = request.POST.getlist("price[]")
        
        tax = request.POST.getlist("tax[]")
        total = request.POST.getlist("total[]")

        itemid = request.POST.getlist("id[]")

        invoiceid=invoice.objects.get(invoiceid =invoi.invoiceid)
        # import pdb; pdb.set_trace()
        if len(product)==len(hsn)==len(description)==len(qty)==len(price)==len(tax)==len(total)==len(itemid) and product and hsn and description and qty and price and tax and total and itemid:
            mapped=zip(product,hsn,description,qty,price,tax,total,itemid)
            mapped=list(mapped)
            for ele in mapped:
                created = invoice_item.objects.filter(id=ele[7],cid=cmp1).update(product = ele[0],hsn=ele[1],description=ele[2],
                qty=ele[3],price=ele[4],tax=ele[5],total=ele[6])

                

        # product = request.POST.getlist("product[]")
        # hsn  = request.POST.getlist("hsn[]")
        # description = request.POST.getlist("description[]")
        # qty = request.POST.getlist("qty[]")
        # price = request.POST.getlist("price[]")
        
        # tax = request.POST.getlist("tax[]")
        # total = request.POST.getlist("total[]")

        # invoiceid=invoice.objects.get(invoiceid =invoi.invoiceid)


        # inv_item = invoice_item.objects.filter(invoice=invoiceid)


        # print(inv_item)
        # if len(product)==len(hsn)==len(description)==len(qty)==len(price)==len(tax)==len(total) and product and hsn and description and qty and price and tax and total:
        #     mapped=zip(product,hsn,description,qty,price,tax,total)
        #     mapped=list(mapped)
            
            
        #     for i in inv_item:
        #         for ele in mapped:
        #             i.product = ele[0]
        #             i.hsn=ele[1]
        #             i.description=ele[2]
        #             i.qty=ele[3]
        #             i.price=ele[4]
        #             i.tax=ele[5]
        #             i.total=ele[6]
        #             i.invoice=invoiceid
        #             i.save()
                    
        #             print(inv_item)

        return redirect('invoice_view',id)
    else:
        return redirect('goinvoices')




@login_required(login_url='regcomp')
def deleteinvoice(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        inoi = invoice.objects.get(invoiceid=id, cid=cmp1)
        inoi.delete()
        return redirect('goinvoices')
    except:
        return redirect('goinvoices')

@login_required(login_url='regcomp')
def invoice_status(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    inoi = invoice.objects.get(invoiceid=id, cid=cmp1)

    inoi.status = 'Approved'
    inoi.save()

    statment = cust_statment()
    statment.customer =inoi.customername 

    statment.cid = cmp1
    statment.inv =inoi
    
    
    statment.Date = inoi.invoicedate
    statment.Transactions = "Invoice"
    
    statment.Amount = inoi.grandtotal
    statment.save()

    return redirect(invoice_view,id)


def goinvoices1(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    customers = customer.objects.filter(cid=cmp1).all()
    invs = invoice.objects.filter(cid=cmp1,status='Draft').all()
    context = {'invoice': invs, 'customers': customers, 'cmp1': cmp1}
    return render(request, 'app1/invoices.html', context)

def goinvoices2(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    customers = customer.objects.filter(cid=cmp1).all()
    invs = invoice.objects.filter(cid=cmp1,status='Approved').all()
    context = {'invoice': invs, 'customers': customers, 'cmp1': cmp1}
    return render(request, 'app1/invoices.html', context)

def goinvoices3(request):
    if request.method == "POST":
        cmp1 = company.objects.get(id=request.session["uid"])
        search = request.POST['search']
        cloumn = request.POST['type']

        if cloumn == '1' or search  == '':
            return redirect('goinvoices')    

        else :
            if cloumn == '2':
                cmp1 = company.objects.get(id=request.session["uid"])
                invs = invoice.objects.filter(cid=cmp1,customername=search).all()
                context = {'invoice': invs,  'cmp1': cmp1}
                return render(request, 'app1/invoices.html', context)
            else:
                if cloumn == '3':
                    cmp1 = company.objects.get(id=request.session["uid"])
                    invs = invoice.objects.filter(cid=cmp1,invoice_orderno=search).all()
                    context = {'invoice': invs,  'cmp1': cmp1}
                    return render(request, 'app1/invoices.html', context)        
   
    
    return redirect('goinvoices')


@login_required(login_url='regcomp')
def new_customers1(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        if request.method == "POST":
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            firstname = request.POST['firstname']
            lastname = request.POST['lastname']
            if customer.objects.filter(firstname=firstname, lastname=lastname, cid=cmp1).exists():
                messages.info(request,
                              f"Customer {firstname} {lastname} already exists. Please provide a different name.")
                return redirect('gocustomers')
            else:
                customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                                     lastname=request.POST['lastname'], company=request.POST['company'],
                                     location=request.POST['location'], gsttype=request.POST['gsttype'],
                                     gstin=request.POST['gstin'], panno=request.POST['panno'],
                                     email=request.POST['email'],
                                     website=request.POST['website'], mobile=request.POST['mobile'],
                                     street=request.POST['street'], city=request.POST['city'],
                                     state=request.POST['state'],
                                     pincode=request.POST['pincode'], country=request.POST['country'],
                                     shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                                     shipstate=request.POST['shipstate'],
                                     shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'],
                                     cid=cmp1)

                customer1.save()

               
                temp=request.POST['openbalance']
                if temp != "":
                    customer1.opening_balance = request.POST['openbalance'] 
                    customer1.opening_balance_due = request.POST['openbalance'] 
                    customer1.date= tod
                    customer1.save()
                    
                   

                

                if customer1.opening_balance != "":

                    add_cust_stat=cust_statment(

                    customer = customer1.firstname +" "+ customer1.lastname,

                    cid  = cmp1,

                    

                    Date = tod,

                    Transactions="Customer Opening Balance",

                    Amount= customer1.opening_balance,

                )


                add_cust_stat.save()




                return redirect('estindex2')
        customers = customer.objects.filter(cid=cmp1).all()
        context = {'customers': customers, 'cmp1': cmp1}
        return render(request, 'app1/customers.html', context)
    except:
        return redirect('estindex2')    

def inv_create_item(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            #itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST.get('invacc')
            istock = request.POST.get('stock')
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                #tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('goaddinvoices')
        return render(request,'app1/addcustinvoice.html')
    return redirect('/') 


def estimate_pdf(request):

    return redirect('')

def gopayment_received(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pay = payment.objects.filter(cid=cmp1).all()
    
    context = {
        'pay' :pay,
        'cmp1': cmp1

    }

    return render(request, 'app1/gopayment_received.html',context)

    


@login_required(login_url='regcomp')
def payment_received(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        customers = customer.objects.filter(cid=cmp1)
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        inv = inventory.objects.filter(cid=cmp1)
        bun = bundle.objects.filter(cid=cmp1)
        noninv = noninventory.objects.filter(cid=cmp1)
        ser = service.objects.filter(cid=cmp1)
        acounts = accounts.objects.filter(cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1, 'customers': customers, 'inv': inv, 'bun': bun, 'noninv': noninv, 'ser': ser,'item':item,
                   'tod': tod, 'accoun': acounts}
        return render(request, 'app1/payment_received.html', context)
    except:
        return redirect('/')




@login_required(login_url='regcomp')
def paymentcreate2(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        pay2 = payment(customer=request.POST['customer'],
                        email=request.POST['email'],
                       paymdate=request.POST['paymdate'],
                       pmethod=request.POST['pmethod'], refno='1000', depto=request.POST['depto'],
                       amtreceived=request.POST['amtreceived'],
                       amtapply=request.POST['amtapply'],
                       amtcredit=request.POST['amtcredit'],
                       cid=cmp1,
                       referno=request.POST['ref'],


                    #    descrip=request.POST['invno0'], duedate=request.POST['duedate0'], orgamt=request.POST['inv_amount0'],
                    #    openbal=request.POST['openbal0'], payment=request.POST['payment0'],
                    #    descrip1=request.POST['invno1'],
                    #    duedate1=request.POST['duedate1'], orgamt1=request.POST['inv_amount1'],
                    #    openbal1=request.POST['openbal1'], payment1=request.POST['payment1'],
                    #    descrip2=request.POST['invno2'],
                    #    duedate2=request.POST['duedate2'], orgamt2=request.POST['inv_amount2'],
                    #    openbal2=request.POST['openbal2'],
                    #    payment2=request.POST['payment2'], descrip3=request.POST['invno3'],
                    #    duedate3=request.POST['duedate3'],
                    #    orgamt3=request.POST['inv_amount3'], openbal3=request.POST['openbal3'],
                    #    payment3=request.POST['payment3'], descrip4=request.POST['invno4'],
                    #    duedate4=request.POST['duedate4'],
                    #    orgamt4=request.POST['inv_amount4'], openbal4=request.POST['openbal4'],
                    #    payment4=request.POST['payment4'], descrip5=request.POST['invno5'],
                    #    duedate5=request.POST['duedate5'],
                    #    orgamt5=request.POST['inv_amount5'], openbal5=request.POST['openbal5'],
                    #    payment5=request.POST['payment5'], descrip6=request.POST['invno6'],
                    #    duedate6=request.POST['duedate6'],
                    #    orgamt6=request.POST['inv_amount6'], openbal6=request.POST['openbal6'],
                    #    payment6=request.POST['payment6'], descrip7=request.POST['invno7'],
                    #    duedate7=request.POST['duedate7'],
                    #    orgamt7=request.POST['inv_amount7'], openbal7=request.POST['openbal7'],
                    #    payment7=request.POST['payment7'], descrip8=request.POST['invno8'],
                    #    duedate8=request.POST['duedate8'],
                    #    orgamt8=request.POST['inv_amount8'], openbal8=request.POST['openbal8'],
                    #    payment8=request.POST['payment8'], descrip9=request.POST['invno9'],
                    #    duedate9=request.POST['duedate9'],
                    #    orgamt9=request.POST['inv_amount9'], openbal9=request.POST['openbal9'],
                    #    payment9=request.POST['payment9'],
                       
                        )
        pay2.save()
        pay2.refno = int(pay2.refno) + pay2.paymentid
        pay2.save()


        statment2=cust_statment()
        statment2.customer = pay2.customer
        statment2.cid = cmp1
        statment2.Transactions = "Payment Received"
        statment2.pay = pay2
        statment2.Date = pay2.paymdate
        statment2.Payments = pay2.amtapply
        statment2.save()
        
        





        invno = request.POST.getlist("invno[]")
        invdate = request.POST.getlist("invdate[]")

        duedate = request.POST.getlist("duedate[]")
        invamount = request.POST.getlist("inv_amount[]")
        balamount = request.POST.getlist("openbal[]")
        paymentamount = request.POST.getlist("payment[]")

        payment_id=payment.objects.get(paymentid = pay2.paymentid )

        if len(invno)==len(duedate)==len(invamount)==len(balamount)==len(paymentamount)==len(invdate) and invno and duedate and invamount and balamount and paymentamount and invdate :
            mapped=zip(invno,duedate,invamount,balamount,paymentamount,invdate)
            mapped=list(mapped)
            for ele in mapped:
                salesorderAdd,created = paymentitems.objects.get_or_create(
                    invno = ele[0],
                    duedate=ele[1],
                    invamount=ele[2],
                    balamount=int(ele[3]) - int(ele[4]) ,
                    paymentamount=ele[4],
                    payment=payment_id,
                    cid = cmp1,
                    invdate=ele[5],
                     )

        pyit = paymentitems.objects.filter(payment=pay2.paymentid)
        print(pyit)
        amt =0
        for m in pyit:
            if m.balamount:
                amt+=m.balamount
        pay2.balance = amt     
        pay2.save()
        amtreceived = float(request.POST['amtreceived'])
        accont = accounts1.objects.get(
            name='Account Receivable(Debtors)', cid=cmp1)
        accont.balance = accont.balance - amtreceived
        accont.save()
        deposito = request.POST['depto']
        try:
            if accounts1.objects.get(name=deposito, cid=cmp1):
                print(deposito)
                acconut = accounts1.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        try:
            if accounts.objects.get(name=deposito, cid=cmp1):
                acconut = accounts.objects.get(name=deposito, cid=cmp1)
                acconut.balance = acconut.balance + amtreceived
                acconut.save()
        except:
            pass
        # 
        paymetitem = paymentitems.objects.filter()
        
        pay2.save()

        x = pay2.customer.split()
        x.append(" ")
        a = x[0]
        b = x[1]
        if x[2] is not None:
            b = x[1] + " " + x[2]

        
        for i in paymetitem:
            if i.invno != "Customer opening balance":
                if invoice.objects.get(invoiceno=i.invno, cid=cmp1) and i.invno != 'undefined':
                    print(deposito)
                    invo = invoice.objects.get(invoiceno=i.invno, cid=cmp1)
                    invo.amtrecvd = int(invo.amtrecvd) + int(i.paymentamount)
                    invo.baldue = float(i.balamount) 
                    if invo.baldue == 0.0:
                        invo.status = "Paid"
        
                        invo.save()
            if i.invno == "Customer opening balance":            
                if customer.objects.get(firstname=a,lastname= b , cid=cmp1) and i.invno != 'undefined': 
                    cust=customer.objects.get(firstname=a,lastname= b , cid=cmp1)
                    cust.opening_balance_due = float(i.balamount)
                    cust.opnbalance_status = "Paid"
                    cust.save()


        return redirect('gopayment_received')
    else:
        return redirect('gopayment_received')


def search_payment_received(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    if request.method == "POST":
        search_str = json.loads(request.body).get('searchText')

        expenses = payment.objects.filter(customer__istartswith=search_str,cid=cmp1) | payment.objects.filter(
            paymdate__istartswith=search_str,cid=cmp1)| payment.objects.filter(
            referno__icontains=search_str,cid=cmp1)| payment.objects.filter(
            amtcredit__istartswith=search_str,cid=cmp1) | payment.objects.filter(
            refno__istartswith=search_str,cid=cmp1)
           
        data =expenses .values()  
        return JsonResponse(list(data),safe=False) 

        
          


def payment_view(request,id):
    cmp1 = company.objects.get(id=request.session["uid"])
    pay = payment.objects.get(paymentid=id)
    pk =  pay.customer 
    x = pk.split()
    x.append(" ")
    a = x[0]
    b = x[1]
    if x[2] is not None:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
    

    context = {
        'pay':pay ,
        'cmp1':cmp1,
        'custobject':custobject
    }

    return render(request,'app1/payment_view.html',context)




def edit_payment(request,id):
    cmp1 = company.objects.get(id=request.session["uid"])
    pay = payment.objects.get(paymentid=id)
    pk =  pay.customer 
    x = pk.split()
    x.append(" ")
    a = x[0]
    b = x[1]
    if x[2] is not None:
        b = x[1] + " " + x[2]
        custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
    payitem = paymentitems.objects.filter(payment=pay) 

    count = paymentitems.objects.filter(payment=pay).count()
    print(count)
    context = {
        'pay':pay ,
        'cmp1':cmp1,
        'custobject':custobject,
        'payitem':payitem,
        'count':count,
    }

    return render(request,'app1/payment_edit.html',context)



def edit_payment2(request,id):
    if request.method=='POST':
        cmp1 = company.objects.get(id=request.session["uid"])
        pay = payment.objects.get(paymentid=id,cid=cmp1)

        pay.customer = request.POST['customername']
        pay.email = request.POST['email']
        pay.paymdate = request.POST['paymdate']
        pay.pmethod = request.POST['pmethod']
        
        pay.depto = request.POST['depto']
        
        pay.amtreceived = request.POST['amtreceived']
        pay.amtapply = request.POST['amtapply']
        pay.amtcredit = request.POST['amtcredit']
        pay.referno = request.POST['ref']
        pay.save()


        invno = request.POST.getlist("invno[]")
        invdate = request.POST.getlist("invdate[]")

        duedate = request.POST.getlist("duedate[]")
        invamount = request.POST.getlist("inv_amount[]")
        balamount = request.POST.getlist("openbal[]")
        paymentamount = request.POST.getlist("payment[]")

        payitemid = request.POST.getlist("id[]")

        payment_id=payment.objects.get(paymentid = pay.paymentid )

        if len(invno)==len(duedate)==len(invamount)==len(balamount)==len(paymentamount)==len(invdate)==len(invdate) and invno and duedate and invamount and balamount and paymentamount and invdate and payitemid :
            mapped=zip(invno,duedate,invamount,balamount,paymentamount,invdate,payitemid)
            mapped=list(mapped)
            for ele in mapped:
                created = paymentitems.objects.filter(cid=cmp1,payment=ele[6]).update(
                    invno = ele[0],
                    duedate=ele[1],
                    invamount=ele[2],
                    balamount=ele[3],
                    paymentamount=ele[4],
                    invdate=ele[5],
                     )
                # invitems = invoice.objects.get(cid=cmp1,invoiceno=ele[0])
                
                # print(invitems)
                # temp=0
                # temp = invitems.baldue
                # print(temp)
                # tmp = int(ele[4])
                
                # temp = temp-tmp 
                # print(temp)
                # invitems.baldue = temp
                # invitems.save() 


        pyit = paymentitems.objects.filter(payment=pay.paymentid)
        print(pyit)
        amt =0
        for m in pyit:
            if m.balamount:
                amt+=m.balamount
        pay.balance = amt     
        pay.save()


        statment2=cust_statment.objects.get(cid=cmp1,pay=pay)
        statment2.customer = pay.customer
        statment2.cid = cmp1
        statment2.Transactions = "Payment Received"
    
        statment2.Date = pay.paymdate
        statment2.Payments = pay.amtapply
        statment2.save()

        return redirect('payment_view',id)


    return redirect('payment_view',id)
   






def delete_payment(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    pay = payment.objects.get(paymentid=id,cid = cmp1)
    pay.delete()

    return redirect('gopayment_received')

def account_transactions(request,id):
    cmp1 = company.objects.get(id=request.session["uid"])

    cust = customer.objects.get(customerid=id)

    x = cust.firstname +" "+cust.lastname
    a = cust.firstname
    b = cust.lastname

    toda = date.today()
    tod = toda.strftime("%Y-%m-%d")

    to=toda.strftime("%d-%m-%Y")
    
    custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
    opnbal =custobject.opening_balance
    print(opnbal) 
    
    statment = cust_statment.objects.filter(customer=x,cid=cmp1)
    debit=0
    credit=0
    total1 = 0
    

    for i in statment :
        if i.Amount:
            debit+=i.Amount
        if i.Payments:
            credit+=i.Payments

    total1=debit-credit          

    bal=custobject.opening_balance
    for i in statment:
        if i.Transactions =="Invoice":
            
            i.Balance = bal + i.Amount
            bal = i.Balance
        if i.Transactions =="Payment Received":
            
            i.Balance = bal-i.Payments
            

        i.save() 
    print(bal)

    fdate =""
    ldate =""

    context = {
        "statment":statment,
        "cmp1":cmp1,
        'total1':total1,
        'credit':credit,
        'cust2':id,
        'to':to,
        'fdate':fdate,
        'ldate':ldate,
        
    }

    return render(request,'app1/account_transactions.html',context)

def account_transactions1(request):

    if request.method =="POST":
        cust = request.POST['cust']

        select=request.POST['reportperiod']

        if select =="All dates":
            return redirect('account_transactions',cust)
        if select == "Custom":
            fdate = request.POST['fdate']
            ldate = request.POST['ldate']
            cust =  request.POST['cust']
            cmp1 = company.objects.get(id=request.session["uid"])
            print(fdate)

            cust = customer.objects.get(customerid=cust)

            cu = cust.firstname +" "+cust.lastname
            a = cust.firstname
            b = cust.lastname

            custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
            opnbal =custobject.opening_balance
            print(opnbal) 

            statment1 = cust_statment.objects.filter(customer=cu,cid=cmp1)
            bal=0
            for i in statment1:
                if i.Transactions =="Invoice":
                    if i.Amount:
                        i.Balance = bal + i.Amount
                        bal = i.Balance
                if i.Transactions =="Payment Received":
                    if i.Payments:
                        i.Balance = bal-i.Payments
            

                i.save() 

            preamount=0
            prepayment=0
            prebalance = 0
            prev_balance = cust_statment.objects.filter(customer=cu,Date__lt=fdate)
            for j in prev_balance:
                if j.Amount:
                    preamount += j.Amount

                if j.Payments:
                    prepayment += j.Payments
    

            prebalance = preamount-prepayment
            print(prebalance)   

            statment = cust_statment.objects.filter(customer=cu,cid=cmp1,Date__gte=fdate,Date__lte=ldate)
            bal=0
            for i in statment:
                if i.Transactions =="Invoice":
                    if i.Amount:
                        i.Balance = bal + i.Amount
                        bal = i.Balance
                if i.Transactions =="Payment Received":
                    if i.Payments:
                        i.Balance = bal-i.Payments
            

                i.save()  

            value = ""
            if statment.exists():
                value=1

            debit=0
            credit=0
            total1 = 0
    

            for i in statment :
                if i.Amount:
                    debit+=i.Amount
                if i.Payments:
                    credit+=i.Payments

            total1=prebalance+debit-credit          

            bal=custobject.opening_balance
            
        
            context = {
            "statment":statment,
            "cmp1":cmp1,
            'total1':total1,
            'credit':credit,
            "cust2":cust.customerid,
            "prebalance":prebalance,
            'fdate':fdate,
            'ldate':ldate,
            'value':value,


            }


            return render(request,'app1/account_transactions.html',context)




def getitems2(request):
    
    cmp1 = company.objects.get(id=request.session["uid"])
    id = request.GET.get('id')

    item = itemtable.objects.get(name=id,cid=cmp1)
    print(item)
    hsn = item.hsn
    desp = item.sale_desc
    qty = item.stock
    price = item.sales_cost
    gst = item.intra_st
    sgst = item.inter_st


    
    return JsonResponse({"status":" not",'hsn':hsn,'desp':desp,'qty':qty,'price':price,'gst':gst,'sgst':sgst,
        
        })
@login_required(login_url='regcomp')
def estimate_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    est = estimate.objects.get(estimateid=id,cid=cmp1)

    if request.method == 'POST':
        
        if len(request.FILES) != 0:
           
            if est.file != "default.jpg":
                 os.remove(est.file.path)
                
            est.file=request.FILES['file']
        
        est.save()
        return redirect('estimate_view',id)
      

@login_required(login_url='regcomp')
def sales_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    sale = salesorder.objects.get(id=id,cid=cmp1)

    if request.method == 'POST':
        
        if len(request.FILES) != 0:
           
            if sale.file != "default.jpg":
                 os.remove(sale.file.path)
                
            sale.file=request.FILES['file']
        
        sale.save()
        return redirect('estimate_view',id)
      
@login_required(login_url='regcomp')
def invoice_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    inv = invoice.objects.get(invoiceid=id,cid=cmp1)

    if request.method == 'POST':
        
        if len(request.FILES) != 0:
           
            if inv.file != "default.jpg":
                 os.remove(inv.file.path)
                
            inv.file=request.FILES['file']
        
        inv.save()
        return redirect('invoice_view',id)
      

def gstr11(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    if request.method=='POST':
        current_year = date.today().year
        
        next_year = current_year+1
        previous_year = current_year-1

        option = request.POST['option']

        if option == 'All':
            return redirect('gstr1')

        if option == 'March-May':
            invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

            invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
            invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 

            invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).count()
            cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=3,invoicedate__month__lte=5).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                          

    
    
   
    
            c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5
    

        

            context = {'cmp1':cmp1,
            'invoices':invoices,'cgst':cgst,
            'invoices1':invoices1,'cgst1':cgst1,
            'invoices2':invoices2,'cgst2':cgst2,
            'invoices3':invoices3,'cgst3':cgst3,
            'invoices4':invoices4,'cgst4':cgst4,
            'invoices5':invoices5,'cgst5':cgst5,
            'c':c,
    
    
            }
            return render(request, 'app1/gstr1.html', context)
        if option == 'June-August':
           

            invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

            invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
            invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                            

    
    
            invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).count()
            cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=6,invoicedate__month__lte=8).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                          

    
    
   
    
            c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5
    

        

            context = {'cmp1':cmp1,
            'invoices':invoices,'cgst':cgst,
            'invoices1':invoices1,'cgst1':cgst1,
            'invoices2':invoices2,'cgst2':cgst2,
            'invoices3':invoices3,'cgst3':cgst3,
            'invoices4':invoices4,'cgst4':cgst4,
            'invoices5':invoices5,'cgst5':cgst5,
            'c':c,
    
    
            }
            return render(request, 'app1/gstr1.html', context)
        if option == 'September-November':
           

            invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

            invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
            invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                            

    
    
   
    
            invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).count()
            cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year=current_year,invoicedate__month__gte=9,invoicedate__month__lte=11).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                          

    
    
   
    
            c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5
    

        

            context = {'cmp1':cmp1,
            'invoices':invoices,'cgst':cgst,
            'invoices1':invoices1,'cgst1':cgst1,
            'invoices2':invoices2,'cgst2':cgst2,
            'invoices3':invoices3,'cgst3':cgst3,
            'invoices4':invoices4,'cgst4':cgst4,
            'invoices5':invoices5,'cgst5':cgst5,
            'c':c,
    
    
            }
    
            return render(request, 'app1/gstr1.html', context) 

        if option == 'December-February':
           

            invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

            invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
            invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                            

    
    
   
    
            invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).count()
            cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year__gte=current_year,invoicedate__year__lte=next_year,invoicedate__month__gte=12,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                          

    
    
   
    
            c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5
    

        

            context = {'cmp1':cmp1,
            'invoices':invoices,'cgst':cgst,
            'invoices1':invoices1,'cgst1':cgst1,
            'invoices2':invoices2,'cgst2':cgst2,
            'invoices3':invoices3,'cgst3':cgst3,
            'invoices4':invoices4,'cgst4':cgst4,
            'invoices5':invoices5,'cgst5':cgst5,
            'c':c,
    
    
            }
            return render(request, 'app1/gstr1.html', context)  

        if option == 'Previous-Year':
            invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

            invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
            invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ',invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
            invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc",invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                            

    
    
   
    
            invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).count()
            cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt",invoicedate__year__gte=previous_year,invoicedate__year__lte=current_year,invoicedate__month__gte=3,invoicedate__month__lte=2).aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                          

    
    
   
    
            c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5
    

        

            context = {'cmp1':cmp1,
            'invoices':invoices,'cgst':cgst,
            'invoices1':invoices1,'cgst1':cgst1,
            'invoices2':invoices2,'cgst2':cgst2,
            'invoices3':invoices3,'cgst3':cgst3,
            'invoices4':invoices4,'cgst4':cgst4,
            'invoices5':invoices5,'cgst5':cgst5,
            'c':c,
    
    
            }
            return render(request, 'app1/gstr1.html', context) 



    return redirect('gstr1')    
        
    



# Ananthakrishnanend


# Rahanas

@login_required(login_url='regcomp')
def add_item(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        unit = unittable.objects.filter(cid=cmp1)
        acc  = accounts1.objects.filter(acctype='Cost of Goods Sold',cid=cmp1)
        acc1  = accounts1.objects.filter(acctype='Sales',cid=cmp1)
        context = {'unit':unit,'acc':acc,'acc1':acc1,'cmp1': cmp1}
        return render(request, 'app1/additem.html',context)
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def add_unit(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request, 'app1/unitcreation.html',{'cmp1': cmp1})    
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def goitem(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.filter(cid=cmp1)
        context = {'items':items,'cmp1':cmp1}
        return render(request, 'app1/itemmodule.html',context)  
    except:
        return redirect('goitem')

def iactive(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.filter(status='Active',cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context) 
    except:
        return redirect('goitem')

def inactive(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.filter(status='Inactive',cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)     
    except:
        return redirect('goitem')

def igoods(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.filter(item_type='goods',cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context) 
    except:
        return redirect('goitem')

def iservices(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.filter(item_type='services',cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)    
    except:
        return redirect('goitem') 

def ipurchase(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.exclude(purchase_cost='').filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)     
    except:
        return redirect('goitem')

def isales(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.exclude(sales_cost='').filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)         
    except:
        return redirect('goitem')





def iordername(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.order_by('name').filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)      
    except:
        return redirect('goitem')

def iodhsn(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.order_by('hsn').filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)         
    except:
        return redirect('goitem')

def iod_rate(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        # items = itemtable.objects.order_by('tax_rate').filter(cid=cmp1)
        # context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',{'cmp1': cmp1})  
    except:
        return redirect('goitem')



def iod_import(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.exclude(purchase_cost="").filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)  
    except:
        return redirect('goitem')

def iod_export(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        items = itemtable.objects.exclude(sales_cost="").filter(cid=cmp1)
        context = {'items':items,'cmp1': cmp1}
        return render(request, 'app1/itemmodule.html',context)              
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def create_item(request):
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            #itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST.get('invacc')
            istock = request.POST.get('stock')
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                #tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('goitem')
        return render(request,'app1/additem.html')


@login_required(login_url='regcomp')
def create_unit(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            usymbol = request.POST['usymbol']
            uname = request.POST['uname']
            unit = unittable(unit_symbol=usymbol,name=uname)
            unit.save()
            return redirect('add_item')
        return render(request,'app1/unitcreation.html',{'cmp1': cmp1})    
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def deleteitem(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        try:
            sl = itemtable.objects.get(id=id)
            sl.delete()
            return redirect('goitem',{'cmp1': cmp1})
        except:
            return redirect('goitem')
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def view_item(request,id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        item = itemtable.objects.filter(id=id)
        context = {'item':item,'cmp1': cmp1}
        return render(request,'app1/item_view.html',context)
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def itemedit_page(request,id):   
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        item = itemtable.objects.filter(id=id)
        unit = unittable.objects.filter(cid=cmp1)
        acc  = accounts1.objects.filter(acctype='Cost of Goods Sold',cid=cmp1)
        acc1  = accounts1.objects.filter(acctype='Sales',cid=cmp1)
        context = {'item':item,'unit':unit,'acc':acc,'acc1':acc1,'cmp1': cmp1}
        return render(request,'app1/item_edit.html',context) 
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def update_item(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            item = itemtable.objects.get(id=id)
            item.name = request.POST.get('name')
            item.item_type = request.POST.get('type')
            item.unit = request.POST.get('unit')
            item.hsn = request.POST.get('hsn')
            item.tax_reference = request.POST.get('taxref')
            item.purchase_cost = request.POST.get('pcost')
            item.sales_cost = request.POST.get('salesprice')
            # item.tax_rate = request.POST.get('tax')
            item.acount_pur = request.POST.get('pur_account')
            item.account_sal = request.POST.get('sale_account')
            item.pur_desc = request.POST.get('pur_desc')
            item.sale_desc = request.POST.get('sale_desc')
            item.intra_st = request.POST.get('intra_st')
            item.inter_st = request.POST.get('inter_st')
            item.inventry = request.POST.get('invacc')
            item.stock = request.POST.get('stock')
            item.status = request.POST.get('status')
            item.save()
            return redirect('goitem')
        return render(request,'app1/item_view.html',{'cmp1': cmp1})    
    except:
        return redirect('goitem')

@login_required(login_url='regcomp')
def gomjoural(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        mj = mjournal.objects.filter(cid=cmp1)
        return render(request,'app1/mjournal.html',{'mj':mj})
    except:
        return redirect('gomjoural')    

@login_required(login_url='regcomp')
def add_mjournal(request): 
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        acc = accounts1.objects.filter(cid=cmp1)
        cust = customer.objects.filter(cid=cmp1)
        context = {'acc':acc,'cmp1':cmp1,'cust':cust}
        return render(request,'app1/add_mjournal.html',context)    
    except:
        return redirect('gomjoural')    


@login_required(login_url='regcomp')
def create_mjournal(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session['uid'])
        mjdate = request.POST['dateto1']
        mjno = request.POST['jnum']
        mjrno = request.POST.get('rjnum')
        notes = request.POST['jnotes']
        currency = request.POST['jcurrency']
        mjtype = request.POST.get('jtype')
        acc1 = request.POST.get('account')
        desc1 = request.POST['jdesc']
        cont1 = request.POST['jcontact']
        deb1 = request.POST['jdebit']
        cred1 = request.POST['jcredit']
        acc2 = request.POST.get('account1')
        desc2 = request.POST['jdesc1']
        cont2 = request.POST['jcontact1']
        deb2 = request.POST['jdebit1']
        cred2 = request.POST['jcredit1']
        file = request.FILES.get('pic')
        subtotal = request.POST['sub_total']
        subtotal1 = request.POST['sub_total1']
        total = request.POST['total_amount']
        total1 = request.POST['total_amount1']
        differ = request.POST['differ']
            
        mjrnl = mjournal(date=mjdate,mj_no=mjno,ref_no=mjrno,
                                notes=notes,j_type=mjtype,
                                currency=currency,
                                account1=acc1,
                                desc1=desc1,
                                contact1=cont1,
                                debit1=deb1,
                                credit1=cred1,
                                account2=acc2,
                                desc2=desc2,
                                contact2=cont2,
                                debit2=deb2,
                                credit2=cred2,
                                attach=file,
                                s_totaldeb=subtotal,
                                s_totalcre=subtotal1,
                                total_deb=total,
                                total_cre=total1,
                                difference=differ,
                                cid=cmp1)

        if deb1 == cred2:
            mjrnl.save()
        else:    
            messages.info( request, 'Please ensure that the debit and credit are equal')
            return render(request, 'app1/add_mjournal.html')                        
        return redirect('gomjoural')
    return render(request,'app1/add_mjournal.html')
         

@login_required(login_url='regcomp')
def view_mj(request,id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        mjl = mjournal.objects.filter(id=id)
        context = {'mjl':mjl,'cmp1': cmp1}
        return render(request,'app1/view_mj.html',context)
    except:
        return redirect('gomjoural')         

@login_required(login_url='regcomp')
def mj_edit_page(request,id):   
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        mjrnl = mjournal.objects.filter(id=id)
        acc  = accounts1.objects.filter(cid=cmp1)
        context = {'mjrnl':mjrnl,'acc':acc,'cmp1': cmp1}
        return render(request,'app1/mj_edit.html',context) 
    except:
        return redirect('gomjoural')

@login_required(login_url='regcomp')
def update_mj(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            mjrnl = mjournal.objects.get(id=id)
            mjrnl.date = request.POST.get('dateto1')
            mjrnl.mj_no = request.POST.get('jnum')
            mjrnl.ref_no = request.POST.get('rjnum')
            mjrnl.notes = request.POST.get('jnotes')
            mjrnl.j_type = request.POST.get('jtype')
            mjrnl.currency = request.POST.get('jcurrency')
            mjrnl.account1 = request.POST.get('account')
            mjrnl.desc1 = request.POST.get('jdesc')
            mjrnl.contact1 = request.POST.get('jcontact')
            mjrnl.debit1 = request.POST.get('jdebit')
            mjrnl.credit1 = request.POST.get('jcredit')
            mjrnl.account2 = request.POST.get('account1')
            mjrnl.desc2 = request.POST.get('jdesc1')
            mjrnl.contact2 = request.POST.get('jcontact1')
            mjrnl.debit2 = request.POST.get('jdebit1')
            mjrnl.credit2 = request.POST.get('jcredit1')
            mjrnl.attach = request.POST.get('pic')
            mjrnl.s_totaldeb = request.POST.get('sub_total')
            mjrnl.s_totalcre = request.POST.get('sub_total1')
            mjrnl.total_deb = request.POST.get('total_amount')
            mjrnl.total_cre = request.POST.get('total_amount1')
            mjrnl.difference = request.POST.get('differ')
            mjrnl.status = request.POST.get('status')
            mjrnl.save()
            return redirect('gomjoural')
        return render(request,'app1/view_mj.html',{'cmp1': cmp1})    
    except:
        return redirect('gomjoural')

        
 
@login_required(login_url='regcomp')
def deletemj(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        try:
            sl = mjournal.objects.get(id=id)
            sl.delete()
            return redirect('gomjoural',{'cmp1': cmp1})
        except:
            return redirect('gomjoural')
    except:
        return redirect('gomjoural')       

def mjdraft(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        mj = mjournal.objects.filter(status='DRAFT',cid=cmp1)
        return render(request,'app1/mjournal.html',{'mj':mj})
    except:
        return redirect('gomjoural')            

@login_required(login_url='regcomp')
def C_profile(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/com_profile.html', context)
    except:
        return redirect('godash') 

@login_required(login_url='regcomp')
def update_cprofile(request):
    if request.method=="POST":
        user = User.objects.get(id=request.session["uid"])
        comp = company.objects.get(id=user.id)


        comp.cname = request.POST["cname"]
        comp.caddress = request.POST["caddress"]
        comp.city = request.POST["city"]
        comp.state = request.POST["state"]
        comp.pincode = request.POST["pincode"]
        comp.cemail = request.POST["cemail"]
        comp.phone = request.POST["phone"]
        comp.bname = request.POST["bname"]
        comp.industry = request.POST["industry"]
        comp.ctype = request.POST["ctype"]
        if request.FILES.get('img1') is not None:
            if not comp.cimg == "images/images.png":
                comp.cimg = request.FILES['img1']
            else:
                comp.cimg = request.FILES['img1']
        else:
            comp.cimg = "images/images.png"    



        comp.save()
        user.save()

        return redirect('godash')        

@login_required(login_url='regcomp')
def view_users(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        user1 = User.objects.all()
        context = {'user1': user1, 'cmp1': cmp1}
        return render(request, 'app1/users.html', context)
    except:
        return redirect('godash')        

@login_required(login_url='regcomp')
def Currencies(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        curr = currencies.objects.filter(cid=cmp1)
        context = {'cmp1': cmp1,'curr':curr}
        return render(request, 'app1/currencies.html', context)
    except:
        return redirect('godash')        

@login_required(login_url='regcomp')
def addcurrencies(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        context = {'cmp1': cmp1}
        return render(request, 'app1/add_currency.html', context)
    except:
        return redirect('Currencies')                   

@login_required(login_url='regcomp')
def create_currency(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            ccode = request.POST['code']
            csymbol = request.POST['symbol']
            cname = request.POST.get('name')
            cdplaces = request.POST['dplace']
            cformat = request.POST['format']
            curr = currencies(code=ccode,name=cname,symbol=csymbol,
                                decimal_places=cdplaces,format=cformat,
                                cid=cmp1)
            curr.save()
            return redirect('Currencies')
        return render(request,'app1/currencies.html')
    except:
        return redirect('Currencies')        


@login_required(login_url='regcomp')
def update_currency(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            curr = currencies.objects.get(currencyid=id)
            curr.code = request.POST.get('code')
            curr.symbol = request.POST.get('symbol')
            curr.name = request.POST.get('name')
            curr.decimal_places = request.POST.get('dplace')
            curr.format = request.POST.get('format')
            
            curr.save()
            return redirect('Currencies')
        return render(request,'app1/currencies.html',{'cmp1': cmp1})    
    except:
        return redirect('Currencies')   

@login_required(login_url='regcomp')
def delete_currency(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        try:
            sl = currencies.objects.get(currencyid=id)
            sl.delete()
            return redirect('Currencies',{'cmp1': cmp1})
        except:
            return redirect('Currencies')
    except:
        return redirect('Currencies')              


@login_required(login_url='regcomp')
def gotemplates(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/templates.html')
    except:
        return redirect('godash')         

@login_required(login_url='regcomp')
def temp_inv(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_invoice.html')
    except:
        return redirect('gotemplates')       

@login_required(login_url='regcomp')
def edit_currencies(request,id):   
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        curr = currencies.objects.filter(currencyid=id)
        context = {'curr':curr,'cmp1': cmp1}
        return render(request,'app1/edit_currency.html',context) 
    except:
        return redirect('Currencies')            

@login_required(login_url='regcomp')
def temp_est(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_estimate.html',{'cmp1':cmp1})
    except:
        return redirect('gotemplates')         


def mjpublish(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        mj = mjournal.objects.filter(status='publish',cid=cmp1)
        return render(request,'app1/mjournal.html',{'mj':mj})
    except:
        return redirect('gomjoural')


@login_required(login_url='regcomp')
def temp_payrec(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_payment_receipt.html')
    except:
        return redirect('gotemplates')

@login_required(login_url='regcomp')
def temp_vendpay(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_vendor_payment.html')
    except:
        return redirect('gotemplates')        

@login_required(login_url='regcomp')
def temp_custst(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_cust_stmnt.html')
    except:
        return redirect('gotemplates')                

@login_required(login_url='regcomp')
def temp_vendst(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_vend_stmnt.html')
    except:
        return redirect('gotemplates')      

@login_required(login_url='regcomp')
def temp_deliveryc(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_deliveryc.html')
    except:
        return redirect('gotemplates')        

@login_required(login_url='regcomp')
def temp_creditnote(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_creditnote.html')
    except:
        return redirect('gotemplates')             

@login_required(login_url='regcomp')
def temp_salesorder(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_salesorder.html')
    except:
        return redirect('gotemplates')   

@login_required(login_url='regcomp')
def temp_purchaseorder(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_purchaseorder.html')
    except:
        return redirect('gotemplates')       

@login_required(login_url='regcomp')
def temp_vendorcredit(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_vendorcredit.html')
    except:
        return redirect('gotemplates')   

@login_required(login_url='regcomp')
def temp_journal(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_journal.html')
    except:
        return redirect('gotemplates')                                     


@login_required(login_url='regcomp')
def temp_bill(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        return render(request,'app1/tem_bill.html')
    except:
        return redirect('gotemplates')





@login_required(login_url='regcomp')
def item_trans(request,id):   
        cmp1 = company.objects.get(id=request.session['uid'])
        item = itemtable.objects.filter(id=id)
        sales = salesorder.objects.filter(cid=cmp1)
        purchase = purchaseorder.objects.all()
        pitems  = purchaseorder_item.objects.all()
        sitems  = sales_item.objects.all()
        est = estimate.objects.filter(cid=cmp1)
        eitems = estimate_item.objects.all()
        inv = invoice.objects.filter(cid=cmp1)
        iitems = invoice_item.objects.all()
        bill = purchasebill.objects.all()
        bitems = purchasebill.objects.all()
        context = {'item':item,'bill':bill,'bitems':bitems,'inv':inv,'iitems':iitems,'sales':sales,'pitems':pitems,'sitems':sitems,'cmp1': cmp1,'purchase':purchase,'est':est,'eitems':eitems}
        return render(request,'app1/item_transactions.html',context) 
        
@login_required(login_url='regcomp')
def gostock_adjust(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        stock = stockadjust.objects.filter(cid=cmp1)
        context = {'cmp1':cmp1,'stock':stock}
        return render(request, 'app1/gostock_adjust.html',context)  
    except:
        return redirect('gostock_adjust')        

@login_required(login_url='regcomp')
def saf_quandity(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        stock = stockadjust.objects.filter(cid=cmp1,mode="Quandity")
        context = {'cmp1':cmp1,'stock':stock}
        return render(request, 'app1/gostock_adjust.html',context)  
    except:
        return redirect('gostock_adjust')    

@login_required(login_url='regcomp')
def saf_value(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        stock = stockadjust.objects.filter(cid=cmp1,mode="Value")
        context = {'cmp1':cmp1,'stock':stock}
        return render(request, 'app1/gostock_adjust.html',context)  
    except:
        return redirect('gostock_adjust')              


@login_required(login_url='regcomp')
def stock_adjustpage(request):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        acc = accounts1.objects.filter(cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1)
        reason = stockreason.objects.filter(cid=cmp1)
        context = {'cmp1':cmp1,'acc':acc,'item':item,'reason':reason}
        return render(request, 'app1/add_stock_adjust.html',context)  
    except:
        return redirect('gostock_adjust')             


def getit(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    id = request.GET.get('id')
    list = []
    itemobject = itemtable.objects.get(name=id, cid=cmp1)
    dict = {'name': itemobject.name,
            'item_type': itemobject.item_type,
            'unit': itemobject.unit,
            'hsn': itemobject.hsn,
            'tax_reference': itemobject.tax_reference,
            'purchase_cost': itemobject.purchase_cost,
            'sales_cost': itemobject.sales_cost,
            # 'tax_rate': itemobject.tax_rate,
            'acount_pur': itemobject.acount_pur,
            'account_sal': itemobject.account_sal,
            'pur_desc': itemobject.pur_desc,
            'sale_desc': itemobject.sale_desc,
            'intra_st': itemobject.intra_st,
            'inter_st': itemobject.inter_st,
            'inventry': itemobject.inventry,
             'stock': itemobject.stock,
             'status': itemobject.status}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)


@login_required(login_url='regcomp')
def create_reason(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            ireason = request.POST['reason1']
            
            item = stockreason(reason=ireason,
                                cid=cmp1)
            item.save()
            return redirect('stock_adjustpage')
        return render(request,'app1/add_stock_adjust.html')
    except:
        return redirect('stock_adjustpage')



@login_required(login_url='regcomp')
def create_stock_adjustment(request):
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            smode = request.POST['mode']
            sreference = request.POST['refno']
            sadte = request.POST.get('date')
            saccount = request.POST['account']
            sreason = request.POST['reason']
            sdescription = request.POST['desc']
            sattach = request.FILES.get('file')

            sitem1 = request.POST['item1']
            sqty1 = request.POST['qty1']
            sqtyh1 = request.POST['qty_hand1']
            snqty1 = request.POST['new_qty1']

            sitem2 = request.POST.get('item2')
            sqty2 = request.POST['qty2']
            sqtyh2 = request.POST['qty_hand2']
            snqty2 = request.POST['new_qty2']

            sitem3 = request.POST.get('item3')
            sqty3 = request.POST['qty3']
            sqtyh3 = request.POST['qty_hand3']
            snqty3 = request.POST['new_qty3']

            sitem4 = request.POST.get('item4')
            sqty4 = request.POST['qty4']
            sqtyh4 = request.POST['qty_hand4']
            snqty4 = request.POST['new_qty4']

            sitem5 = request.POST.get('item5')
            sqty5 = request.POST['qty5']
            sqtyh5 = request.POST['qty_hand5']
            snqty5 = request.POST['new_qty5']
            
            stock = stockadjust(mode=smode,ref_no=sreference,date=sadte,
                                account=saccount,reason=sreason,
                                description=sdescription,
                                attach=sattach,
                                item1=sitem1,
                                qty1=sqty1,
                                qty_hand1=sqtyh1,
                                new_qty1=snqty1,
                                item2=sitem2,
                                qty2=sqty2,
                                qty_hand2=sqtyh2,
                                new_qty2=snqty2,
                                item3=sitem3,
                                qty3=sqty3,
                                qty_hand3=sqtyh3,
                                new_qty3=snqty3,
                                item4=sitem4,
                                qty4=sqty4,
                                qty_hand4=sqtyh4,
                                new_qty4=snqty4,
                                item5=sitem5,
                                qty5=sqty5,
                                qty_hand5=sqtyh5,
                                new_qty5=snqty5,
                                cid=cmp1)
            item = itemtable.objects.get(name=sitem1)
            item.stock = stock.qty_hand1
            item.save()  
            try:
                item1 = itemtable.objects.get(name=sitem2)
                item1.stock = stock.qty_hand2
                item1.save() 
            except itemtable.DoesNotExist:
                item1 = None
            try:
                item2 = itemtable.objects.get(name=sitem3)
                item2.stock = stock.qty_hand3
                item2.save() 
            except itemtable.DoesNotExist:
                item1 = None
            try:        
                item3 = itemtable.objects.get(name=sitem4)
                item3.stock = stock.qty_hand4
                item3.save() 
            except itemtable.DoesNotExist:
                item1 = None  
            try:      
                item4 = itemtable.objects.get(name=sitem5)
                item4.stock = stock.qty_hand5
                item4.save()  
            except itemtable.DoesNotExist:
                item1 = None                     
            stock.save()
            
            messages.success(request, 'Stock adjusted successfully')
            
            return redirect('stock_adjustpage')
        return render(request,'app1/add_stock_adjust.html')


@login_required(login_url='regcomp')
def view_stockadjust(request,id):
        cmp1 = company.objects.get(id=request.session['uid'])
        stock = stockadjust.objects.filter(id=id)
        item = itemtable.objects.filter(cid=cmp1)
        context = {'cmp1':cmp1,'stock':stock,'item':item}
        return render(request, 'app1/view_stock_adjust.html',context)  


@login_required(login_url='regcomp')
def edit_stockadjust(request,id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        stock = stockadjust.objects.filter(id=id)
        acc = accounts1.objects.filter(cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1)
        reason = stockreason.objects.filter(cid=cmp1)
        context = {'cmp1':cmp1,'acc':acc,'item':item,'reason':reason,'stock':stock}
        return render(request, 'app1/edit_stockadjust.html',context)  
    except:
        return redirect('gostock_adjust') 

@login_required(login_url='regcomp')
def update_stock_adjustment(request,id):
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            stock = stockadjust.objects.get(id=id)
            stock.mode = request.POST.get('mode')
            stock.ref_no = request.POST.get('refno')
            stock.date = request.POST.get('date')
            stock.account = request.POST.get('account')
            stock.reason = request.POST.get('reason')
            stock.description = request.POST.get('desc')
            stock.attach = request.FILES.get('file')

            stock.item1 = request.POST.get('item1')
            stock.qty1 = request.POST.get('qty1')
            stock.qty_hand1 = request.POST.get('qty_hand1')
            stock.new_qty1 = request.POST.get('new_qty1')

            stock.item2 = request.POST.get('item2')
            stock.qty2 = request.POST.get('qty2')
            stock.qty_hand2 = request.POST.get('qty_hand2')
            stock.new_qty2 = request.POST.get('new_qty2')

            stock.item3 = request.POST.get('item3')
            stock.qty3 = request.POST.get('qty3')
            stock.qty_hand3 = request.POST.get('qty_hand3')
            stock.new_qty3 = request.POST.get('new_qty3')

            stock.item4 = request.POST.get('item4')
            stock.qty4 = request.POST.get('qty4')
            stock.qty_hand4 = request.POST.get('qty_hand4')
            stock.new_qty4 = request.POST.get('new_qty4')

            stock.item5 = request.POST.get('item5')
            stock.qty5 = request.POST.get('qty5')
            stock.qty_hand5 = request.POST.get('qty_hand5')
            stock.new_qty5 = request.POST.get('new_qty5')
            
            item = itemtable.objects.get(name=stock.item1)
            item.stock = stock.qty_hand1
            item.save()  
            try:
                item1 = itemtable.objects.get(name=stock.item2)
                item1.stock = stock.qty_hand2
                item1.save() 
            except itemtable.DoesNotExist:
                item1 = None
            try:
                item2 = itemtable.objects.get(name=stock.item3)
                item2.stock = stock.qty_hand3
                item2.save() 
            except itemtable.DoesNotExist:
                item1 = None
            try:        
                item3 = itemtable.objects.get(name=stock.item4)
                item3.stock = stock.qty_hand4
                item3.save() 
            except itemtable.DoesNotExist:
                item1 = None  
            try:      
                item4 = itemtable.objects.get(name=stock.item5)
                item4.stock = stock.qty_hand5
                item4.save()  
            except itemtable.DoesNotExist:
                item1 = None                     
            stock.save()
            
            messages.success(request, 'Stock Updated successfully')
            
            return redirect('gostock_adjust')
        return render(request,'app1/edit_stockadjust.html')        

       

@login_required(login_url='regcomp')
def stocksummary(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        item = itemtable.objects.filter(cid=cmp1).exclude(inventry="")
        stock = stockadjust.objects.filter(cid=cmp1)
        
        context = {'item': item,'stock':stock,'cmp1':cmp1}
        return render(request, 'app1/stocksummary.html', context)
    except:
        return redirect('godash')       



@login_required(login_url='regcomp')
def stockvaluation(request):
        cmp1 = company.objects.get(id=request.session["uid"])
        item = itemtable.objects.filter(cid=cmp1).exclude(inventry="").annotate(total=F('stock')*F('purchase_cost'))
        stock = stockadjust.objects.filter(cid=cmp1)
        
        context = {'item': item,'stock':stock,'cmp1':cmp1}
        return render(request, 'app1/stockvaluation.html', context)
     
@login_required(login_url='regcomp')
def deletestockadjust(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        try:
            sl = stockadjust.objects.get(id=id)
            sl.delete()
            return redirect('gostock_adjust',{'cmp1': cmp1})
        except:
            return redirect('gostock_adjust')
    except:
        return redirect('gostock_adjust')


@login_required(login_url='regcomp')
def gstr1(request):
    
    cmp1 = company.objects.get(id=request.session["uid"])


    cust = customer.objects.filter(cid=cmp1)
    for i in cust:
        if i.gsttype == 'GST registered- Regular':
            fullname1 = i.firstname +' '+ i.lastname
            updinv1 = invoice.objects.filter(cid=cmp1,customername=fullname1)
            for j in updinv1:
                j.gsttype='GST registered- Regular'
                j.save()
        if i.gsttype == "GST-unregistered":
            fullname2 = i.firstname +' '+ i.lastname
            updinv2 = invoice.objects.filter(cid=cmp1,customername=fullname2)
            for k in updinv2:
                k.gsttype= "GST-unregistered"
                k.save()        
        
        if i.gsttype == 'Overseas':
            fullname3 = i.firstname +' '+ i.lastname
            updinv3 = invoice.objects.filter(cid=cmp1,customername=fullname3)
            for l in updinv3:
                l.gsttype='Overseas'
                l.save() 
        if i.gsttype == 'SEZ':
            fullname4 = i.firstname +' '+ i.lastname
            updinv4 = invoice.objects.filter(cid=cmp1,customername=fullname4)
            for m in updinv4:
                m.gsttype='SEZ'
                m.save()  
        if i.gsttype == "Deemed exports - EOU's STP's EHTP's etc":
            fullname5 = i.firstname +' '+ i.lastname
            updinv5 = invoice.objects.filter(cid=cmp1,customername=fullname5)
            for n in updinv4:
                n.gsttype="Deemed exports - EOU's STP's EHTP's etc"
                n.save()  
        if i.gsttype == "Exempt":
            fullname6 = i.firstname +' '+ i.lastname
            updinv5 = invoice.objects.filter(cid=cmp1,customername=fullname6)
            for o in updinv5:
                o.gsttype="Exempt"
                o.save()                                     

   
    
    invoices = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular',).count()
    cgst = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular').aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
                                                         

    invoices1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered').count()
    cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-unregistered').aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
    invoices2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas').count()
    cgst2 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='Overseas').aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
    invoices3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ').count()
    cgst3 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='SEZ').aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal')) 
    invoices4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc").count()
    cgst4 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Deemed exports - EOU's STP's EHTP's etc").aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))
    invoices5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt").count()
    cgst5 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype="Exempt").aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))                                                                                                                                                                   

    
    
   
    
    c =invoices+invoices1+invoices2+invoices3+invoices4+invoices5 
    

        

    context = {'cmp1':cmp1,
    'invoices':invoices,'cgst':cgst,
    'invoices1':invoices1,'cgst1':cgst1,
    'invoices2':invoices2,'cgst2':cgst2,
    'invoices3':invoices3,'cgst3':cgst3,
    'invoices4':invoices4,'cgst4':cgst4,
    'invoices5':invoices5,'cgst5':cgst5,
    'c':c,
    
    
    }
    return render(request, 'app1/gstr1.html', context)
     


@login_required(login_url='regcomp')
def gstr3b(request):

    cmp1 = company.objects.get(id=request.session["uid"])


    cust = customer.objects.filter(cid=cmp1)
    for i in cust:
        if i.gsttype == 'GST registered- Regular':
            fullname1 = i.firstname +' '+ i.lastname
            updinv1 = invoice.objects.filter(cid=cmp1,customername=fullname1)
            for j in updinv1:
                j.gsttype='GST registered- Regular'
                j.save()
        if i.gsttype == "GST-unregistered":
            fullname2 = i.firstname +' '+ i.lastname
            updinv2 = invoice.objects.filter(cid=cmp1,customername=fullname2)
            for k in updinv2:
                k.gsttype= "GST-unregistered"
                k.save()        
        
        if i.gsttype == 'Overseas':
            fullname3 = i.firstname +' '+ i.lastname
            updinv3 = invoice.objects.filter(cid=cmp1,customername=fullname3)
            for l in updinv3:
                l.gsttype='Overseas'
                l.save() 
        if i.gsttype == 'SEZ':
            fullname4 = i.firstname +' '+ i.lastname
            updinv4 = invoice.objects.filter(cid=cmp1,customername=fullname4)
            for m in updinv4:
                m.gsttype='SEZ'
                m.save()  
        if i.gsttype == "Deemed exports - EOU's STP's EHTP's etc":
            fullname5 = i.firstname +' '+ i.lastname
            updinv5 = invoice.objects.filter(cid=cmp1,customername=fullname5)
            for n in updinv4:
                n.gsttype="Deemed exports - EOU's STP's EHTP's etc"
                n.save()  
        if i.gsttype == "Exempt":
            fullname6 = i.firstname +' '+ i.lastname
            updinv5 = invoice.objects.filter(cid=cmp1,customername=fullname6)
            for o in updinv5:
                o.gsttype="Exempt"
                o.save()  
    



    cmp1 = company.objects.get(id=request.session["uid"])
    cgst = invoice.objects.filter(cid=cmp1).annotate(total=Sum('SGST'))

    cgst1 = invoice.objects.filter(cid=cmp1,status='Approved',gsttype='GST-registered-Regular').values().aggregate(total_cgst=Sum('CGST'),
                                                           total_igst=Sum('IGST'),
                                                           total_sgst=Sum('SGST'),
                                                           total_amt=Sum('subtotal'),
                                                           total_tcs=Sum('TCS'),
                                                           taxbaleamt = Sum('CGST')+Sum('IGST')+Sum('SGST')+Sum('TCS'),
                                                           total_invamt=Sum('grandtotal'))


    # list.append(dict)                                                
    # print(cgst1.total_cgst)

    # total_igst=0
    # total_cgst=0
    # total_sgst=0
    # total_tcs=0
    # taxbaleamt=0
    # for i in cgst1:
    #     total_igst+=float(i.IGST)
    #     total_cgst+=float(i.CGST)
    #     total_sgst+=float(i.SGST)
    #     total_tcs+=float(i.TCS)



    
    
    
    

      
  

    context = {'cmp1':cmp1,'cgst':cgst,'cgst1':cgst1}
    return render(request, 'app1/gstr3b.html', context)
            

@login_required(login_url='regcomp')
def goewaybill(request):
    try:
        cmp1 = company.objects.get(id=request.session["uid"])
        invoices = invoice.objects.filter(cid=cmp1,grandtotal__gte=50000)
        context = {'cmp1':cmp1,'invoices':invoices}
        return render(request, 'app1/eway_bill.html', context)
    except:
        return redirect('godash')         

@login_required(login_url='regcomp')
def addewaybill(request, id):
    try:
        cmp1 = company.objects.get(id=request.session['uid'])
        invo3 = invoice.objects.get(invoiceid=id, cid=cmp1)
        item = itemtable.objects.filter(cid=cmp1).all()
        trans = etransporter.objects.filter(cid=cmp1).all()

        invitem = invoice_item.objects.filter(invoice =id )
        context = {'invoice': invo3, 'cmp1': cmp1, 'item':item, 'trans': trans,'invitem':invitem}
        return render(request, 'app1/addeway_bill.html', context)
    except:
        return redirect('goewaybill')        

@login_required(login_url='regcomp')
def create_transporter(request):
    try:
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            tname = request.POST['tname']
            tid = request.POST['tid']
            
            item = etransporter(name=tname,
                                tid=tid,
                                cid=cmp1)
            item.save()
            return render(request,'app1/addeway_bill.html')
        return render(request,'app1/addeway_bill.html')
    except:
        return redirect('goewaybill')      



@login_required(login_url='regcomp')
def create_eway_inv(request):
    if request.method == 'POST':
        cmp1 = company.objects.get(id=request.session['uid'])
        ttype = request.POST['s_type']
        trans = request.POST['transporter']
        distance = request.POST['dist']
        mode = request.POST['tmode']
        vehicle = request.POST['vtype']
        vehicleno = request.POST['vno']
        docno = request.POST.get('tdoc_no')
        date = request.POST['tdoc_date']
        
            
        eway = ewayinv(transaction_stype=ttype,transporter=trans,distance=distance,
                                transport_mode=mode,vehicle_type=vehicle,
                                vehicle_no=vehicleno,
                                transport_doc_no=docno,
                                transport_doc_date=date,
                                cid=cmp1)
        eway.save()                      
        return redirect('goewaybill')
    return render(request,'app1/addeway_bill.html')          


def view_eway_inv(request):
    cmp1 = company.objects.get(id=request.session['uid'])
    upd = salesorder.objects.get(cid=cmp1)


    context ={
        'sale':upd,
        'cmp1':cmp1

    }


    return render(request,'app1/e_way_inv.html',context)    



#Jisha

@login_required(login_url='regcomp')
def govendor(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()
        return render(request,'app1/govendor.html',{'cmp1': cmp1,'vndr':vndr})
    return redirect('govendor')

def vendor_active(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    vndr = vendor.objects.filter(is_active=True).all()
    return render(request,'app1/govendor.html',{'cmp1':cmp1,'vndr':vndr})

def vendor_inactive(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    vndr = vendor.objects.filter(is_active=False).all()
    return render(request,'app1/govendor.html',{'cmp1':cmp1,'vndr':vndr})

@login_required(login_url='regcomp')
def addvendor(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        cpd = creditperiod.objects.all()
        return render(request,'app1/addvendor.html',{'cmp1': cmp1,'cpd':cpd})
    return redirect('addvendor')

@login_required(login_url='regcomp')
def createvendor(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            title=request.POST['title']
            first_name=request.POST['firstname']
            last_name=request.POST['lastname']
            cmpnm=request.POST['company_name']
            email=request.POST['email']
            website=request.POST['website']
            mobile=request.POST['mobile']
            gsttype=request.POST['gsttype']
            gstin=request.POST['gstin']
            panno=request.POST['panno']
            supply=request.POST['sourceofsupply']
            currency=request.POST['currency']
            balance=request.POST['openingbalance']
            payment=request.POST['paymentterms']
            street=request.POST['street']
            city=request.POST['city']
            state=request.POST['state']
            pincode=request.POST['pincode']
            country=request.POST['country']
            shipstreet=request.POST['shipstreet']
            shipcity=request.POST['shipcity']
            shipstate=request.POST['shipstate']
            shippincode=request.POST['shippincode']
            shipcountry=request.POST['shipcountry']
            
            vndr = vendor(title=title, firstname=first_name,
                            lastname=last_name, companyname= cmpnm,
                            gsttype=gsttype, gstin=gstin, 
                            panno=panno, email=email,sourceofsupply=supply,currency=currency,
                            website=website, mobile=mobile,openingbalance=balance,
                            street=street, city=city, state=state,paymentterms=payment,
                            pincode=pincode, country=country,
                            shipstreet=shipstreet, shipcity=shipcity,
                            shipstate=shipstate,
                            shippincode=shippincode, shipcountry=shipcountry,cid=cmp1)

            vndr.save()

            # if vndr.openingbalance != "":
            #     add_vndr_stat=vendor_statment(
            #         vendor = vndr.firstname +" "+ vndr.lastname,
            #         cid  = cmp1,
            #         # date = vndr.date,
            #         transactions="Vendor Opening Balance",
            #         amount= vndr.openingbalance,
            #     )
            #     add_vndr_stat.save()

            return redirect('govendor')
        return render(request,'app1/addvendor.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def viewvendor(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr=vendor.objects.get(vendorid=id) 
        fn =vndr.firstname
        ln = vndr.lastname
        su = fn+ ' ' +ln
        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")

        pbill = purchasebill.objects.filter(vendor_name=su,status='Approved',date=tod)
        
        pymnt = purchasepayment.objects.filter(vendor=su, paymentdate=tod)

        statment = vendor_statment.objects.filter(vendor=su,cid=cmp1)
        # statment = vendor_statment.objects.filter(vendor=su,date=tod)

        tot6 = purchasebill.objects.filter(cid=cmp1,vendor_name=su).all().aggregate(t2=Sum('balance_due'))
        tot2 = purchasebill.objects.filter(cid=cmp1,vendor_name=su).all().aggregate(t2=Sum('grand_total'))
        tot1 = purchasepayment.objects.filter(vendor=su).all().aggregate(t2=Sum('paymentamount'))
        tot7 = purchasepayment.objects.filter(vendor=su).all().aggregate(t3=Sum('amtcredit')) 

        billed=0
        sum=0
        summ=0
        re=0

        for i in pbill:
            if i.balance_due:
                sum+=i.balance_due
            if i.grand_total:
                billed += i.grand_total  

        pbl = purchasebill.objects.filter(vendor_name=su,).all() 
        paymnt = purchasepayment.objects.filter(vendor=su,).all()  
        expnc = purchase_expense.objects.filter(vendor=su,).all()   
        pordr =purchaseorder.objects.filter(vendor_name=su,).all() 
        context = {'vndr': vndr,'cmp1': cmp1,'pbill':pbill,'sum':sum,'sum2':summ,'billed':billed,'tod':tod,'re':re,'pymnt':pymnt,'pbl':pbl,
                    'paymnt':paymnt,'pordr':pordr,'expnc':expnc,'statment':statment,'tot6':tot6,'tot7':tot7,'tot1':tot1,'tot2':tot2

                }
        return render(request,'app1/viewvendor.html',context)
    return redirect('viewvendor') 

# @login_required(login_url='regcomp')
# def viewvendor1(request,id):
#     if 'uid' in request.session:
#         if request.session.has_key('uid'):
#             uid = request.session['uid']
#         else:
#             return redirect('/')
#         cmp1 = company.objects.get(id=request.session['uid'])
#         if request.method=='POST': 
            
#             toda = date.today()
#             tod = toda.strftime("%Y-%m-%d")
#             filmeth = request.POST['reportperiod']
#             if filmeth == 'Today':
#                 fromdate = tod
#                 todate = tod
#             elif filmeth == 'Custom':
#                 fromdate = request.POST['fper']
#                 todate = request.POST['tper']
#             elif filmeth == 'This month':
#                 fromdate = toda.strftime("%Y-%m-01")
#                 todate = toda.strftime("%Y-%m-31")
#             elif filmeth == 'This financial year':
#                 if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
#                     pyear = int(toda.strftime("%Y")) - 1
#                     fromdate = f'{pyear}-03-01'
#                     todate = f'{toda.strftime("%Y")}-03-31'
#                 else:
#                     pyear = int(toda.strftime("%Y")) + 1
#                     fromdate = f'{toda.strftime("%Y")}-03-01'
#                     todate = f'{pyear}-03-31'
#             # else:
#             #     return redirect('viewvendor')
#             vndr=vendor.objects.get(vendorid=id) 
#             fn =vndr.firstname
#             ln = vndr.lastname
#             su = fn+ ' ' +ln

#             pbill = purchasebill.objects.filter(vendor_name=su,date__gte=fromdate,date__lte=todate,status='Approved')
            
#             pymnt = purchasepayment.objects.filter(vendor=su, paymentdate=tod)

#             statment = vendor_statment.objects.filter(vendor=su,cid=cmp1)
            # statment = vendor_statment.objects.filter(vendor=su,date=tod)

    #         tot6 = purchasebill.objects.filter(cid=cmp1,vendor_name=su).all().aggregate(t2=Sum('balance_due'))
    #         tot2 = purchasebill.objects.filter(cid=cmp1,vendor_name=su).all().aggregate(t2=Sum('grand_total'))
    #         tot1 = purchasepayment.objects.filter(vendor=su).all().aggregate(t2=Sum('paymentamount'))
    #         tot7 = purchasepayment.objects.filter(vendor=su).all().aggregate(t3=Sum('amtcredit')) 

    #         billed=0
    #         sum=0
    #         summ=0
    #         re=0

    #         for i in pbill:
    #             if i.balance_due:
    #                 sum+=i.balance_due
    #             if i.grand_total:
    #                 billed += i.grand_total  

    #         pbl = purchasebill.objects.filter(vendor_name=su,).all() 
    #         paymnt = purchasepayment.objects.filter(vendor=su,).all()  
    #         expnc = purchase_expense.objects.filter(vendor=su,).all()   
    #         pordr =purchaseorder.objects.filter(vendor_name=su,).all() 
    #         context = {'vndr': vndr,'cmp1': cmp1,'pbill':pbill,'sum':sum,'sum2':summ,'billed':billed,'tod':tod,'re':re,'pymnt':pymnt,'pbl':pbl,
    #                     'paymnt':paymnt,'pordr':pordr,'expnc':expnc,'statment':statment,'tot6':tot6,'tot7':tot7,'tot1':tot1,'tot2':tot2

    #                 }
    #         return render(request,'app1/viewvendor.html',context)
    # return redirect('viewvendor')  

@login_required(login_url='regcomp')
def goeditvendor(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr=vendor.objects.get(vendorid=id) 
        return render(request,'app1/editvendor.html',{'cmp1': cmp1,'vndr':vndr})
    return redirect('goeditvendor')

@login_required(login_url='regcomp')
def editvendor(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST': 
            vndr=vendor.objects.get(vendorid=id)
            vndr.title = request.POST['title']
            vndr.firstname=request.POST['firstname']
            vndr.lastname=request.POST['lastname']
            vndr.companyname=request.POST['company_name']
            vndr.email=request.POST['email']
            vndr.website=request.POST['website']
            vndr.mobile=request.POST['mobile']
            vndr.gsttype=request.POST['gsttype']
            vndr.gstin=request.POST['gstin']
            vndr.panno=request.POST['panno']
            vndr.sourceofsupply=request.POST['sourceofsupply']
            vndr.currency=request.POST['currency']
            vndr.openingbalance=request.POST['openingbalance']
            vndr.paymentterms=request.POST['paymentterms']
            vndr.street=request.POST['street']
            vndr.city=request.POST['city']
            vndr.state=request.POST['state']
            vndr.pincode=request.POST['pincode']
            vndr.country=request.POST['country']
            vndr.shipstreet=request.POST['shipstreet']
            vndr.shipcity=request.POST['shipcity']
            vndr.shipstate=request.POST['shipstate']
            vndr.shippincode=request.POST['shippincode']
            vndr.shipcountry=request.POST['shipcountry']

            vndr.save()
            return redirect('govendor')
        return render(request,'govendor.html')
    return redirect('/')

@login_required(login_url='regcomp')
def deletevendor(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr=vendor.objects.get(vendorid=id)
        vndr.delete() 
        return redirect('govendor')
    return redirect('govendor')

@login_required(login_url='regcomp')
def createvendor1(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            title=request.POST['title']
            first_name=request.POST['firstname']
            last_name=request.POST['lastname']
            cmpnm=request.POST['company_name']
            email=request.POST['email']
            website=request.POST['website']
            mobile=request.POST['mobile']
            gsttype=request.POST['gsttype']
            gstin=request.POST['gstin']
            panno=request.POST['panno']
            supply=request.POST['sourceofsupply']
            currency=request.POST['currency']
            balance=request.POST['openingbalance']
            payment=request.POST['paymentterms']
            street=request.POST['street']
            city=request.POST['city']
            state=request.POST['state']
            pincode=request.POST['pincode']
            country=request.POST['country']
            shipstreet=request.POST['shipstreet']
            shipcity=request.POST['shipcity']
            shipstate=request.POST['shipstate']
            shippincode=request.POST['shippincode']
            shipcountry=request.POST['shipcountry']
            
            vndr = vendor(title=title, firstname=first_name,
                            lastname=last_name, companyname= cmpnm,
                            gsttype=gsttype, gstin=gstin, 
                            panno=panno, email=email,sourceofsupply=supply,currency=currency,
                            website=website, mobile=mobile,openingbalance=balance,
                            street=street, city=city, state=state,paymentterms=payment,
                            pincode=pincode, country=country,
                            shipstreet=shipstreet, shipcity=shipcity,
                            shipstate=shipstate,
                            shippincode=shippincode, shipcountry=shipcountry)

            vndr.save()
            return redirect('addpurchaseorder')
        return render(request,'app1/addpurchaseorder.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createvendor2(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            title=request.POST['title']
            first_name=request.POST['firstname']
            last_name=request.POST['lastname']
            cmpnm=request.POST['company_name']
            email=request.POST['email']
            website=request.POST['website']
            mobile=request.POST['mobile']
            gsttype=request.POST['gsttype']
            gstin=request.POST['gstin']
            panno=request.POST['panno']
            supply=request.POST['sourceofsupply']
            currency=request.POST['currency']
            balance=request.POST['openingbalance']
            payment=request.POST['paymentterms']
            street=request.POST['street']
            city=request.POST['city']
            state=request.POST['state']
            pincode=request.POST['pincode']
            country=request.POST['country']
            shipstreet=request.POST['shipstreet']
            shipcity=request.POST['shipcity']
            shipstate=request.POST['shipstate']
            shippincode=request.POST['shippincode']
            shipcountry=request.POST['shipcountry']
            
            vndr = vendor(title=title, firstname=first_name,
                            lastname=last_name, companyname= cmpnm,
                            gsttype=gsttype, gstin=gstin, 
                            panno=panno, email=email,sourceofsupply=supply,currency=currency,
                            website=website, mobile=mobile,openingbalance=balance,
                            street=street, city=city, state=state,paymentterms=payment,
                            pincode=pincode, country=country,
                            shipstreet=shipstreet, shipcity=shipcity,
                            shipstate=shipstate,
                            shippincode=shippincode, shipcountry=shipcountry)

            vndr.save()
            return redirect('addbilling')
        return render(request,'app1/addbilling.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createvendor3(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            title=request.POST['title']
            first_name=request.POST['firstname']
            last_name=request.POST['lastname']
            cmpnm=request.POST['company_name']
            email=request.POST['email']
            website=request.POST['website']
            mobile=request.POST['mobile']
            gsttype=request.POST['gsttype']
            gstin=request.POST['gstin']
            panno=request.POST['panno']
            supply=request.POST['sourceofsupply']
            currency=request.POST['currency']
            balance=request.POST['openingbalance']
            payment=request.POST['paymentterms']
            street=request.POST['street']
            city=request.POST['city']
            state=request.POST['state']
            pincode=request.POST['pincode']
            country=request.POST['country']
            shipstreet=request.POST['shipstreet']
            shipcity=request.POST['shipcity']
            shipstate=request.POST['shipstate']
            shippincode=request.POST['shippincode']
            shipcountry=request.POST['shipcountry']
            
            vndr = vendor(title=title, firstname=first_name,
                            lastname=last_name, companyname= cmpnm,
                            gsttype=gsttype, gstin=gstin, 
                            panno=panno, email=email,sourceofsupply=supply,currency=currency,
                            website=website, mobile=mobile,openingbalance=balance,
                            street=street, city=city, state=state,paymentterms=payment,
                            pincode=pincode, country=country,
                            shipstreet=shipstreet, shipcity=shipcity,
                            shipstate=shipstate,
                            shippincode=shippincode, shipcountry=shipcountry)
            vndr.save()
            return redirect('addexpenses')
        return render(request,'app1/addexpense.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createvendor4(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            title=request.POST['title']
            first_name=request.POST['firstname']
            last_name=request.POST['lastname']
            cmpnm=request.POST['company_name']
            email=request.POST['email']
            website=request.POST['website']
            mobile=request.POST['mobile']
            gsttype=request.POST['gsttype']
            gstin=request.POST['gstin']
            panno=request.POST['panno']
            supply=request.POST['sourceofsupply']
            currency=request.POST['currency']
            balance=request.POST['openingbalance']
            payment=request.POST['paymentterms']
            street=request.POST['street']
            city=request.POST['city']
            state=request.POST['state']
            pincode=request.POST['pincode']
            country=request.POST['country']
            shipstreet=request.POST['shipstreet']
            shipcity=request.POST['shipcity']
            shipstate=request.POST['shipstate']
            shippincode=request.POST['shippincode']
            shipcountry=request.POST['shipcountry']
            
            vndr = vendor(title=title, firstname=first_name,
                            lastname=last_name, companyname= cmpnm,
                            gsttype=gsttype, gstin=gstin, 
                            panno=panno, email=email,sourceofsupply=supply,currency=currency,
                            website=website, mobile=mobile,openingbalance=balance,
                            street=street, city=city, state=state,paymentterms=payment,
                            pincode=pincode, country=country,
                            shipstreet=shipstreet, shipcity=shipcity,
                            shipstate=shipstate,
                            shippincode=shippincode, shipcountry=shipcountry)
            vndr.save()
            return redirect('addpurchasedebit')
        return render(request,'app1/addpurchasedebit.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createcustomer1(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                            lastname=request.POST['lastname'], company=request.POST['company'],
                            location=request.POST['location'], gsttype=request.POST['gsttype'],
                            gstin=request.POST['gstin'], panno=request.POST['panno'],
                            email=request.POST['email'], opening_balance=request.POST['openbalance'],
                            website=request.POST['website'], mobile=request.POST['mobile'],
                            street=request.POST['street'], city=request.POST['city'],
                            state=request.POST['state'],
                            pincode=request.POST['pincode'], country=request.POST['country'],
                            shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                            shipstate=request.POST['shipstate'],
                            shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'], cid=cmp1
                        )
            customer1.save()
            return redirect('addpurchaseorder')   
        return render(request, 'app1/addpurchaseorder.html', {'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createcustomer2(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                            lastname=request.POST['lastname'], company=request.POST['company'],
                            location=request.POST['location'], gsttype=request.POST['gsttype'],
                            gstin=request.POST['gstin'], panno=request.POST['panno'],
                            email=request.POST['email'], opening_balance=request.POST['openbalance'],
                            website=request.POST['website'], mobile=request.POST['mobile'],
                            street=request.POST['street'], city=request.POST['city'],
                            state=request.POST['state'],
                            pincode=request.POST['pincode'], country=request.POST['country'],
                            shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                            shipstate=request.POST['shipstate'],
                            shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'], cid=cmp1
                        )
            customer1.save()
            return redirect('addbilling')   
        return render(request, 'app1/addbilling.html', {'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def createcustomer3(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == "POST":
            customer1 = customer(title=request.POST['title'], firstname=request.POST['firstname'],
                            lastname=request.POST['lastname'], company=request.POST['company'],
                            location=request.POST['location'], gsttype=request.POST['gsttype'],
                            gstin=request.POST['gstin'], panno=request.POST['panno'],
                            email=request.POST['email'], opening_balance=request.POST['openbalance'],
                            website=request.POST['website'], mobile=request.POST['mobile'],
                            street=request.POST['street'], city=request.POST['city'],
                            state=request.POST['state'],
                            pincode=request.POST['pincode'], country=request.POST['country'],
                            shipstreet=request.POST['shipstreet'], shipcity=request.POST['shipcity'],
                            shipstate=request.POST['shipstate'],
                            shippincode=request.POST['shippincode'], shipcountry=request.POST['shipcountry'], cid=cmp1
                        )
            customer1.save()
            return redirect('addexpenses')   
        return render(request, 'app1/addexpense.html', {'cmp1': cmp1})
    return redirect('/')

def create_item1(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            # itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST['invacc']
            istock = request.POST['stock']
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                # tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('addpurchaseorder')
        return render(request,'app1/addpurchaseorder.html')
    return redirect('/') 

def create_item2(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            # itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST['invacc']
            istock = request.POST['stock']
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                # tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('addbilling')
        return render(request,'app1/addbilling.html')
    return redirect('/') 

def create_item3(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            cmp1 = company.objects.get(id=request.session['uid'])
            iname = request.POST['name']
            itype = request.POST['type']
            iunit = request.POST.get('unit')
            ihsn = request.POST['hsn']
            itax = request.POST['taxref']
            ipcost = request.POST['pcost']
            iscost = request.POST['salesprice']
            # itrate = request.POST['tax']
            ipuracc = request.POST['pur_account']
            isalacc = request.POST['sale_account']
            ipurdesc = request.POST['pur_desc']
            isaledesc = request.POST['sale_desc']
            iintra = request.POST['intra_st']
            iinter = request.POST['inter_st']
            iinv = request.POST['invacc']
            istock = request.POST['stock']
            istatus = request.POST['status']
            item = itemtable(name=iname,item_type=itype,unit=iunit,
                                hsn=ihsn,tax_reference=itax,
                                purchase_cost=ipcost,
                                sales_cost=iscost,
                                # tax_rate=itrate,
                                acount_pur=ipuracc,
                                account_sal=isalacc,
                                pur_desc=ipurdesc,
                                sale_desc=isaledesc,
                                intra_st=iintra,
                                inter_st=iinter,
                                inventry=iinv,
                                stock=istock,
                                status=istatus,
                                cid=cmp1)
            item.save()
            return redirect('addpurchasedebit')
        return render(request,'app1/addpurchasedebit.html')
    return redirect('/') 

def getvendordata(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        id = request.GET.get('id')
        x = id.split()
        x.append(" ")
        a = x[0]
        b = x[1]
        if x[2] is not None:
            b = x[1] + " " + x[2]
            vendobject = vendor.objects.get(firstname=a, lastname=b)
            list = []
            dict = {'vendorid': vendobject.vendorid, 'title': vendobject.title, 'firstname': vendobject.firstname,
                    'lastname': vendobject.lastname, 'companyname': vendobject.companyname, 'gsttype': vendobject.gsttype,
                    'gstin': vendobject.gstin, 'panno': vendobject.panno, 'email':vendobject.email,'website': vendobject.website,
                    'mobile': vendobject.mobile, 'street': vendobject.street, 'sourceofsupply':vendobject.sourceofsupply,
                    'currency':vendobject.currency, 'openingbalance':vendobject.openingbalance, 'paymentterms':vendobject.paymentterms,
                    'city': vendobject.city, 'state': vendobject.state, 'pincode': vendobject.pincode, 'country': vendobject.country,
                    'shipstreet': vendobject.shipstreet, 'shipcity': vendobject.shipcity, 'shippincode': vendobject.shippincode,
                    'shipstate': vendobject.shipstate, 'shipcountry': vendobject.shipcountry}
            list.append(dict)
        else:
            vendorbject = vendor.objects.get(firstname=a, lastname=b)
            list = []
            dict = {'vendorid': vendobject.vendorid, 'title': vendobject.title, 'firstname': vendobject.firstname,
                    'lastname': vendobject.lastname, 'companyname': vendobject.companyname, 'gsttype': vendobject.gsttype,
                    'gstin': vendobject.gstin, 'panno': vendobject.panno, 'email':vendobject.email, 'website': vendobject.website,
                    'mobile': vendobject.mobile, 'street': vendobject.street, 'sourceofsupply':vendobject.sourceofsupply,
                    'currency':vendobject.currency, 'openingbalance':vendobject.openingbalance, 'paymentterms':vendobject.paymentterms,
                    'city': vendobject.city, 'state': vendobject.state, 'pincode': vendobject.pincode, 'country': vendobject.country,
                    'shipstreet': vendobject.shipstreet, 'shipcity': vendobject.shipcity, 'shippincode': vendobject.shippincode,
                    'shipstate': vendobject.shipstate, 'shipcountry': vendobject.shipcountry}
            list.append(dict)
        return JsonResponse(json.dumps(list), content_type="application/json", safe=False)
    return redirect('getvendordata')

def getperiod(request):
    id = request.GET.get('id')
    list = []
    toda = date.today() + timedelta(days=int(id))
    newdate = toda.strftime("%d-%m-%Y")
    dict = {'newdate': newdate}
    list.append(dict)
    return JsonResponse(json.dumps(list), content_type="application/json", safe=False)

@login_required(login_url='regcomp')
def gopurchaseorder(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pordr = purchaseorder.objects.all()
        return render(request,'app1/gopurchaseorder.html',{'cmp1': cmp1,'pordr':pordr})
    return redirect('gopurchaseorder')

@login_required(login_url='regcomp')
def addpurchaseorder(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()
        itm = itemtable.objects.all()
        cpd = creditperiod.objects.all()
        cust = customer.objects.all()
        context = {
                    'cmp1': cmp1,
                    'vndr':vndr,
                    'item':itm ,
                    'cust':cust,         
                    'cpd':cpd,         
                }
        return render(request,'app1/addpurchaseorder.html',context)
    return redirect('addpurchaseorder')

def createpurchaseorder(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            vname = request.POST['vendor_name']
            baddress = request.POST['billing_address']
            puchaseorder_no= '1000'
            supply=request.POST['sourceofsupply']
            destsupply=request.POST['destiofsupply']
            branch=request.POST['branch']
            reference=request.POST['reference']
            contact_name=request.POST['contact_name']
            deliverto=request.POST['deliverto']
            date=request.POST['date']
            deliver_dt=request.POST['deliver_date']
            credit_period=request.POST['credit_period']
            due_date=request.POST['due_date']
            sub_total=request.POST['sub_total']
            discount=request.POST['discount']
            sgst=request.POST['sgst']
            cgst=request.POST['cgst']
            igst=request.POST['igst']
            tax_amount=request.POST['tax_amount']
            tcs=request.POST['tcs']
            tcs_amount=request.POST['tcs']
            round_off=request.POST['round_off']
            balance_due=request.POST['balance_due']
            grand_total=request.POST['grand_total']
            note=request.POST['note']

            porder = purchaseorder(vendor_name=vname,billing_address=baddress,
                                    sourceofsupply=supply,
                                    destiofsupply=destsupply,branch=branch,reference=reference,
                                    contact_name=contact_name,deliverto=deliverto,
                                    date=date,deliver_date=deliver_dt,
                                    credit_period=credit_period,due_date=due_date,sub_total=sub_total,discount=discount,sgst=sgst,
                                    cgst=cgst,igst=igst,tax_amount=tax_amount,tcs=tcs,tcs_amount=tcs_amount,round_off=round_off,
                                    grand_total=grand_total,balance_due=balance_due,note=note)

            if len(request.FILES) != 0:
                porder.file=request.FILES['file'] 

            porder.save()
            porder.puchaseorder_no = int(porder.puchaseorder_no) + porder.porderid
            porder.save()


            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            rate = request.POST.getlist("rate[]")
            tax = request.POST.getlist("tax[]")
            amount = request.POST.getlist("amount[]")

            prid=purchaseorder.objects.get(porderid=porder.porderid)

            if len(items)==len(hsn)==len(quantity)==len(rate)==len(tax)==len(amount) and items and hsn and quantity and rate and tax and amount:
                mapped=zip(items,hsn,quantity,rate,tax,amount)
                mapped=list(mapped)
                for ele in mapped:
                    porderAdd,created = purchaseorder_item.objects.get_or_create(items = ele[0],hsn = ele[1],quantity=ele[2],rate=ele[3],
                    tax=ele[4],amount=ele[5],porder=prid)

                    itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                    if itemqty.stock != 0:
                        temp=0
                        temp = itemqty.stock 

                        temp = temp-int(ele[2])
                        itemqty.stock =temp
                        itemqty.save()

            return redirect('gopurchaseorder')
        return render(request,'app1/gopurchaseorder.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def viewpurchaseorder(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pordr=purchaseorder.objects.get(porderid=id)
        pitem = purchaseorder_item.objects.all().filter(porder=id)
        return render(request,'app1/viewpurchaseorder.html',{'cmp1': cmp1,'pordr':pordr,'pitem':pitem})
    return redirect('gopurchaseorder')

@login_required(login_url='regcomp')
def porder_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    po = purchaseorder.objects.get(porderid=id)

    if request.method == 'POST':
        if len(request.FILES) != 0:
            if po.file != "default.png":
                os.remove(po.file.path)    
            po.file=request.FILES['file']
        po.save()
        return redirect('viewpurchaseorder',id)

@login_required(login_url='regcomp')
def goeditpurchaseorder(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        itm = itemtable.objects.all()
        pordr=purchaseorder.objects.get(porderid=id)
        pitem = purchaseorder_item.objects.all().filter(porder=id)
        return render(request,'app1/editpurchaseorder.html',{'cmp1': cmp1,'pordr':pordr,'pitem':pitem,'itm':itm})
    return redirect('gopurchaseorder')

def editpurchaseorder(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            pordr=purchaseorder.objects.get(porderid=id)
            pordr.vendor_name = request.POST['vendor_name']
            pordr.billing_address = request.POST['billing_address']
            pordr.puchaseorder_no= request.POST['puchaseorder_no']
            pordr.sourceofsupply=request.POST['sourceofsupply']
            pordr.destiofsupply=request.POST['destiofsupply']
            pordr.branch=request.POST['branch']
            pordr.reference=request.POST['reference']
            pordr.contact_name=request.POST['contact_name']
            pordr.deliverto=request.POST['deliverto']
            pordr.date=request.POST['date']
            pordr.deliver_date=request.POST['deliver_date']
            pordr.credit_period=request.POST['credit_period']
            pordr.due_date=request.POST['due_date']
            pordr.sub_total=request.POST['sub_total']
            pordr.discount=request.POST['discount']
            pordr.sgst=request.POST['sgst']
            pordr.cgst=request.POST['cgst']
            pordr.igst=request.POST['igst']
            pordr.tax_amount=request.POST['tax_amount']
            pordr.tcs=request.POST['tcs']
            pordr.tcs_amount=request.POST['tcs_amount']
            pordr.round_off=request.POST['round_off']
            pordr.balance_due=request.POST['balance_due']
            pordr.grand_total=request.POST['grand_total']
            pordr.note=request.POST['note']

            if len(request.FILES) != 0:
                if len(pordr.file) > 0  :
                    os.remove(pordr.file.path)    
                pordr.file = request.FILES['file']

            pordr.save()

            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            rate = request.POST.getlist("rate[]")
            tax = request.POST.getlist("tax[]")
            amount = request.POST.getlist("amount[]")

            pitemid = request.POST.getlist("id[]")
            porderid=purchaseorder.objects.get(porderid=pordr.porderid)
            
            if len(items)==len(hsn)==len(quantity)==len(rate)==len(tax)==len(amount)==len(pitemid) and items and hsn and quantity and rate and tax and amount and pitemid:
                mapped=zip(items,hsn,quantity,rate,tax,amount,pitemid)
                mapped=list(mapped)
                for ele in mapped:
                    created = purchaseorder_item.objects.filter(id=ele[6]).update(items = ele[0],hsn = ele[1],quantity=ele[2],rate=ele[3],
                    tax=ele[4],amount=ele[5])

                    itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                    if itemqty.stock != 0:
                        temp=0
                        temp = itemqty.stock 

                        temp = temp-int(ele[2])
                        itemqty.stock =temp
                        itemqty.save()

            pitem = purchaseorder_item.objects.filter(porder=pordr.porderid)
            print(pitem)
            return redirect('gopurchaseorder')
        return render(request,'app1/gopurchaseorder.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def deletepurchasorder(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pordr=purchaseorder.objects.get(porderid=id)
        pitem = purchaseorder_item.objects.all().filter(porder=id)
        pordr.delete() 
        pitem.delete() 
        return redirect('gopurchaseorder')
    return redirect('gopurchaseorder')

def convertapproved(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pordr = purchaseorder.objects.get(porderid=id)
        pordr.status = 'Approved'
        pordr.save()
        return redirect(viewpurchaseorder,id)
    return redirect('/')

def convertbilled(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pordr = purchaseorder.objects.get(porderid=id)
        pordr.status = 'Billed'
        pordr.save()

        upd = purchasebill()
        upd.cid =  cmp1 
        upd.vendor_name  = pordr.vendor_name
        upd.billing_address = pordr.billing_address
        upd.date = pordr.date
        upd.destiofsupply= pordr.destiofsupply
        upd.branch= pordr.branch
        upd.reference= pordr.reference
        upd.contact_name= pordr.contact_name
        upd.deliverto= pordr.deliverto
        upd.deliver_date= pordr.deliver_date
        upd.credit_period= pordr.credit_period
        upd.due_date= pordr.due_date
        upd.sub_total= pordr.sub_total
        upd.sgst= pordr.sgst
        upd.cgst= pordr.cgst
        upd.igst= pordr.igst
        upd.discount= pordr.discount
        upd.tcs= pordr.tcs
        upd.tcs_amount= pordr.tcs_amount
        upd.round_off= pordr.round_off
        upd.amtrecvd= 0
        upd.grand_total= pordr.grand_total
        upd.balance_due= pordr.balance_due
        upd.note= pordr.note
        upd.file= pordr.file
        upd.status= pordr.status
        
        upd.bill_no = '1000'

        upd.save()
        upd.bill_no = int(upd.bill_no) + upd.billid
        upd.save()

        statment2=vendor_statment()
        statment2.vendor = pordr.vendor_name
        statment2.cid = cmp1
        statment2.transactions = "Billed"
        statment2.pbill = upd
        statment2.details = upd.bill_no
        statment2.details2 = pordr.reference
        statment2.date = pordr.date
        statment2.payments = pordr.grand_total
        statment2.save()

        po =purchaseorder_item.objects.filter(porder=id)
        blid = purchasebill.objects.get(billid=upd.billid)
        for i in po:
            a=purchasebill_item()
            a. bill = blid 
            a.items = i.items
            a.hsn = i.hsn
            a.quantity  = i.quantity
            a.rate = i.rate
            a.tax = i.tax
            a.amount = i.amount
            a.save()

        return redirect(viewpurchaseorder,id)
    return redirect('/')

def porder_draft(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pordr = purchaseorder.objects.filter(status='Draft').all()
    return render(request,'app1/gopurchaseorder.html',{'cmp1':cmp1,'pordr':pordr})

def porder_billed(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pordr = purchaseorder.objects.filter(status='Billed').all()
    return render(request,'app1/gopurchaseorder.html',{'cmp1':cmp1,'pordr':pordr})

def porder_approved(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pordr = purchaseorder.objects.filter(status='Approved').all()
    return render(request,'app1/gopurchaseorder.html',{'cmp1':cmp1,'pordr':pordr})

@login_required(login_url='regcomp')
def gobilling(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pbill = purchasebill.objects.all()
        return render(request,'app1/gobilling.html',{'cmp1': cmp1,'pbill':pbill})
    return redirect('gobilling')
    
@login_required(login_url='regcomp')
def addbilling(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()
        itm = itemtable.objects.all()
        cust = customer.objects.all()
        cpd = creditperiod.objects.all()
        context = {
                    'cmp1': cmp1,
                    'vndr':vndr,
                    'item':itm ,
                    'cust':cust,        
                    'cpd':cpd        
                }
        return render(request,'app1/addbilling.html',context)
    return redirect('addbilling')

def createbill(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            vname = request.POST['vendor_name']
            baddress = request.POST['billing_address']
            bill_no= '1000'
            supply=request.POST['sourceofsupply']
            destsupply=request.POST['destiofsupply']
            branch=request.POST['branch']
            reference=request.POST['reference']
            contact_name=request.POST['contact_name']
            deliverto=request.POST['deliverto']
            date=request.POST['date']
            deliver_dt=request.POST['deliver_date']
            credit_period=request.POST['credit_period']
            due_date=request.POST['due_date']
            sub_total=request.POST['sub_total']
            discount=request.POST['discount']
            sgst=request.POST['sgst']
            cgst=request.POST['cgst']
            igst=request.POST['igst']
            tax_amount=request.POST['tax_amount']
            tcs=request.POST['tcs']
            tcs_amount=request.POST['tcs']
            round_off=request.POST['round_off']
            grand_total=request.POST['grand_total']
            balance_due=request.POST['balance_due']
            amtrecvd=request.POST['amtrecvd']
            note=request.POST['note']

            billed = purchasebill(vendor_name=vname,billing_address=baddress,
                                    sourceofsupply=supply,
                                    destiofsupply=destsupply,branch=branch,reference=reference,
                                    contact_name=contact_name,deliverto=deliverto,
                                    date=date,deliver_date=deliver_dt,
                                    credit_period=credit_period,due_date=due_date,sub_total=sub_total,discount=discount,sgst=sgst,
                                    cgst=cgst,igst=igst,tax_amount=tax_amount,tcs=tcs,tcs_amount=tcs_amount,round_off=round_off,
                                    grand_total=grand_total,balance_due=balance_due,amtrecvd=amtrecvd,note=note,cid=cmp1)

            if len(request.FILES) != 0:
                billed.file=request.FILES['file'] 

            billed.save()
            billed.bill_no = int(billed.bill_no) + billed.billid
            billed.save()

            statment2=vendor_statment()
            statment2.vendor = billed.vendor_name
            statment2.cid = cmp1
            statment2.transactions = "Billed"
            statment2.pbill = billed
            statment2.details = billed.bill_no
            statment2.details2 = reference
            statment2.date = billed.date
            statment2.payments = billed.grand_total
            statment2.save()

            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            rate = request.POST.getlist("rate[]")
            tax = request.POST.getlist("tax[]")
            amount = request.POST.getlist("amount[]")

            bll=purchasebill.objects.get(billid=billed.billid)

            if len(items)==len(hsn)==len(quantity)==len(rate)==len(tax)==len(amount) and items and hsn and quantity and rate and tax and amount:
                mapped=zip(items,hsn,quantity,rate,tax,amount)
                mapped=list(mapped)
                for ele in mapped:
                    billAdd,created = purchasebill_item.objects.get_or_create(items = ele[0],hsn = ele[1],quantity=ele[2],rate=ele[3],
                    tax=ele[4],amount=ele[5],bill=bll)

                    itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                    if itemqty.stock != 0:
                        temp=0
                        temp = itemqty.stock 

                        temp = temp-int(ele[2])
                        itemqty.stock =temp
                        itemqty.save()

            return redirect('gobilling')
        return render(request,'app1/gobilling.html',{'cmp1': cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def viewbill(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pbill=purchasebill.objects.get(billid=id)
        bitem = purchasebill_item.objects.all().filter(bill=id)
        return render(request,'app1/viewpurchasebill.html',{'cmp1': cmp1,'pbill':pbill,'bitem':bitem})
    return redirect('gobilling')

@login_required(login_url='regcomp')
def bill_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    pbl = purchasebill.objects.get(billid=id,cid=cmp1)

    if request.method == 'POST':
        if len(request.FILES) != 0:
            if pbl.file != "default.png":
                os.remove(pbl.file.path)    
            pbl.file=request.FILES['file']
        pbl.save()
        return redirect('viewbill',id)

@login_required(login_url='regcomp')
def goeditbill(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pbill=purchasebill.objects.get(billid=id)
        bitem = purchasebill_item.objects.all().filter(bill=id)
        vndr = vendor.objects.all()
        itm = itemtable.objects.all()
        cust = customer.objects.all()
        context = {
                    'cmp1': cmp1,
                    'vndr':vndr,
                    'itm':itm ,
                    'cust':cust,
                    'pbill':pbill,
                    'bitem':bitem         
                }
        return render(request,'app1/editpurchasebill.html',context)
    return redirect('gobilling')

def editpurchasebill(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            pbill=purchasebill.objects.get(billid=id)
            pbill.vendor_name = request.POST['vendor_name']
            pbill.billing_address = request.POST['billing_address']
            pbill.bill_no= request.POST['bill_no']
            pbill.sourceofsupply=request.POST['sourceofsupply']
            pbill.destiofsupply=request.POST['destiofsupply']
            pbill.branch=request.POST['branch']
            pbill.reference=request.POST['reference']
            pbill.contact_name=request.POST['contact_name']
            pbill.deliverto=request.POST['deliverto']
            pbill.date=request.POST['date']
            pbill.deliver_date=request.POST['deliver_date']
            pbill.credit_period=request.POST['credit_period']
            pbill.due_date=request.POST['due_date']
            pbill.sub_total=request.POST['sub_total']
            pbill.discount=request.POST['discount']
            pbill.sgst=request.POST['sgst']
            pbill.cgst=request.POST['cgst']
            pbill.igst=request.POST['igst']
            pbill.tax_amount=request.POST['tax_amount']
            pbill.tcs=request.POST['tcs']
            pbill.tcs_amount=request.POST['tcs_amount']
            pbill.balance_due=request.POST['balance_due']
            pbill.amtrecvd=request.POST['amtrecvd']
            pbill.round_off=request.POST['round_off']
            pbill.grand_total=request.POST['grand_total']
            pbill.note=request.POST['note']

            if len(request.FILES) != 0:
                if len(pbill.file) > 0  :
                    os.remove(pbill.file.path)    
                pbill.file = request.FILES['file']

            pbill.save()

            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            rate = request.POST.getlist("rate[]")
            tax = request.POST.getlist("tax[]")
            amount = request.POST.getlist("amount[]")

            bitmid = request.POST.getlist("id[]")

            billid=purchasebill.objects.get(billid=pbill.billid)

            if len(items)==len(hsn)==len(quantity)==len(rate)==len(tax)==len(amount)==len(bitmid) and items and hsn and quantity and rate and tax and amount and bitmid:
                mapped=zip(items,hsn,quantity,rate,tax,amount,bitmid)
                mapped=list(mapped)
                for ele in mapped:
                    created = purchasebill_item.objects.filter(id=ele[6]).update(items = ele[0],hsn = ele[1],quantity=ele[2],rate=ele[3],
                    tax=ele[4],amount=ele[5])

                    itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                    if itemqty.stock != 0:
                        temp=0
                        temp = itemqty.stock 

                        temp = temp-int(ele[2])
                        itemqty.stock =temp
                        itemqty.save()

            return redirect('gobilling')
        return render(request,'app1/gobilling.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def deletebill(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pbill=purchasebill.objects.get(billid=id)
        bitem = purchasebill_item.objects.all().filter(bill=id)
        stm = vendor_statment.objects.all().filter(pbill=id)
        pbill.delete() 
        bitem.delete() 
        stm.delete() 
        return redirect('gobilling')
    return redirect('gobilling')

def billconvert(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pbill = purchasebill.objects.get(billid=id)
        pbill.status = 'Billed'
        pbill.save()
        return redirect(viewbill,id)
    return redirect('/')

def bill_draft(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pbill = purchasebill.objects.filter(status='Draft').all()
    return render(request,'app1/gobilling.html',{'cmp1':cmp1,'pbill':pbill})

def bill_billed(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    pbill = purchasebill.objects.filter(status='Billed').all()
    return render(request,'app1/gobilling.html',{'cmp1':cmp1,'pbill':pbill})

def getdata2(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        id = request.GET.get('id')
        x = id.split()
        x.append(" ")
        a = x[0]
        b = x[1]
        if x[2] is not None:
            b = x[1] + " " + x[2]
            custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
            list = []
            dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                    'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                    'gsttype': custobject.gsttype,
                    'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                    'website': custobject.website,
                    'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                    'state': custobject.state,
                    'pincode': custobject.pincode, 'country': custobject.country}
            list.append(dict)
        else:
            custobject = customer.objects.get(firstname=a, lastname=b, cid=cmp1)
            list = []
            dict = {'customerid': custobject.customerid, 'title': custobject.title, 'firstname': custobject.firstname,
                    'lastname': custobject.lastname, 'company': custobject.company, 'location': custobject.location,
                    'gsttype': custobject.gsttype,
                    'gstin': custobject.gstin, 'panno': custobject.panno, 'email': custobject.email,
                    'website': custobject.website,
                    'mobile': custobject.mobile, 'street': custobject.street, 'city': custobject.city,
                    'state': custobject.state,
                    'pincode': custobject.pincode, 'country': custobject.country}
            list.append(dict)
        return JsonResponse(json.dumps(list), content_type="application/json", safe=False)
    return redirect('/')

def goexpenses(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        expnc = purchase_expense.objects.all()
        return render(request,'app1/goexpenses.html',{'cmp1': cmp1,'expnc':expnc})
    return redirect('/') 

def addexpenses(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()
        cust = customer.objects.all()
        context = {'cmp1': cmp1, 'vndr': vndr, 'cust': cust}
        return render(request,'app1/addexpense.html',context)
    return redirect('/') 

def createexpense(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            expense_no= '1000'
            date = request.POST['date']
            eacc = request.POST['expenseaccount']
            etyp = request.POST['expensetype']
            hsnsac = request.POST['hsn_sac']
            amount = request.POST['amount']
            paidthrough = request.POST['paidthrough']
            vendor = request.POST['vendor']
            gsttype = request.POST['gsttype']
            supply=request.POST['sourceofsupply']
            destsupply=request.POST['destinofsupply']
            customer=request.POST['customer']
            tax=request.POST['tax']
            reference=request.POST['reference']
            note=request.POST['note']

            exp = purchase_expense(date=date,expenseaccount=eacc,expensetype=etyp,hsn_sac=hsnsac,amount=amount,
                            paidthrough=paidthrough,vendor=vendor,gsttype=gsttype, sourceofsupply=supply, 
                            destinofsupply=destsupply,customer=customer,tax=tax,reference=reference,note=note)

            if len(request.FILES) != 0:
                exp.file=request.FILES['file'] 

            exp.save()
            exp.expense_no = int(exp.expense_no) + exp.expenseid
            exp.save()

            return redirect('goexpenses')
        return render(request,'app1/goexpenses.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def viewexpense(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        expnce=purchase_expense.objects.get(expenseid=id)
        return render(request,'app1/viewexpense.html',{'cmp1': cmp1,'expnce':expnce})
    return redirect('/')

@login_required(login_url='regcomp')
def expense_add_file(request,id):
    cmp1 = company.objects.get(id=request.session['uid'])
    ex = purchase_expense.objects.get(expenseid=id)

    if request.method == 'POST':
        if len(request.FILES) != 0:
            if ex.file != "default.png":
                os.remove(ex.file.path)    
            ex.file=request.FILES['file']
        ex.save()
        return redirect('viewexpense',id)

@login_required(login_url='regcomp')
def goeditexpense(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        expnce=purchase_expense.objects.get(expenseid=id)
        vndr = vendor.objects.all()
        cust = customer.objects.all()
        context = {
                    'cmp1': cmp1,
                    'vndr':vndr,
                    'cust':cust,
                    'expnce':expnce,       
                }
        return render(request,'app1/editexpense.html',context)
    return redirect('/')

def editexpense(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            expnce=purchase_expense.objects.get(expenseid=id)
            expnce.date = request.POST['date']
            expnce.expenseaccount = request.POST['expenseaccount']
            expnce.expensetype = request.POST['expensetype']
            expnce.hsn_sac = request.POST['hsn_sac']
            expnce.amount = request.POST['amount']
            expnce.paidthrough = request.POST['paidthrough']
            expnce.vendor = request.POST['vendor']
            expnce.gsttype = request.POST['gsttype']
            expnce.sourceofsupply=request.POST['sourceofsupply']
            expnce.destinofsupply=request.POST['destinofsupply']
            expnce.customer=request.POST['customer']
            expnce.tax=request.POST['tax']
            expnce.reference=request.POST['reference']
            expnce.note=request.POST['note']

            if len(request.FILES) != 0:
                if len(expnce.file) > 0  :
                    os.remove(expnce.file.path)    
                expnce.file = request.FILES['file']
            expnce.save()

            return redirect('goexpenses')
        return render(request,'app1/goexpenses.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def deleteexpense(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        expnce=purchase_expense.objects.get(expenseid=id)
        expnce.delete() 
        return redirect('goexpenses')
    return redirect('/')

@login_required(login_url='regcomp')
def credit_period(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            period = request.POST['newperiod']
            cpd=creditperiod(newperiod = period)
            cpd.save()
            return redirect('addpurchaseorder')
        return render(request,'app1/addpurchaseorder.html',{'cmp1':cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def credit_period1(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            period = request.POST['newperiod']
            cpd=creditperiod(newperiod = period)
            cpd.save()
            return redirect('addvendor')
        return render(request,'app1/addvendor.html',{'cmp1':cmp1})
    return redirect('/')

@login_required(login_url='regcomp')
def credit_period2(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            period = request.POST['newperiod']
            cpd=creditperiod(newperiod = period)
            cpd.save()
            return redirect('aaddbilling')
        return render(request,'app1/addbilling.html',{'cmp1':cmp1})
    return redirect('/')

def getbilldata(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session["uid"])
        id = request.POST['select']
        print (id)
        billitm = purchasebill.objects.values().filter(vendor_name=id)
        x_data = list(billitm)
        return JsonResponse({"status":" not","billitm":x_data})

def gopurchasepymnt(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        py = purchasepayment.objects.all()
        return render(request,'app1/gopurchasepymnt.html',{'cmp1': cmp1,'py':py})
    return redirect('/') 

@login_required(login_url='regcomp')
def addpurchasepymnt(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()  
        pymt = paymentmethod.objects.all()  
        return render(request,'app1/addpurchasepymnt.html',{'cmp1':cmp1,'vndr':vndr,'pymt':pymt})
    return redirect('/')

def createpurchasepymnt(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            reference = '1000'
            pymnt1 = purchasepayment(vendor = request.POST['vendor'],
                                    paymentdate = request.POST['paymentdate'],
                                    paymentmethod=request.POST['paymentmethod'],
                                    depositeto=request.POST['depto'],
                                    amtreceived=request.POST['amtreceived'],
                                    paymentamount=request.POST['paymentamount'],
                                    amtcredit=request.POST['amtcredit'])
            pymnt1.save()
            pymnt1.reference = int(pymnt1.reference) + pymnt1.pymntid
            pymnt1.save()

            statment2=vendor_statment()
            statment2.vendor = pymnt1.vendor
            statment2.cid = cmp1
            statment2.transactions = "Payable"
            statment2.paymnt = pymnt1
            statment2.details = pymnt1.reference
            statment2.date = pymnt1.paymentdate
            statment2.payments = pymnt1.paymentamount
            statment2.save()

            billdate = request.POST.getlist("billdate[]")
            billno = request.POST.getlist("billno[]")
            billamount = request.POST.getlist("billamount[]")
            duedate = request.POST.getlist("duedate[]")
            amountdue = request.POST.getlist("amountdue[]")
            payments = request.POST.getlist("payment[]")

            pyitm=purchasepayment.objects.get(pymntid=pymnt1.pymntid)

            if len(billdate)==len(billno)==len(billamount)==len(duedate)==len(amountdue)==len(payments) and billdate and billno and billamount and duedate and amountdue and payments :
                mapped=zip(billdate,billno,billamount,duedate,amountdue,payments)
                mapped=list(mapped)
                for ele in mapped:
                    billAdd,created = purchasepayment1.objects.get_or_create(billdate = ele[0],billno=ele[1],billamount=ele[2],
                    duedate=ele[3],amountdue=ele[4],payments=ele[5],pymnt=pyitm)

            paymentamount = float(request.POST['paymentamount'])
            accont = accounts1.objects.get(
                name='Accounts Payable(Creditors)',cid=cmp1)
            accont.balance = accont.balance - paymentamount
            accont.save()
            depositeto = request.POST['depto']
            try:
                if accounts1.objects.get(name=depositeto,cid=cmp1):
                    print(depositeto)
                    acconut = accounts1.objects.get(name=depositeto)
                    acconut.balance = acconut.balance + paymentamount
                    acconut.save()
            except:
                pass
            try:
                if accounts.objects.get(name=depositeto,cid=cmp1):
                    acconut = accounts.objects.get(name=depositeto, cid=cmp1)
                    acconut.balance = acconut.balance + paymentamount
                    acconut.save()
            except:
                pass
            # 
            pymtbill = purchasepayment1.objects.filter()               
            try:
                for i in pymtbill:
                    if purchasebill.objects.get(bill_no=i.billno) and i.billno != 'undefined':
                        print(depositeto)
                        pbl = purchasebill.objects.get(bill_no=i.billno)
                        pbl.amtrecvd = int(pbl.amtrecvd) + int(i.payments)
                        pbl.balance_due = float(i.amountdue) - float(i.payments)
                        if pbl.balance_due == 0.0:
                            pbl.status = "Paid"
                        pbl.save()
            except:
                pass
            return redirect('gopurchasepymnt')
        else:
            return redirect('gopurchasepymnt')
    return redirect('/') 

@login_required(login_url='regcomp')
def viewpurchasepymnt(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        paymt=purchasepayment.objects.get(pymntid=id)
        paymt1 = purchasepayment1.objects.all().filter(pymnt=id)
        return render(request,'app1/viewpurchasepymnt.html',{'cmp1': cmp1,'paymt':paymt,'py':paymt1})
    return redirect('gopurchasepymnt')

@login_required(login_url='regcomp')
def goeditpurchasepymnt(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        paymt=purchasepayment.objects.get(pymntid=id)
        paymt1 = purchasepayment1.objects.all().filter(pymnt=id)

        count = purchasepayment1.objects.filter(pymnt=paymt).count()
        print(count)
       
        context = {
                    'cmp1': cmp1,
                    'paymt':paymt,
                    'paymt1':paymt1, 
                    'count':count       
                }
        return render(request,'app1/editpurchasepymnt.html',context)
    return redirect('/')

def editpurchasepymnt(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            paymt=purchasepayment.objects.get(pymntid=id)
            paymt.vendor = request.POST['vendor']
            paymt.reference= request.POST['reference']
            paymt.paymentdate=request.POST['paymentdate']
            paymt.paymentmethod=request.POST['paymentmethod']
            paymt.depositeto=request.POST['depto']
            paymt.amtreceived=request.POST['amtreceived']
            paymt.paymentamount=request.POST['paymentamount']
            paymt.amtcredit=request.POST['amtcredit']

            paymt.save()

            billdate = request.POST.getlist("billdate[]")
            billno = request.POST.getlist("billno[]")
            billamount = request.POST.getlist("billamount[]")
            duedate = request.POST.getlist("duedate[]")
            amountdue = request.POST.getlist("amountdue[]")
            payments = request.POST.getlist("payments[]")
    
            pyid = request.POST.getlist("id[]")

            pymntid = purchasepayment.objects.get(pymntid=paymt.pymntid)

            if len(billdate)==len(billno)==len(billamount)==len(duedate)==len(amountdue)==len(payments)==len(pyid) and billdate and billno and billamount and duedate and amountdue and payments and pyid:
                mapped=zip(billdate,billno,billamount,duedate,amountdue,payments,pyid)
                mapped=list(mapped)
                for ele in mapped:
                    created = purchasepayment1.objects.filter(id=ele[6]).update(billdate = ele[0],billno = ele[1],billamount=ele[2],duedate=ele[3],
                    amountdue=ele[4],payments=ele[5])

            statment2=vendor_statment.objects.get(cid=cmp1,paymnt=paymt)
            statment2.vendor = paymt.vendor
            statment2.cid = cmp1
            statment2.transactions = "Payable"
            statment2.paymnt = paymt
            statment2.details = paymt.reference
            statment2.date = paymt.paymentdate
            statment2.payments = paymt.paymentamount
            statment2.save()

            return redirect('gopurchasepymnt')
        return render(request,'app1/gopurchasepymnt.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def deletepurchasepymnt(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        paymt=purchasepayment.objects.get(pymntid=id)
        py = purchasepayment1.objects.all().filter(pymnt=id)
        stm = vendor_statment.objects.all().filter(paymnt=id)
        paymt.delete() 
        py.delete() 
        stm.delete() 
        return redirect('gopurchasepymnt')
    return redirect('gopurchasepymnt')

@login_required(login_url='regcomp')
def payment_method(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method=='POST':
            meth = request.POST['newmethod']
            npm=paymentmethod(newmethod = meth)
            npm.save()
            return redirect('addpurchasepymnt')
        return render(request,'app1/addpurchasepymnt.html',{'cmp1':cmp1})
    return redirect('/')

def gopurchasedebit(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pdebit = purchasedebit.objects.all()  
        return render(request,'app1/gopurchasedebit.html',{'cmp1': cmp1,'pdebit':pdebit})
    return redirect('gopurchasedebit') 

def addpurchasedebit(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        vndr = vendor.objects.all()  
        pbill = purchasebill.objects.all()  
        item = itemtable.objects.all() 
        context = {'cmp1': cmp1,'vndr':vndr,'item':item,'pbill':pbill} 
        return render(request,'app1/addpurchasedebit.html',context)
    return redirect('gopurchasedebit') 

def itemdata(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        id = request.GET.get('id')

        item = itemtable.objects.get(name=id,cid=cmp1)
        print(item)
        hsn = item.hsn
        qty = item.stock
        price = item.sales_cost
        gst = item.intra_st
        sgst = item.inter_st
        return JsonResponse({"status":" not",'hsn':hsn,'qty':qty,'price':price,'gst':gst,'sgst':sgst,})
    return redirect('/')

def createpurchasedebit(request):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            debit_no = '1000'
            pdebit = purchasedebit(vendor = request.POST['vendor'],
                                    address = request.POST['address'],
                                    email=request.POST['email'],
                                    debitdate=request.POST['debitdate'],
                                    supply=request.POST['supply'],
                                    billno=request.POST['billno'],
                                    subtotal=request.POST['subtotal'],
                                    taxamount=request.POST['taxamount'],
                                    grandtotal=request.POST['grandtotal'],
                                    cid=cmp1
                                )
            pdebit.save()
            pdebit.debit_no = int(pdebit.debit_no) + pdebit.pdebitid
            pdebit.save()


            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("tax[]")
            total = request.POST.getlist("total[]")

            pdeb=purchasedebit.objects.get(pdebitid=pdebit.pdebitid)

            if len(items)==len(hsn)==len(quantity)==len(price)==len(tax)==len(total) and items and hsn and quantity and price and tax and total:
                mapped=zip(items,hsn,quantity,price,tax,total)
                mapped=list(mapped)
                for ele in mapped:
                    porderAdd,created = purchasedebit1.objects.get_or_create(items = ele[0],hsn=ele[1],quantity=ele[2],price=ele[3],
                    tax=ele[4],total=ele[5],pdebit=pdeb)

                    itemqty = itemtable.objects.get(name=ele[0],cid=cmp1)
                    if itemqty.stock != 0:
                        temp=0
                        temp = itemqty.stock 

                        temp = temp-int(ele[2])
                        itemqty.stock =temp
                        itemqty.save()

            return redirect('gopurchasedebit')
        return render(request,'app1/addpurchasedebit.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def viewpurchasedebit(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pdebt=purchasedebit.objects.get(pdebitid=id)
        pdebt1 = purchasedebit1.objects.all().filter(pdebit=id)
        return render(request,'app1/viewpurchasedebit.html',{'cmp1': cmp1,'pdebt':pdebt,'pdeb':pdebt1})
    return redirect('gopurchasedebit')

@login_required(login_url='regcomp')
def goeditpurchasedebit(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pdebt=purchasedebit.objects.get(pdebitid=id)
        pdebt1 = purchasedebit1.objects.all().filter(pdebit=id)
        context = {
                    'cmp1': cmp1,
                    'pdebt':pdebt,
                    'pdebt1':pdebt1         
                }
        return render(request,'app1/editpurchasedebit.html',context)
    return redirect('/')

def editpurchasedebit(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        if request.method == 'POST':
            pdebt=purchasedebit.objects.get(pdebitid=id)
            pdebt.vendor = request.POST['vendor']
            pdebt.address = request.POST['address']
            pdebt.debit_no= request.POST['debit_no']
            pdebt.supply=request.POST['supply']
            pdebt.debitdate=request.POST['debitdate']
            pdebt.email=request.POST['email']
            pdebt.billno=request.POST['billno']
            pdebt.subtotal=request.POST['subtotal']
            pdebt.taxamount=request.POST['taxamount']
            pdebt.grandtotal=request.POST['grandtotal']

            pdebt.save()

            items = request.POST.getlist("items[]")
            hsn = request.POST.getlist("hsn[]")
            quantity = request.POST.getlist("quantity[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("tax[]")
            total = request.POST.getlist("total[]")

            pdebid = request.POST.getlist("id[]")

            pdebitid=purchasedebit.objects.get(pdebitid=pdebt.pdebitid)

            if len(items)==len(hsn)==len(quantity)==len(price)==len(tax)==len(total)==len(pdebid) and items and hsn and quantity and price and tax and total and pdebid:
                mapped=zip(items,hsn,quantity,price,tax,total,pdebid)
                mapped=list(mapped)
                for ele in mapped:
                    created = purchasedebit1.objects.filter(id=ele[6]).update(items = ele[0],hsn = ele[1],quantity=ele[2],price=ele[3],
                    tax=ele[4],total=ele[5])

            return redirect('gopurchasedebit')
        return render(request,'app1/gopurchasedebit.html',{'cmp1': cmp1})
    return redirect('/') 

@login_required(login_url='regcomp')
def deletepurchasedebit(request, id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])
        pdebt=purchasedebit.objects.get(pdebitid=id)
        pdebt1 = purchasedebit1.objects.all().filter(pdebit=id)
        pdebt.delete() 
        pdebt1.delete() 
        return redirect('gopurchasedebit')
    return redirect('gopurchasedebit')

def purchase_acctransactions(request,id):
    if 'uid' in request.session:
        if request.session.has_key('uid'):
            uid = request.session['uid']
        else:
            return redirect('/')
        cmp1 = company.objects.get(id=request.session['uid'])

        x = id.split()
        x.append(" ")
        a = x[0]
        b = x[1]

        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")

        to=toda.strftime("%d-%m-%Y")
        
        # vndrobject = vendor.objects.get(firstname=a, lastname=b, cid=cmp1)
        # opnbal =vndrobject.openingbalance
        # print(opnbal) 
        
        statment = vendor_statment.objects.filter(vendor=id,cid=cmp1)
        total1 = purchasebill.objects.filter(cid=cmp1,vendor_name=id).all().aggregate(t2=Sum('balance_due'))

        debit=0
        credit=0
        total2 = 0

        for i in statment :
            if i.transactions =="Billed":
                credit+=i.payments

            if i.transactions =="Payable":
                debit+=i.payments
        
            if i.payments:
                total2+=i.payments

        fdate =""
        ldate =""

        context = {'statment':statment, 'cmp1':cmp1, 'total1':total1, 'total2':total2, 'credit':credit, 'debit':debit, 'vndr2':id, 'to':to,
            'fdate':fdate, 'ldate':ldate,    
        }
        return render(request,'app1/purchase_acctransactions.html',context)
    return redirect('/')

def purchase_acctransactions1(request):
    if request.method =="POST":
        vndr = request.POST['vndr']
        select=request.POST['reportperiod']
        if select =="All dates":
            return redirect('purchase_acctransactions',vndr)
        if select == "Custom":
            fdate = request.POST['fdate']
            ldate = request.POST['ldate']
            cmp1 = company.objects.get(id=request.session["uid"])
            print(fdate)

            x = vndr.split()
            x.append(" ")
            a = x[0]
            b = x[1]
            cu = a +" "+ b
            # vndrobject = vendor.objects.get(firstname=a, lastname=b,cid=cmp1)
            # opnbal =vndrobject.openingbalance
            # print(opnbal) 

            statment = vendor_statment.objects.filter(vendor=cu,cid=cmp1,date__gte=fdate,date__lte=ldate)
            total1 = purchasebill.objects.filter(cid=cmp1,vendor_name=cu,date__gte=fdate,date__lte=ldate).all().aggregate(t2=Sum('balance_due'))

            debit=0
            credit=0
            total2 = 0

            for i in statment :
                if i.transactions =="Billed":
                    credit+=i.payments

                if i.transactions =="Payable":
                    debit+=i.payments
            
                if i.payments:
                    total2+=i.payments
            
            context = {'statment':statment, 'cmp1':cmp1,'total1':total1, 'total2':total2, 'credit':credit, 'debit':debit, 'vndr2':vndr,
                'fdate':fdate,'ldate':ldate,
            }
            return render(request,'app1/purchase_acctransactions.html',context)

@login_required(login_url='regcomp')
def bnnk(request):
    
    i=accounts1.objects.filter(acctype='Bank')
    c=accounts1.objects.filter(acctype='Cash')
    u=accounts1.objects.filter(acctype='Undepposited Funds')
    
    context={'i':i,'c':c,'u':u}
    return render(request,'app1/bnk.html',context)

def sa(request):
    csname = request.POST.get('customername')
    gs = csname.split(' ') 
    print(csname)
    ha = customer.objects.filter(firstname=gs[0])
    context={'ha':ha,}
    return render(request,"app1/bnk1.html",context)

    # ck=customer.objects.get(customerid=pk)
    # context={'ck':ck,}
    # return render(request,"app1/bnk1.html",context)

def bnk1(request,pk):
    bk=accounts1.objects.get(accounts1id=pk)
    customers = customer.objects.all()
    cmp1 = company.objects.get(id=request.session["uid"])
    context={'bk':bk,'customers': customers, 'cmp1': cmp1}
    return render(request,"app1/bnk1.html",context)


def accpayment(request):
    cmp1 = company.objects.get(id=request.session["uid"])
    acctype = request.POST.get('acctype')
        
    name = request.POST.get('name')
    description = request.POST.get('description')
    
    balance = request.POST.get('balance')
    asof = request.POST.get('asof')
       
        
    account = accounts(acctype=acctype, name=name, description=description,
                                    balance=balance, asof=asof, cid=cmp1)
    account.save()
                
    return redirect('paymentindex')

def trial(request):
    tr=accounts1.objects.filter(acctype='Current Assets')
    ac=accounts1.objects.filter(acctype='Account Receivable')
    cul=accounts1.objects.filter(acctype='Current Liabilities')
    fx=accounts1.objects.filter(acctype='Fixed Assets')
    noca=accounts1.objects.filter(acctype='Non-Current Assetss')
    acp=accounts1.objects.filter(acctype='Accounts Payable')
    cr=accounts1.objects.filter(acctype='Credit Card')
    ncl=accounts1.objects.filter(acctype='Non-Current Liabilities')
    eq=accounts1.objects.filter(acctype='Equity')
    inc=accounts1.objects.filter(acctype='Income')
    onc=accounts1.objects.filter(acctype='Other Incomes')
    co=accounts1.objects.filter(acctype='Cost Of Goods Sold')
    ex=accounts1.objects.filter(acctype='Expenses')
    ox=accounts1.objects.filter(acctype='Other Expenses')
    

    sum1=0
    sum2=0
    for i in tr:
        sum1+=i.balance
    for j in tr:
        sum2+=j.dbbalance  

    sum3=0
    sum4=0
    for a in ac:
        sum3+=a.balance
    for b in ac:
        sum4+=b.dbbalance   

    cl1=0
    cl2=0
    for a in cul:
        cl1+=a.balance
        cl2+=a.dbbalance 

    fx1=0
    fx2=0
    for a in fx:
        fx1+=a.dbbalance
        fx2+=a.dbbalance    

    nc1=0.0
    nc2=0.0
    for a in noca:
        nc1+=a.balance       
        nc2+=a.dbbalance 

    acp1=0
    acp2=0
    for a in acp:
        acp1+=a.balance
        acp2+=a.dbbalance  

    cr1=0
    cr2=0
    for a in cr:
        cr1+=a.balance
        cr2+=a.dbbalance     

    ncl1=0
    ncl2=0
    for a in ncl:
        ncl1+=a.balance
        ncl2+=a.dbbalance   

    eq1=0
    eq2=0
    for a in eq:
        eq1+=a.balance
        eq2+=a.dbbalance  

    inc1=0
    inc2=0
    for a in inc:
        inc1+=a.balance
        inc2+=a.dbbalance      


    onc1=0
    onc2=0
    for i in onc:
        onc1+=i.balance
        onc2+=i.dbbalance   


    co1=0
    co2=0
    for a in co:
        co1+=a.balance
        co2+=a.dbbalance      

    ex1=0
    ex2=0
    for a in ex:
        ex1+=a.balance
        ex2+=a.dbbalance     

    ox1=0
    ox2=0
    for a in ox:
        ox1+=a.balance
        ox2+=a.dbbalance    

    crtot=sum1+sum3+cl1+fx1+nc1+acp1+cr1+ncl1+eq1+inc1+onc1+co1+ex1+ox1
    drtot=sum2+sum4+cl2+fx2+nc2+acp2+cr2+ncl2+eq2+inc2+onc2+co2+ex2+ox2

    diff=crtot-drtot





    context={'tr':tr,'sum1':sum1,'sum2':sum2,'sum3':sum3,'sum4':sum4,'cl1':cl1,'cl2':cl2,'fx1':fx1,'fx2':fx2,
    'nc1':nc1,'nc2':nc2,'acp1':acp1,'acp2':acp2,'cr1':cr1,'cr2':cr2,'ncl1':ncl1,'ncl2':ncl2,'eq1':eq1,'eq2':eq2,
    'inc1':inc1,'inc2':inc2,'onc1':onc1,'onc2':onc2,'co1':co1,'co2':co2,'ex1':ex1,'ex2':ex2,'ox1':ox1,'ox2':ox2,
    'crtot':crtot,'drtot':drtot,'diff':diff}
    return render(request,"app1/trialbalance.html",context)

def cras(request):
    cras=accounts1.objects.filter(acctype='Current Assets')

    cr=0
    dr=0
    for a in cras:
        cr+=a.balance
        dr+=a.dbbalance

    context={'cras':cras,'cr':cr,'dr':dr}
    return render(request,"app1/crassets.html",context)  

def acre(request):
    ac=accounts1.objects.filter(acctype='Account Receivable')
    context={'ac':ac}
    return render(request,"app1/acre.html",context)  

def curli(request):
    li= accounts1.objects.filter(acctype='Current Liabilities')   
    context={'li':li} 
    return render(request,"app1/curli.html",context)

def fix(request):
    fix=accounts1.objects.filter(acctype='Fixed Assets') 
    context={'fix':fix}
    return render(request,"app1/fix.html",context)

def nonass(request):
    nona=accounts1.objects.filter(acctype='Non-Current Assets')
    context={'nona':nona} 
    return render(request,"app1/nonass.html",context) 

def accpay(request):
    acp= accounts1.objects.filter(acctype='Accounts Payable')  
    context={'acp':acp}
    return render(request,"app1/accpay.html",context)

def credc(request):
    cre= accounts1.objects.filter(acctype='Credit Card')  
    context={'cre':cre}
    return render(request,"app1/credc.html",context)    

def nonli(request):
    nli= accounts1.objects.filter(acctype='Non-Current Liabilities')  
    context={'nli':nli}
    return render(request,"app1/nonli.html",context)        

def eqt(request):
    eq= accounts1.objects.filter(acctype='Equity')  
    context={'eq':eq}
    return render(request,"app1/eqt.html",context)    

def incm(request):
    inc= accounts1.objects.filter(acctype='Income')  
    context={'inc':inc}
    return render(request,"app1/incm.html",context) 

def oincm(request):
    oinc= accounts1.objects.filter(acctype='Other Incomes')  
    context={'oinc':oinc}
    return render(request,"app1/oincm.html",context)                

def cog(request):
    co= accounts1.objects.filter(acctype='Cost Of Goods Sold')  
    context={'co':co}
    return render(request,"app1/cog.html",context) 

def exp(request):
    ex=accounts1.objects.filter(acctype='Expenses')  
    context={'ex':ex}
    return render(request,"app1/exp.html",context)                            

def acres(request,pk):
    cr=accounts1.objects.get(accounts1id=pk)
    context={'cr':cr}
    return render(request,'app1/ledger.html',context)       